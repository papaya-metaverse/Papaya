{
  "address": "0x14B9400C6ffE4B0a76ba4F5c3F98691e6d65b0A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolSigner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolWallet_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "CHAIN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "TOKEN_DECIMALS_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExcessOfRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessOfSubscriptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficialBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLegal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSubscribed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Permit2TransferAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceTheAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TopUpBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPercent",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "rate",
          "type": "uint96"
        }
      ],
      "name": "ChangeSubscriptionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayBySig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Subscribe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Unsubscribe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "userFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        }
      ],
      "name": "UpdateSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROX_LIQUIDATE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROX_SUBSCRIPTION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COIN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COIN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "subscriptionRate",
          "type": "uint96"
        }
      ],
      "name": "changeSubscriptionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PayoutSigVerifier.DepositSig",
          "name": "depositsig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        }
      ],
      "name": "depositBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.PaymentSig",
          "name": "payment",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "payBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.SubSig",
          "name": "subscribeSig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "subscribeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.UnSubSig",
          "name": "unsubscribeSig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "unsubscribeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolSigner_",
          "type": "address"
        }
      ],
      "name": "updateProtocolSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolWallet_",
          "type": "address"
        }
      ],
      "name": "updateProtocolWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint96",
                  "name": "subscriptionRate",
                  "type": "uint96"
                },
                {
                  "internalType": "uint16",
                  "name": "userFee",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "protocolFee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Settings",
              "name": "settings",
              "type": "tuple"
            }
          ],
          "internalType": "struct PayoutSigVerifier.SettingsSig",
          "name": "settings",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "updateSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "incomeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outgoingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "updTimestamp",
          "type": "uint40"
        },
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "subscriptionRate",
              "type": "uint96"
            },
            {
              "internalType": "uint16",
              "name": "userFee",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "protocolFee",
              "type": "uint16"
            }
          ],
          "internalType": "struct PayoutSigVerifier.Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf59db2db379e6df17e28b1227c6855e9fc597da45baddc7040fbe36ef728db6",
  "receipt": {
    "to": null,
    "from": "0xC6a51980712aAD77A4394e847a8958c9CF6a629D",
    "contractAddress": "0x14B9400C6ffE4B0a76ba4F5c3F98691e6d65b0A7",
    "transactionIndex": 92,
    "gasUsed": "3467476",
    "logsBloom": "0x
    "blockHash": "0xf8e71efa68c8278e8d85821ff319d6a2486ac1102aa36e9fc3def1fab5194a3f",
    "transactionHash": "0xcf59db2db379e6df17e28b1227c6855e9fc597da45baddc7040fbe36ef728db6",
    "logs": [
      {
        "transactionIndex": 92,
        "blockNumber": 52888592,
        "transactionHash": "0xcf59db2db379e6df17e28b1227c6855e9fc597da45baddc7040fbe36ef728db6",
        "address": "0x14B9400C6ffE4B0a76ba4F5c3F98691e6d65b0A7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea6b9377a931a851f3d683ba1d047343f13759a"
        ],
        "data": "0x",
        "logIndex": 458,
        "blockHash": "0xf8e71efa68c8278e8d85821ff319d6a2486ac1102aa36e9fc3def1fab5194a3f"
      },
      {
        "transactionIndex": 92,
        "blockNumber": 52888592,
        "transactionHash": "0xcf59db2db379e6df17e28b1227c6855e9fc597da45baddc7040fbe36ef728db6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c6a51980712aad77a4394e847a8958c9cf6a629d",
          "0x000000000000000000000000e05ae0e76f582817c9e31d9c1a5c02287a31d689"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001719188116a70000000000000000000000000000000000000000000000000001161ecafbfa23727000000000000000000000000000000000000000000000070db4f64a6d9725cdb0000000000000000000000000000000000000000000000000ff05b27ae37c727000000000000000000000000000000000000000000000070dcc0f62eeadcccdb",
        "logIndex": 459,
        "blockHash": "0xf8e71efa68c8278e8d85821ff319d6a2486ac1102aa36e9fc3def1fab5194a3f"
      }
    ],
    "blockNumber": 52888592,
    "cumulativeGasUsed": "18818658",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdEa6B9377A931a851F3D683bA1D047343F13759A",
    "0xa461C50e169464dFFcd65A96bfa9682dE93b7520",
    "0xdEa6B9377A931a851F3D683bA1D047343F13759A",
    "0xAB594600376Ec9fD91F8e885dADF0CE036862dE0",
    "0x0A6513e40db6EB1b165753AD52E80663aeA50545",
    "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    "6"
  ],
  "numDeployments": 1,
  "solcInputHash": "b172bb493e7a57d619e80428af5356ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolSigner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CHAIN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"TOKEN_DECIMALS_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExcessOfRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessOfSubscriptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficialBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLegal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSubscribed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceTheAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TopUpBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPercent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"ChangeSubscriptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBySig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Unsubscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"name\":\"UpdateSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROX_LIQUIDATE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROX_SUBSCRIPTION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COIN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COIN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"}],\"name\":\"changeSubscriptionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.DepositSig\",\"name\":\"depositsig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.PaymentSig\",\"name\":\"payment\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"payBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.SubSig\",\"name\":\"subscribeSig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"subscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.UnSubSig\",\"name\":\"unsubscribeSig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"unsubscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolSigner_\",\"type\":\"address\"}],\"name\":\"updateProtocolSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolWallet_\",\"type\":\"address\"}],\"name\":\"updateProtocolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"internalType\":\"struct PayoutSigVerifier.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"internalType\":\"struct PayoutSigVerifier.SettingsSig\",\"name\":\"settings\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"incomeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outgoingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"updTimestamp\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"internalType\":\"struct PayoutSigVerifier.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payout.sol\":\"Payout\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbbb219886412a339a7f84b0850f700311dd2b3a106919ae54fa0a215d847a3b2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x63209a082f66ecb584b86e412b3dd0010e9675bc19bc1f80a75437311df7ec11\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x00eeab44dfd24ef7c27fcdfdf7b4d4df54a17650662522c1bf85950965892a3a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n\\n    /// @dev Returns latest external call revert reason.\\n    function reReason() internal pure returns (bytes memory reason) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            reason := mload(0x40)\\n            let length := returndatasize()\\n            mstore(reason, length)\\n            returndatacopy(add(reason, 0x20), 0, length)\\n            mstore(0x40, add(reason, add(0x20, length)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09986dc39ef02966c542275678f75c830a3e17992fba050b32a7fd8e2d210699\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Unknown\\n            default {\\n                mstore(ptr, _PERMIT_LENGTH_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f1f5a6cc86c27c64a5e18ff33a683df22b5ab00b9a409f9b1fc13b32462d1b4\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Payout.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport {SafeERC20} from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\r\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPayout.sol\\\";\\r\\nimport \\\"./abstract/PayoutSigVerifier.sol\\\";\\r\\nimport \\\"./library/UserLib.sol\\\";\\r\\n\\r\\ncontract Payout is IPayout, PayoutSigVerifier {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using UserLib for UserLib.User;\\r\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\r\\n\\r\\n    uint256 public constant APPROX_LIQUIDATE_GAS = 120000;\\r\\n    uint256 public constant APPROX_SUBSCRIPTION_GAS = 8000;\\r\\n    uint8 public constant COIN_DECIMALS = 18;\\r\\n    uint8 public constant SUBSCRIPTION_THRESHOLD = 100;\\r\\n\\r\\n    AggregatorV3Interface public immutable COIN_PRICE_FEED;\\r\\n    AggregatorV3Interface public immutable TOKEN_PRICE_FEED;\\r\\n\\r\\n    IERC20 public immutable TOKEN;\\r\\n    uint8 public immutable TOKEN_DECIMALS;\\r\\n\\r\\n    mapping(address account => UserLib.User) public users;\\r\\n    mapping(address account => EnumerableMap.AddressToUintMap) private _subscriptions;\\r\\n\\r\\n    address public protocolWallet;\\r\\n    uint256 public totalBalance;\\r\\n\\r\\n    modifier transferExecutionFee(\\r\\n        address spender, \\r\\n        address receiver,\\r\\n        uint256 executionFee\\r\\n    ) {\\r\\n        users[spender].decreaseBalance(\\r\\n            users[protocolWallet],\\r\\n            executionFee,\\r\\n            _liquidationThreshold(spender)\\r\\n        );\\r\\n        users[receiver].increaseBalance(executionFee);\\r\\n\\r\\n        emit Transfer(spender, receiver, executionFee);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address admin,\\r\\n        address protocolSigner_,\\r\\n        address protocolWallet_,\\r\\n        address CHAIN_PRICE_FEED_,\\r\\n        address TOKEN_PRICE_FEED_,\\r\\n        address TOKEN_,\\r\\n        uint8 TOKEN_DECIMALS_\\r\\n    ) PayoutSigVerifier(protocolSigner_, admin) {\\r\\n        COIN_PRICE_FEED = AggregatorV3Interface(CHAIN_PRICE_FEED_);\\r\\n        TOKEN_PRICE_FEED = AggregatorV3Interface(TOKEN_PRICE_FEED_);\\r\\n        TOKEN = IERC20(TOKEN_);\\r\\n        TOKEN_DECIMALS = TOKEN_DECIMALS_;\\r\\n        protocolWallet = protocolWallet_;\\r\\n    }\\r\\n\\r\\n    function updateProtocolWallet(address protocolWallet_) external onlyOwner {\\r\\n        protocolWallet = protocolWallet_;\\r\\n    }\\r\\n\\r\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\r\\n        if (token == TOKEN && amount > TOKEN.balanceOf(address(this)) - totalBalance) {\\r\\n            revert UserLib.InsufficialBalance();\\r\\n        }\\r\\n\\r\\n        if (address(token) == address(0)) {\\r\\n            (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n\\r\\n            require(success, \\\"Payout: Transfer coin failed\\\");\\r\\n        } else {\\r\\n            token.safeTransfer(protocolWallet, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateSettings(\\r\\n        SettingsSig calldata settings, \\r\\n        bytes memory rvs\\r\\n    ) external {\\r\\n        if (settings.settings.protocolFee >= settings.settings.userFee) revert WrongPercent();\\r\\n        if (settings.settings.protocolFee + settings.settings.userFee != UserLib.FLOOR) revert WrongPercent();\\r\\n        verifySettings(settings, rvs);\\r\\n        users[settings.user].setSettings(settings.settings, users[protocolWallet]);\\r\\n\\r\\n        emit UpdateSettings(settings.user, settings.settings.userFee, settings.settings.protocolFee);\\r\\n    }\\r\\n\\r\\n    function deposit(uint amount) external {\\r\\n        _deposit(msg.sender, msg.sender, amount, false);\\r\\n    }\\r\\n\\r\\n    function depositFor(uint amount, address to) external {\\r\\n        _deposit(msg.sender, to, amount, false);\\r\\n    }\\r\\n\\r\\n    function depositWithPermit(bytes calldata permitData, uint amount) external {\\r\\n        TOKEN.tryPermit(permitData);\\r\\n        _deposit(msg.sender, msg.sender, amount, _isPermit2(permitData.length));\\r\\n    }\\r\\n\\r\\n    function depositBySig(\\r\\n        DepositSig calldata depositsig,\\r\\n        bytes calldata rvs,  \\r\\n        bytes calldata permitData\\r\\n    ) external transferExecutionFee(\\r\\n        depositsig.sig.signer, \\r\\n        msg.sender,\\r\\n        depositsig.sig.executionFee\\r\\n    ) {\\r\\n        verifyDepositSig(depositsig, rvs);\\r\\n        TOKEN.tryPermit(depositsig.sig.signer, address(this), permitData);\\r\\n        _deposit(depositsig.sig.signer, depositsig.sig.signer, depositsig.amount, _isPermit2(permitData.length));\\r\\n    }\\r\\n\\r\\n    function changeSubscriptionRate(uint96 subscriptionRate) external {\\r\\n        users[msg.sender].settings.subscriptionRate = subscriptionRate;\\r\\n\\r\\n        emit ChangeSubscriptionRate(msg.sender, subscriptionRate);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view  returns (uint) {\\r\\n        return uint(SignedMath.max(users[account].balanceOf(), int(0)));\\r\\n    }\\r\\n\\r\\n    function subscribe(address author, uint maxRate, bytes32 id) external {\\r\\n        _subscribeChecksAndEffects(msg.sender, author, maxRate);\\r\\n\\r\\n        emit Subscribe(msg.sender, author, id);\\r\\n    }\\r\\n\\r\\n    function subscribeBySig(\\r\\n        SubSig calldata subscribeSig, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee( \\r\\n        subscribeSig.sig.signer,\\r\\n        msg.sender, \\r\\n        subscribeSig.sig.executionFee\\r\\n    ) {\\r\\n        verifySubscribe(subscribeSig, rvs);\\r\\n        _subscribeChecksAndEffects(subscribeSig.sig.signer, subscribeSig.author, subscribeSig.maxRate);\\r\\n\\r\\n        emit Subscribe(subscribeSig.sig.signer, subscribeSig.author, subscribeSig.id);\\r\\n    }\\r\\n\\r\\n    function unsubscribe(address author, bytes32 id) external {\\r\\n        uint actualRate = _unsubscribeChecks(msg.sender, author);\\r\\n        _unsubscribeEffects(msg.sender, author, uint96(actualRate));\\r\\n\\r\\n        emit Unsubscribe(msg.sender, author, id);\\r\\n    }\\r\\n\\r\\n    function unsubscribeBySig(\\r\\n        UnSubSig calldata unsubscribeSig, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee(\\r\\n        unsubscribeSig.sig.signer, \\r\\n        msg.sender, \\r\\n        unsubscribeSig.sig.executionFee\\r\\n    ) {\\r\\n        verifyUnsubscribe(unsubscribeSig, rvs);\\r\\n\\r\\n        uint actualRate = _unsubscribeChecks(unsubscribeSig.sig.signer, unsubscribeSig.author);\\r\\n        _unsubscribeEffects(unsubscribeSig.sig.signer, unsubscribeSig.author, uint96(actualRate));\\r\\n\\r\\n        emit Unsubscribe(unsubscribeSig.sig.signer, unsubscribeSig.author, unsubscribeSig.id);\\r\\n    }\\r\\n\\r\\n    function payBySig(\\r\\n        PaymentSig calldata payment, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee(\\r\\n        payment.sig.signer, \\r\\n        msg.sender, \\r\\n        payment.sig.executionFee\\r\\n    ) {\\r\\n        verifyPayment(payment, rvs);\\r\\n\\r\\n        users[payment.sig.signer].decreaseBalance(\\r\\n            users[protocolWallet],\\r\\n            payment.amount,\\r\\n            _liquidationThreshold(payment.sig.signer)\\r\\n        );\\r\\n\\r\\n        users[payment.receiver].increaseBalance(payment.amount);\\r\\n\\r\\n        emit PayBySig(payment.sig.signer, payment.receiver, msg.sender, payment.id, payment.amount);\\r\\n        emit Transfer(payment.sig.signer, payment.receiver, payment.amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external {\\r\\n        users[msg.sender].decreaseBalance(users[protocolWallet], amount, _liquidationThreshold(msg.sender));\\r\\n        totalBalance -= amount;\\r\\n\\r\\n        TOKEN.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Transfer(msg.sender, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function liquidate(address account) external {\\r\\n        UserLib.User storage user = users[account];\\r\\n        if (!user.isLiquidatable(_liquidationThreshold(account))) revert NotLiquidatable();\\r\\n\\r\\n        EnumerableMap.AddressToUintMap storage user_subscriptions = _subscriptions[account];\\r\\n        for (uint i = user_subscriptions.length(); i > 0; i--) {\\r\\n            (address author, uint subscriptionRate) = user_subscriptions.at(i - 1);\\r\\n\\r\\n            _unsubscribeEffects(account, author, uint96(subscriptionRate));\\r\\n        }\\r\\n        user.drainBalance(users[msg.sender]);\\r\\n\\r\\n        emit Liquidate(account, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _isPermit2(uint256 length) private pure returns (bool) {\\r\\n        return length == 96 || length == 352;\\r\\n    }\\r\\n\\r\\n    function _deposit(address from, address to, uint amount, bool usePermit2) private {\\r\\n        users[to].increaseBalance(amount);\\r\\n        totalBalance += amount;\\r\\n\\r\\n        if(usePermit2) {\\r\\n            TOKEN.safeTransferFromPermit2(from, address(this), amount);\\r\\n        } else {\\r\\n            TOKEN.safeTransferFrom(from, address(this), amount);\\r\\n        }\\r\\n\\r\\n        emit Deposit(to, amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _unsubscribeChecks(address user, address author) private view returns (uint) {\\r\\n        (bool success, uint actualRate) = _subscriptions[user].tryGet(author);\\r\\n        if (!success) revert NotSubscribed();\\r\\n\\r\\n        return actualRate;\\r\\n    }\\r\\n\\r\\n    function _unsubscribeEffects(address user, address author, uint96 subscriptionRate) private {\\r\\n        users[user].decreaseOutgoingRate(subscriptionRate, users[protocolWallet]);\\r\\n        users[author].decreaseIncomeRate(subscriptionRate, _liquidationThreshold(author), users[protocolWallet]);\\r\\n        _subscriptions[user].remove(author);\\r\\n    }\\r\\n\\r\\n    function _subscribeChecksAndEffects(address user, address author, uint maxRate) private {\\r\\n        (bool success, uint actualRate) = _subscriptions[user].tryGet(author);\\r\\n        if (success) _unsubscribeEffects(user, author, uint96(actualRate));\\r\\n\\r\\n        if (_subscriptions[user].length() == SUBSCRIPTION_THRESHOLD) revert ExcessOfSubscriptions();\\r\\n\\r\\n        uint96 subscriptionRate = users[author].settings.subscriptionRate;\\r\\n        if (subscriptionRate > maxRate) revert ExcessOfRate();\\r\\n\\r\\n        users[user].increaseOutgoingRate(subscriptionRate, _liquidationThreshold(user), users[protocolWallet]);\\r\\n        users[author].increaseIncomeRate(subscriptionRate, users[protocolWallet]);\\r\\n        _subscriptions[user].set(author, subscriptionRate);\\r\\n    }\\r\\n\\r\\n    function _liquidationThreshold(address user) private view returns (int) {\\r\\n        (, int256 tokenPrice, , , ) = TOKEN_PRICE_FEED.latestRoundData();\\r\\n        (, int256 coinPrice, , , ) = COIN_PRICE_FEED.latestRoundData();\\r\\n\\r\\n        uint256 expectedNativeAssetCost = block.basefee *\\r\\n            (APPROX_LIQUIDATE_GAS + APPROX_SUBSCRIPTION_GAS * _subscriptions[user].length());\\r\\n\\r\\n        uint256 executionPrice = expectedNativeAssetCost * uint(coinPrice);\\r\\n\\r\\n        if (TOKEN_DECIMALS < COIN_DECIMALS) {\\r\\n            return int(executionPrice) / tokenPrice / int(10 ** (COIN_DECIMALS - TOKEN_DECIMALS));\\r\\n        } else {\\r\\n            return int(executionPrice) / tokenPrice;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13a41e6bee7d997bd6b5c6b43c326919f9bc8039437ddce492e39b11eaa28f59\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/PayoutSigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract PayoutSigVerifier is EIP712, Ownable {\\r\\n    error InvalidNonce();\\r\\n\\r\\n    struct Sig {\\r\\n        address signer;\\r\\n        uint256 nonce;\\r\\n        uint256 executionFee;\\r\\n    }\\r\\n\\r\\n    struct DepositSig {\\r\\n        Sig sig;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct PaymentSig {\\r\\n        Sig sig;\\r\\n        address receiver;\\r\\n        uint256 amount;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct SubSig {\\r\\n        Sig sig;\\r\\n        address author;\\r\\n        uint256 maxRate;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct UnSubSig {\\r\\n        Sig sig;\\r\\n        address author;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct Settings {\\r\\n        uint96 subscriptionRate;\\r\\n        uint16 userFee;\\r\\n        uint16 protocolFee;\\r\\n    }\\r\\n\\r\\n    struct SettingsSig {\\r\\n        Sig sig;\\r\\n        address user;\\r\\n        Settings settings;\\r\\n    }\\r\\n\\r\\n    string private constant SIGNING_DOMAIN = \\\"PayoutSigVerifier\\\";\\r\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\r\\n\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    address protocolSigner;\\r\\n\\r\\n    constructor(\\r\\n        address protocolSigner_, \\r\\n        address admin\\r\\n    ) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) Ownable(admin) {\\r\\n        protocolSigner = protocolSigner_;\\r\\n    }\\r\\n\\r\\n    function updateProtocolSigner(address protocolSigner_) external onlyOwner {\\r\\n        protocolSigner = protocolSigner_;\\r\\n    }\\r\\n\\r\\n    function getChainID() external view returns (uint256) {\\r\\n        return block.chainid;\\r\\n    }\\r\\n\\r\\n    function _hashPayment(PaymentSig calldata payment) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        keccak256(\\r\\n                            \\\"PaymentSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address receiver,\\\"\\r\\n                                \\\"uint256 amount,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ),\\r\\n                        payment\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashSettings(SettingsSig calldata settingssig) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        keccak256(\\r\\n                            \\\"SettingsSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address user,\\\"\\r\\n                                \\\"Settings settings\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Settings(\\\"\\r\\n                                \\\"uint96 subscriptionRate,\\\"\\r\\n                                \\\"uint16 userFee,\\\"\\r\\n                                \\\"uint16 protocolFee,\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ),\\r\\n                        settingssig\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashSubscribe(SubSig calldata subscription) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(keccak256(\\r\\n                            \\\"SubSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address author,\\\"\\r\\n                                \\\"uint256 maxRate,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        subscription\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashUnSubscribe(UnSubSig calldata unsubscription) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(abi.encode(keccak256(\\r\\n                            \\\"UnSubSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address author,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        unsubscription\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashDeposit(DepositSig calldata depositSig) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(abi.encode(keccak256(\\r\\n                            \\\"DepositSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"uint256 amount\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        depositSig\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verifyPayment(PaymentSig calldata payment, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashPayment(payment), payment.sig.signer, payment.sig.signer, payment.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function verifySettings(SettingsSig calldata settings, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashSettings(settings), protocolSigner, settings.user, settings.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function verifySubscribe(SubSig calldata subscription, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(\\r\\n            _hashSubscribe(subscription), \\r\\n            subscription.sig.signer, \\r\\n            subscription.sig.signer, \\r\\n            subscription.sig.nonce, \\r\\n            rvs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyUnsubscribe(UnSubSig calldata unsubscription, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(\\r\\n            _hashUnSubscribe(unsubscription), \\r\\n            unsubscription.sig.signer, \\r\\n            unsubscription.sig.signer, \\r\\n            unsubscription.sig.nonce, \\r\\n            rvs);\\r\\n    }\\r\\n\\r\\n    function verifyDepositSig(DepositSig calldata deposit, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashDeposit(deposit), deposit.sig.signer, deposit.sig.signer, deposit.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function _verify(\\r\\n        bytes32 hash,\\r\\n        address signer,\\r\\n        address noncer,\\r\\n        uint256 nonce,\\r\\n        bytes memory rvs\\r\\n    ) internal returns (bool) {\\r\\n        if (nonce != nonces[noncer]) {\\r\\n            revert InvalidNonce();\\r\\n        }\\r\\n\\r\\n        nonces[noncer]++;\\r\\n\\r\\n        return SignatureChecker.isValidSignatureNow(signer, hash, rvs);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb40d39082d91b5d0a46900e37ff536d7ec9b6a0fa19757d1bbef04c6561b7bc2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPayout.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IPayout {\\r\\n    event UpdateSettings(address indexed user, uint16 userFee, uint16 protocolFee);\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event ChangeSubscriptionRate(address indexed user, uint96 rate);\\r\\n    event Subscribe(address indexed user, address indexed author, bytes32 indexed id);\\r\\n    event Unsubscribe(address indexed user, address indexed author, bytes32 indexed id);\\r\\n    event Liquidate(address indexed user, address indexed liquidator);\\r\\n    event PayBySig(address indexed spender, address indexed receiver, address executor, bytes32 id, uint256 amount);\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n\\r\\n    error WrongPercent();\\r\\n    error NotSubscribed();\\r\\n    error NotLiquidatable();\\r\\n    error NotLegal();\\r\\n    error ExcessOfRate();\\r\\n    error ExcessOfSubscriptions();\\r\\n\\r\\n    function deposit(uint amount) external;\\r\\n\\r\\n    function depositFor(uint amount, address user) external;\\r\\n\\r\\n    function changeSubscriptionRate(uint96 rate) external;\\r\\n\\r\\n    function subscribe(address author, uint maxRate, bytes32 id) external;\\r\\n\\r\\n    function unsubscribe(address author, bytes32 id) external;\\r\\n\\r\\n    function withdraw(uint amount) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function balanceOf(address account) external returns (uint);\\r\\n\\r\\n    function rescueFunds(IERC20 token_, uint256 amount) external;\\r\\n\\r\\n    function updateProtocolWallet(address newWallet_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca5633423090997ecefa1a5885174c28ca631222a10ce157b3f926cc09ccdf48\",\"license\":\"BUSL-1.1\"},\"contracts/library/UserLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"../abstract/PayoutSigVerifier.sol\\\";\\r\\n\\r\\nlibrary UserLib {\\r\\n    error TopUpBalance();\\r\\n    error InsufficialBalance();\\r\\n    error ReduceTheAmount();\\r\\n\\r\\n    uint256 constant SAFE_LIQUIDATION_TIME = 2 days;\\r\\n    uint256 constant LIQUIDATION_TIME = 1 days;\\r\\n\\r\\n    uint16 public constant FLOOR = 10000;\\r\\n\\r\\n    struct User {\\r\\n        int balance;\\r\\n        uint incomeRate; // changes to this field requires _syncBalance() call\\r\\n        uint outgoingRate; // changes to this field requires _syncBalance() call\\r\\n        uint40 updTimestamp;\\r\\n        PayoutSigVerifier.Settings settings;\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        User storage user,\\r\\n        PayoutSigVerifier.Settings calldata settings,\\r\\n        User storage protocol\\r\\n    ) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.settings = settings;\\r\\n    }\\r\\n\\r\\n    function increaseOutgoingRate(User storage user, uint96 diff, int256 threshold, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.outgoingRate += diff;\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function decreaseOutgoingRate(User storage user, uint96 diff, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.outgoingRate -= diff;\\r\\n    }\\r\\n\\r\\n    function increaseIncomeRate(User storage user, uint96 diff, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.incomeRate += diff;\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeRate(User storage user, uint96 diff, int256 threshold, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.incomeRate -= diff;\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function increaseBalance(User storage user, uint256 amount) internal {\\r\\n        user.balance += int(amount);\\r\\n    }\\r\\n\\r\\n    function decreaseBalance(User storage user, User storage protocol, uint256 amount, int256 threshold) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        if (user.balance < int(amount)) revert InsufficialBalance();\\r\\n        user.balance -= int(amount);\\r\\n        if (isSafeLiquidatable(user, threshold)) revert ReduceTheAmount();\\r\\n    }\\r\\n\\r\\n    function drainBalance(User storage user, User storage liquidator) internal {\\r\\n        liquidator.balance += user.balance;\\r\\n        user.balance = 0;\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user) internal view returns (int balance) {\\r\\n        (balance, ) = _fullBalanceOf(user, 0);\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user, uint256 afterDelay) internal view returns (int balance) {\\r\\n        (balance, ) = _fullBalanceOf(user, afterDelay);\\r\\n    }\\r\\n\\r\\n    function isSafeLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, SAFE_LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function isLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function _isLiquidatable(User storage user, int256 threshold, uint256 afterDelay) private view returns (bool) {\\r\\n        (int256 currentRate, ) = _currentRateAndProtocolFee(user);\\r\\n        return currentRate < 0 && balanceOf(user, afterDelay) < threshold;\\r\\n    }\\r\\n\\r\\n    function _currentRateAndProtocolFee(User storage user) private view returns (int, uint256) {\\r\\n        return (\\r\\n            int256((int(user.incomeRate) * int16(user.settings.userFee)) / int16(FLOOR) - int(user.outgoingRate)),\\r\\n            uint((user.incomeRate * user.settings.protocolFee) / FLOOR)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _fullBalanceOf(\\r\\n        User storage user,\\r\\n        uint256 afterDelay\\r\\n    ) private view returns (int balance, uint256 protocolFee) {\\r\\n        if (user.updTimestamp == uint48(block.timestamp) || user.updTimestamp == 0) return (user.balance, 0);\\r\\n        (int256 currentRate, uint256 protocolRate) = _currentRateAndProtocolFee(user);\\r\\n        if (currentRate == 0 && protocolRate == 0) return (user.balance, 0);\\r\\n        uint256 timePassed = block.timestamp - user.updTimestamp + afterDelay;\\r\\n        balance = user.balance + currentRate * int256(timePassed);\\r\\n        protocolFee = protocolRate * timePassed;\\r\\n    }\\r\\n\\r\\n    function _syncBalance(User storage user, User storage protocol) private {\\r\\n        (int256 balance, uint256 protocolFee) = _fullBalanceOf(user, 0);\\r\\n        if (balance != user.balance) user.balance = balance;\\r\\n        if (protocolFee > 0) protocol.balance += int(protocolFee);\\r\\n        user.updTimestamp = uint40(block.timestamp);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x88ea8c4992bbcd6d1587273d22fe6cf21c8777cb8800e44ec787a0e4387317b8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101e034620002f4576001600160401b0390601f6200431638819003918201601f19168301919084831184841017620002de578160e09285926040958652833981010312620002f457620000538262000315565b91620000626020820162000315565b6200006f83830162000315565b6200007d6060840162000315565b906200008c6080850162000315565b9260c06200009d60a0870162000315565b9501519560ff87168703620002f457805192620000ba84620002f9565b601184526020840192702830bcb7baba29b4b3ab32b934b334b2b960791b84528251620000e781620002f9565b6001815260208101603160f81b815262000101876200032a565b956101209687526200011383620004fd565b97610140988952519020918260e0525190209b8c916101009d8e524660a05285519260208401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528785015260608401524660808401523060a084015260a0835260c083019183831090831117620002de57818652825190206080523060c0526001600160a01b039b8c16918215620002c75750508a929183916002549c8d968260018060a01b031980991617600255519d167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a31683600454161760045581610160961686528161018097168752816101a0981688526101c098895216906007541617600755613c6b9788620006ab893960805188613877015260a05188613932015260c05188613848015260e051886138c6015251876138ec01525186610cc201525185610cec015251848181610c1601526122cd015251838181610275015261228d01525182818161069801528181610ef401528181610fdc015281816119e401528181611c490152818161290c01528181612aae0152612baf01525181818161166901526123410152f35b631e4fbdf760e01b8252600060c490910152602490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b03821117620002de57604052565b51906001600160a01b0382168203620002f457565b80516020919082811015620003c9575090601f8251116200036857808251920151908083106200035957501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b828510620003af575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506200038b565b6001600160401b038111620002de576000928354926001938481811c91168015620004f2575b83821014620004de57601f8111620004a8575b5081601f8411600114620004415750928293918392869462000435575b50501b916000199060031b1c191617905560ff90565b0151925038806200041f565b919083601f1981168780528488209488905b888383106200048d575050501062000473575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000466565b85870151885590960195948501948793509081019062000453565b85805284601f848820920160051c820191601f860160051c015b828110620004d257505062000402565b878155018590620004c2565b634e487b7160e01b86526022600452602486fd5b90607f1690620003ef565b8051602090818110156200058b5750601f8251116200052a57808251920151908083106200035957501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000571575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506200054d565b9192916001600160401b038111620002de5760019182548381811c911680156200069f575b828210146200068957601f811162000650575b5080601f831160011462000603575081929394600092620005f7575b5050600019600383901b1c191690821b17905560ff90565b015190503880620005df565b90601f198316958460005282600020926000905b8882106200063857505083859697106200047357505050811b01905560ff90565b80878596829496860151815501950193019062000617565b8360005283601f83600020920160051c820191601f850160051c015b8281106200067c575050620005c3565b600081550184906200066c565b634e487b7160e01b600052602260045260246000fd5b90607f1690620005b056fe60806040908082526004918236101561001757600080fd5b60009260e08435811c93846306d6e63f14611d1e575083630814c28514611c9d5783630d525ac014611ad457836318c3332614611a39578484632e1a7d4d14611964575083632f8655681461175c57836336efd16f1461170057836338aff6ae146116c6578363564b81ef1461168d5783635b7f415c146116315783636ba7c6b2146114b557836370a0823114611437578363715018a6146113995783637690a6e31461119f578363773591591461116557836378e3214f14610f7a5783637ecebe0014610f1857836382bfefc814610ea9578363843ce43014610dfd57836384b0196e14610c8d5783638da5cb5b14610c3a5783639a6c595214610bcb578363a5bc097f14610b90578363a87430ba14610a72578363ad7a672f14610a35578363afcf3bbc1461075c578363b6b55f251461071f578363bbeb1ed7146106e3578363cec08c1e1461063c578363da0d938a1461040957508263e308a09914610387578263f2fde38b1461029d57508163f469f77a1461022a575063fb7e3d74146101a157600080fd5b346102275760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576101d8611d6e565b6101e56024358233612e88565b73ffffffffffffffffffffffffffffffffffffffff6044359116337f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b80fd5b90503461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b909150346103835760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610383576102d7611d6e565b906102e0612104565b73ffffffffffffffffffffffffffffffffffffffff809216928315610354575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b83346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff6103d4611d6e565b6103dc612104565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600754161760075580f35b92509034610634577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c081126106385760a0136106345767ffffffffffffffff9160a435838111610630576104649036908301611f3e565b9161046d61200f565b9360443573ffffffffffffffffffffffffffffffffffffffff956104b489838984169384835260056020526104ae88808520948d6007541681522091612242565b92612485565b33895260056020528389206104ca83825461252b565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519160208301937fad393dfe8522c7ebf48cc87f938e18127980fb505639ec7d21cd0ebe16032682855261052d8285016130bf565b86610536611d96565b1660a0850152608435978860c086015260c0855284019284841090841117610604575052519020610585919061056b90613761565b61057361200f565b61057b61200f565b90602435926130f4565b506105c86105a261059461200f565b61059c612032565b90612c6c565b6105aa61200f565b906bffffffffffffffffffffffff6105c0612032565b911691612cd1565b6105d061200f565b90806105da612032565b1691167f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b8860416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8580fd5b8380fd5b8480fd5b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995780359067ffffffffffffffff8211610383576106916106bc916106d493369101611dda565b80929130337f0000000000000000000000000000000000000000000000000000000000000000612547565b50606081149081156106d7575b506024353333612a23565b80f35b610160915014386106c9565b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029957602090516201d4c08152f35b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576106d4903533336128c5565b8491923461038357610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc018181126106385783136106345767ffffffffffffffff9260e435848111610630576107b89036908801611f3e565b6107c06120e2565b9461ffff9586806107cf6120f3565b16911610156109e1576107e06120e2565b86806107ea6120f3565b16911601868111610a0957866127109116036109e157845160208101917f5d28c6d88e78f0b1c3c683cced71465011628afa85494e4b583128f2bd8325ca83526108358783016130bf565b61083d611d96565b9573ffffffffffffffffffffffffffffffffffffffff80971660a0840152608435956bffffffffffffffffffffffff87168097036109d9578660c085015260a435908a82168092036109dd5784015260c4358981168091036109d9578382015282526101208201908111828210176109ad576108f3927f2bc7c690e379673c356b3cb9b8eb4e6040e2158721e4465aa0fe1f187443f40b98999a94926108e7928952519020613761565b8584541661057b612032565b50826108fd612032565b16875260056020528387208360075416885261091b85892082613052565b01908154906dffff0000000000000000000000006109376120f3565b60601b16907fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffff00000000000000000000000000006109766120e2565b60701b1693161717179055610989612032565b6109916120f3565b9461099a6120e2565b818551971687521660208601521692a280f35b60248960418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8a80fd5b8b80fd5b8785517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b60248860118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020906008549051908152f35b925083346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610ac1611d6e565b16815260056020528281209283549360018101549060028101549464ffffffffff60038301541691845195606087019087821067ffffffffffffffff831117610b64575085520154936bffffffffffffffffffffffff91828616825261ffff9687956020840195878960601c168752878286019960701c16895281519a8b5260208b0152890152606088015251166080860152511660a0840152511660c0820152f35b806041857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051611f408152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b91843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757610ce67f0000000000000000000000000000000000000000000000000000000000000000613513565b90610d107f0000000000000000000000000000000000000000000000000000000000000000613688565b92805193602093602086019686881067ffffffffffffffff891117610dd15750959390610d8783602092878b999652868652610d7a82519a8b9a7f0f000000000000000000000000000000000000000000000000000000000000008c5280878d01528b0190611fb1565b91898303908a0152611fb1565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610dba57505050500390f35b835185528695509381019392810192600101610dab565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509150346103835760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610383578135916bffffffffffffffffffffffff831680930361063457338452600560205281842001827fffffffffffffffffffffffffffffffffffffffff000000000000000000000000825416179055519081527fcbe76e2308c6dbaa4a8d74be4b741727f7fc9ee8ede6445a629918edc83cf41d60203392a280f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299578060209273ffffffffffffffffffffffffffffffffffffffff610f6a611d6e565b1681526003845220549051908152f35b5091503461038357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103835773ffffffffffffffffffffffffffffffffffffffff8235818116918282036106305760243592610fd9612104565b817f00000000000000000000000000000000000000000000000000000000000000001680821490816110c9575b506110a157869392919061108d57505081808092335af16110256120b2565b501561103057505080f35b90602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601c60248201527f5061796f75743a205472616e7366657220636f696e206661696c6564000000006044820152fd5b91935091506106d493506007541690612dee565b8585517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908751928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa801561115b578890611123575b61111b915060085490612076565b841138611006565b506020813d602011611153575b8161113d60209383611e8c565b8101031261114f5761111b905161110d565b8780fd5b3d9150611130565b86513d8a823e3d90fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160648152f35b92505034610383576111b036611f5c565b90926111bb84612055565b90838501359273ffffffffffffffffffffffffffffffffffffffff918284169485895260209460058652878a209085600754168b5282898c20916111fe90612242565b9161120893612485565b338952600585528689208181549061121f9161252b565b905586519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9586863393a38551848101917f45e2530d9b4b4107e164312ecbeec8bc5b2dd6807350344929778fb1a8dde05a8352878201611283908a6132f1565b815261128e81611e53565b51902061129a90613761565b906112a487612055565b6112ad88612055565b85890135916112bb946130f4565b50806112c686612055565b1686526005825280848720948160075416885280882095608088013596876112ed8a612055565b6112f690612242565b9161130093612485565b60608701968261130f89612055565b16895260058552818920878154906113269161252b565b905561133181612055565b61133a89612055565b848085519233845260a08601358a8501528b878501521692169060607f0b909c3b107998af1a2c39db9ce7d90ac92ee73043353dea81a86efd42b7ed4291a361138290612055565b9661138c90612055565b905195865216941692a380f35b843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576113d0612104565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209173ffffffffffffffffffffffffffffffffffffffff611488611d6e565b1681526005835261149a828220613423565b5090808213156114ad5750905b51908152f35b9050906114a7565b92505034610383576115c761151d916115a96114d036611f5c565b9290956114dc87612055565b888389013597889273ffffffffffffffffffffffffffffffffffffffff99816104ae888d809516968781526005602052818120956007541681522091612242565b338a526005602052838a2061153383825461252b565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519061159660208301937fc2eeead625770800ba2549bf3ea57d36d80f4e01dc7994148ee2ba1629b3a68885528301896132f1565b81526115a181611e53565b519020613761565b6115b285612055565b6115bb86612055565b906020870135926130f4565b506115d182612055565b906115ee60608401926115e384612055565b608086013591612e88565b8060a06116036115fd86612055565b94612055565b940135931691167f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051468152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160128152f35b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760243573ffffffffffffffffffffffffffffffffffffffff81168103610383576106d4913590336128c5565b508382346102995760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038357611799611d6e565b9073ffffffffffffffffffffffffffffffffffffffff94858316938486526005602052828620936117c981612242565b876117d3876137e8565b50129081611951575b50156119295785875260066020528387209788548060028b01915b611842578989818a8a338352600560205282206118168254825461252b565b90555533907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb48380a380f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181116118fd578a846bffffffffffffffffffffffff8a8f6118a39561188a91613994565b90549060031b1c93848152878b52205416911686612cd1565b80156118d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01806117f7565b60248a6011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248b6011897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8284517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b905061195c8661338d565b5012896117dc565b93505034611a355760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611a3557359033835260056020526119ce81842073ffffffffffffffffffffffffffffffffffffffff600754168552838386206104ae33612242565b6119da82600854612076565b600855611a0882337f0000000000000000000000000000000000000000000000000000000000000000612dee565b519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a380f35b5050fd5b848334610299577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757611a70611d6e565b611a926bffffffffffffffffffffffff611a8a8333612c6c565b168233612cd1565b73ffffffffffffffffffffffffffffffffffffffff6024359116337f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c08112610634576080136103835767ffffffffffffffff9060843582811161063857611b2f9036908501611dda565b93909260a435908111610630576106d494611c3c611b56611c6d94611bed94369101611dda565b9687949193611b6361200f565b8b611ba38a60443580946104ae73ffffffffffffffffffffffffffffffffffffffff93848316968781526005602052818120956007541681522091612242565b338d526005602052898d20611bb983825461252b565b905589519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a33691611f07565b61056b865196611c2560208901917fe8d1c597a62d6e2ab3b9ea9b09215a043159e6e592d246bd34e13b334ab14ecd835289016130bf565b606435978860a082015260a081526115a181611e08565b50611c4561200f565b30907f0000000000000000000000000000000000000000000000000000000000000000612547565b50611c7661200f565b611c7e61200f565b9060608414938415611c91575b50612a23565b61016014935038611c8b565b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995773ffffffffffffffffffffffffffffffffffffffff611ceb611d6e565b611cf3612104565b167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b85903461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600754168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b600080fd5b6064359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b9181601f84011215611d915782359167ffffffffffffffff8311611d915760208381860195010111611d9157565b60c0810190811067ffffffffffffffff821117611e2457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117611e2457604052565b6040810190811067ffffffffffffffff821117611e2457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611e2457604052565b67ffffffffffffffff8111611e2457601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611f1382611ecd565b91611f216040519384611e8c565b829481845281830111611d91578281602093846000960137010152565b9080601f83011215611d9157816020611f5993359101611f07565b90565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112611d915760c013611d915760049160c4359067ffffffffffffffff8211611d9157611f5991600401611f3e565b919082519283825260005b848110611ffb5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201611fbc565b60043573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b60643573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b3573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b9190820391821161208357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3d156120dd573d906120c382611ecd565b916120d16040519384611e8c565b82523d6000602084013e565b606090565b60c43561ffff81168103611d915790565b60a43561ffff81168103611d915790565b73ffffffffffffffffffffffffffffffffffffffff60025416330361212557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b519069ffffffffffffffffffff82168203611d9157565b908160a0910312611d915761218081612155565b91602082015191604081015191611f59608060608401519301612155565b8181029291811591840414171561208357565b9190820180921161208357565b8115612213577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f8000000000000000000000000000000000000000000000000000000000000000821416612083570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6040517ffeaf968c000000000000000000000000000000000000000000000000000000008082526004939260a09173ffffffffffffffffffffffffffffffffffffffff9190838588817f000000000000000000000000000000000000000000000000000000000000000087165afa94851561243c57600095612448575b5060405190815283818881867f0000000000000000000000000000000000000000000000000000000000000000165afa93841561243c57600094612408575b5050166000526006602052604060002054611f4090808202918204036123da576201d4c09081018091116123da579061233a61233f924861219e565b61219e565b7f000000000000000000000000000000000000000000000000000000000000000060ff16919060128310156123cc5790612378916121be565b9060120360ff811161239e5760ff16604d811161239e57611f59929350600a0a906121be565b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b909150611f599293506121be565b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b612428929450803d10612435575b6124208183611e8c565b81019061216c565b50505090509138806122fe565b503d612416565b6040513d6000823e3d90fd5b612460919550843d8611612435576124208183611e8c565b505050905093386122bf565b8181039291600013801582851316918412161761208357565b9291906124929084613052565b825490808212612501576124a59161246c565b825560006124b2836137e8565b501291826124ed575b50506124c357565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b6124f891925061349d565b501238806124bb565b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b9190916000838201938412911290801582169115161761208357565b6040519492916064841461280d5783604814612749578360e01461270b5783610100146126cb57836060146125f357505050610160146125a9576004827f68275857000000000000000000000000000000000000000000000000000000008152fd5b61016482610160600094937f2b67b570000000000000000000000000000000000000000000000000000000008695526004830137826e22d473030f116ddee9f6b43ac78ba35af190565b6101649350600095929486956020936040937f2b67b5700000000000000000000000000000000000000000000000000000000087526004870152602486015260148260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff9181601485013560e01c0183166064880152601884013560e01c608488015260a4870152601c83013560e01c011660c485015261010060e4850152816101048501528280820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af190565b5061010492508491506000949061010086957f8fcbaf0c0000000000000000000000000000000000000000000000000000000087945260048501375af190565b5060e492508491506000949060e086957fd505accf0000000000000000000000000000000000000000000000000000000087945260048501375af190565b6101049350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000969395879687947f8fcbaf0c0000000000000000000000000000000000000000000000000000000087526004870152602486015260206008602883013592803560e01c60448901527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600482013560e01c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af190565b60e49350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000969395879687947fd505accf0000000000000000000000000000000000000000000000000000000087526004870152602486015260206024604483013592828160448a01377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8382013560e01c0160648901528360ff1c601b0160848901520160a48701371660c48401525af190565b919073ffffffffffffffffffffffffffffffffffffffff8091169260008481526005602052604081206128f985825461252b565b9055612907846008546121b1565b6008557f000000000000000000000000000000000000000000000000000000000000000060208260646040517f23b872dd00000000000000000000000000000000000000000000000000000000815286600482015230602482015288604482015282855af191826129fe575b5050156129d4577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091857fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051888152a26040519485521692a3565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b9091503d15612a1a57600191505114601f3d11165b3880612973565b503b1515612a13565b73ffffffffffffffffffffffffffffffffffffffff8092169360008581526005602052604091828220612a5787825461252b565b9055612a65866008546121b1565b60085515612bad57838511612b84578151907f36c785160000000000000000000000000000000000000000000000000000000082528360048301523060248301528560448301527f000000000000000000000000000000000000000000000000000000000000000060648301528060846e22d473030f116ddee9f6b43ac78ba39382855af19081612b79575b5015612b5057916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef935b867fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c858351898152a2519485521692a3565b600490517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b151538612af1565b600482517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b7f0000000000000000000000000000000000000000000000000000000000000000602082606485517f23b872dd00000000000000000000000000000000000000000000000000000000815287600482015230602482015289604482015282855af19182612c47575b505015612b5057916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93612b1e565b9091503d15612c6357600191505114601f3d11165b3880612c15565b503b1515612c5c565b90612c9e9173ffffffffffffffffffffffffffffffffffffffff809116600052600660205260406000209116906137a2565b9015612ca75790565b60046040517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b9291909273ffffffffffffffffffffffffffffffffffffffff80911693600090858252600560205260409260026bffffffffffffffffffffffff8585209683600754168652612d2287872089613052565b169501612d30868254612076565b9055808216948584526005602052612d4a85852093612242565b916007541684526005602052612d6285852084613052565b612d7160018401918254612076565b905582612d7d836137e8565b50129182612dda575b5050612db157612dae9394815260066020528181209183825260028301602052812055613a78565b50565b600482517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612de591925061349d565b50123880612d86565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081612e65575b5015612e3b57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15612e805750600160005114601f3d11165b38612e33565b3b1515612e7a565b92919273ffffffffffffffffffffffffffffffffffffffff938482169160008381526020936006855260409283832096612ec58a821680996137a2565b9190613032575b5050818352600686526064848420541461300957868352600586526bffffffffffffffffffffffff6004858520015416948511612fe05781835260058652612f1684842091612242565b8960075416845260058752612f2d85852083613052565b60028201612f3c8782546121b1565b905583612f48836137e8565b50129182612fcc575b5050612fa3576001612dae97988784526005875284842090600754168452612f7b85852082613052565b01612f878582546121b1565b9055815260068452818120938582526002850190522055613bd9565b600483517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612fd791925061349d565b50123880612f51565b600484517fd83a01fa000000000000000000000000000000000000000000000000000000008152fd5b600484517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b6bffffffffffffffffffffffff61304b92169083612cd1565b3880612ecc565b60039161305e82613423565b90835481036130b7575b50806130a3575b50500164ffffffffff42167fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000825416179055565b6130ae90825461252b565b9055388061306f565b835538613068565b60043573ffffffffffffffffffffffffffffffffffffffff8116809103611d9157815260243560208201526040604435910152565b9193929073ffffffffffffffffffffffffffffffffffffffff80951693600094808652602093600385526040872054036132c7578552600383526040852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461329a57600101905561316a8185613958565b50600481101561326d5715968761325e575b5050851561318d575b505050505090565b84955090849293949160405161320b816131df888201947f1626ba7e000000000000000000000000000000000000000000000000000000009a8b87526024840152604060448401526064830190611fb1565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611e8c565b51915afa926132186120b2565b9084613251575b84613233575b505050503880808080613185565b90918093945082805181010312610227575001511438808080613225565b935081815110159361321f565b8381169116149550388061317c565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b60a0809173ffffffffffffffffffffffffffffffffffffffff8061331483611db9565b168552602082013560208601526040820135604086015261333760608301611db9565b166060850152608081013560808501520135910152565b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661208357818405149015171561208357565b9064ffffffffff60038301541665ffffffffffff42168114801561341b575b613412576133b9836137e8565b93909182158061340a575b6133ff576133d29042612076565b9062015180820180921161208357611f59926133f3836133f993549261334e565b9061252b565b9361219e565b505492506000919050565b5084156133c4565b50905490600090565b5080156133ac565b9064ffffffffff6003830154169165ffffffffffff421683148015613495575b61348d57613450816137e8565b93811580613485575b61347b57611f5992916133f36134726133f99342612076565b8094549261334e565b5050549150600090565b508415613459565b549150600090565b508215613443565b9064ffffffffff60038301541665ffffffffffff42168114801561350b575b613412576134c9836137e8565b939091821580613503575b6133ff576134e29042612076565b906202a300820180921161208357611f59926133f3836133f993549261334e565b5084156134d4565b5080156134bc565b60ff81146135695760ff811690601f821161353f576040519161353583611e70565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600080549060018260011c906001841693841561367e575b6020948584108114613651578387528694939291811561361257506001146135b6575b5050611f5992500382611e8c565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106135fa575050611f59935082010138806135a8565b855487840185015294850194869450918301916135e2565b9050611f599593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806135a8565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f1691613585565b60ff81146136aa5760ff811690601f821161353f576040519161353583611e70565b506040516000600190600154918260011c9060018416938415613757575b6020948584108114613651578387528694939291811561361257506001146136f8575050611f5992500382611e8c565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b81831061373f575050611f59935082010138806135a8565b85548784018501529485019486945091830191613727565b91607f16916136c8565b60429061376c613831565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b919080600052600283016020526040600020549283156000146137e0576137da92935060019160005201602052604060002054151590565b90600090565b505060019190565b9060018201549161382d6004820154936127109261382261ffff91600286613818858b60601c1660010b8761334e565b059101549061246c565b9560701c169061219e565b0490565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630148061392f575b15613899577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261392981611e08565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614613870565b81519190604183036139895761398292506020820151906060604084015193015160001a906139db565b9192909190565b505060009160029190565b80548210156139ac5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613a6c57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613a6057805173ffffffffffffffffffffffffffffffffffffffff811615613a5757918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90600182019060009281845282602052604084205490811515600014613bd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182810181811161329a57825490848201918211613ba557818103613b3b575b50505080548015613b0e57820191613af18383613994565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b613b90613b4b613b5b9386613994565b90549060031b1c92839286613994565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080613ad9565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b6000828152600182016020526040902054613c2e5780549068010000000000000000821015611e245782613c17613b5b846001809601855584613994565b905580549260005201602052604060002055600190565b505060009056fea264697066735822122062eb49d83ee27ea0ad3484549cab0aeed7e5637cf443a9f67f562e3d5a74ee0f64736f6c63430008180033",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b60009260e08435811c93846306d6e63f14611d1e575083630814c28514611c9d5783630d525ac014611ad457836318c3332614611a39578484632e1a7d4d14611964575083632f8655681461175c57836336efd16f1461170057836338aff6ae146116c6578363564b81ef1461168d5783635b7f415c146116315783636ba7c6b2146114b557836370a0823114611437578363715018a6146113995783637690a6e31461119f578363773591591461116557836378e3214f14610f7a5783637ecebe0014610f1857836382bfefc814610ea9578363843ce43014610dfd57836384b0196e14610c8d5783638da5cb5b14610c3a5783639a6c595214610bcb578363a5bc097f14610b90578363a87430ba14610a72578363ad7a672f14610a35578363afcf3bbc1461075c578363b6b55f251461071f578363bbeb1ed7146106e3578363cec08c1e1461063c578363da0d938a1461040957508263e308a09914610387578263f2fde38b1461029d57508163f469f77a1461022a575063fb7e3d74146101a157600080fd5b346102275760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576101d8611d6e565b6101e56024358233612e88565b73ffffffffffffffffffffffffffffffffffffffff6044359116337f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b80fd5b90503461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b909150346103835760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610383576102d7611d6e565b906102e0612104565b73ffffffffffffffffffffffffffffffffffffffff809216928315610354575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b83346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff6103d4611d6e565b6103dc612104565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600754161760075580f35b92509034610634577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c081126106385760a0136106345767ffffffffffffffff9160a435838111610630576104649036908301611f3e565b9161046d61200f565b9360443573ffffffffffffffffffffffffffffffffffffffff956104b489838984169384835260056020526104ae88808520948d6007541681522091612242565b92612485565b33895260056020528389206104ca83825461252b565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519160208301937fad393dfe8522c7ebf48cc87f938e18127980fb505639ec7d21cd0ebe16032682855261052d8285016130bf565b86610536611d96565b1660a0850152608435978860c086015260c0855284019284841090841117610604575052519020610585919061056b90613761565b61057361200f565b61057b61200f565b90602435926130f4565b506105c86105a261059461200f565b61059c612032565b90612c6c565b6105aa61200f565b906bffffffffffffffffffffffff6105c0612032565b911691612cd1565b6105d061200f565b90806105da612032565b1691167f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b8860416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8580fd5b8380fd5b8480fd5b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995780359067ffffffffffffffff8211610383576106916106bc916106d493369101611dda565b80929130337f0000000000000000000000000000000000000000000000000000000000000000612547565b50606081149081156106d7575b506024353333612a23565b80f35b610160915014386106c9565b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029957602090516201d4c08152f35b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576106d4903533336128c5565b8491923461038357610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc018181126106385783136106345767ffffffffffffffff9260e435848111610630576107b89036908801611f3e565b6107c06120e2565b9461ffff9586806107cf6120f3565b16911610156109e1576107e06120e2565b86806107ea6120f3565b16911601868111610a0957866127109116036109e157845160208101917f5d28c6d88e78f0b1c3c683cced71465011628afa85494e4b583128f2bd8325ca83526108358783016130bf565b61083d611d96565b9573ffffffffffffffffffffffffffffffffffffffff80971660a0840152608435956bffffffffffffffffffffffff87168097036109d9578660c085015260a435908a82168092036109dd5784015260c4358981168091036109d9578382015282526101208201908111828210176109ad576108f3927f2bc7c690e379673c356b3cb9b8eb4e6040e2158721e4465aa0fe1f187443f40b98999a94926108e7928952519020613761565b8584541661057b612032565b50826108fd612032565b16875260056020528387208360075416885261091b85892082613052565b01908154906dffff0000000000000000000000006109376120f3565b60601b16907fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffff00000000000000000000000000006109766120e2565b60701b1693161717179055610989612032565b6109916120f3565b9461099a6120e2565b818551971687521660208601521692a280f35b60248960418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8a80fd5b8b80fd5b8785517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b60248860118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020906008549051908152f35b925083346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610ac1611d6e565b16815260056020528281209283549360018101549060028101549464ffffffffff60038301541691845195606087019087821067ffffffffffffffff831117610b64575085520154936bffffffffffffffffffffffff91828616825261ffff9687956020840195878960601c168752878286019960701c16895281519a8b5260208b0152890152606088015251166080860152511660a0840152511660c0820152f35b806041857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051611f408152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b91843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757610ce67f0000000000000000000000000000000000000000000000000000000000000000613513565b90610d107f0000000000000000000000000000000000000000000000000000000000000000613688565b92805193602093602086019686881067ffffffffffffffff891117610dd15750959390610d8783602092878b999652868652610d7a82519a8b9a7f0f000000000000000000000000000000000000000000000000000000000000008c5280878d01528b0190611fb1565b91898303908a0152611fb1565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610dba57505050500390f35b835185528695509381019392810192600101610dab565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509150346103835760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610383578135916bffffffffffffffffffffffff831680930361063457338452600560205281842001827fffffffffffffffffffffffffffffffffffffffff000000000000000000000000825416179055519081527fcbe76e2308c6dbaa4a8d74be4b741727f7fc9ee8ede6445a629918edc83cf41d60203392a280f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299578060209273ffffffffffffffffffffffffffffffffffffffff610f6a611d6e565b1681526003845220549051908152f35b5091503461038357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103835773ffffffffffffffffffffffffffffffffffffffff8235818116918282036106305760243592610fd9612104565b817f00000000000000000000000000000000000000000000000000000000000000001680821490816110c9575b506110a157869392919061108d57505081808092335af16110256120b2565b501561103057505080f35b90602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601c60248201527f5061796f75743a205472616e7366657220636f696e206661696c6564000000006044820152fd5b91935091506106d493506007541690612dee565b8585517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908751928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa801561115b578890611123575b61111b915060085490612076565b841138611006565b506020813d602011611153575b8161113d60209383611e8c565b8101031261114f5761111b905161110d565b8780fd5b3d9150611130565b86513d8a823e3d90fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160648152f35b92505034610383576111b036611f5c565b90926111bb84612055565b90838501359273ffffffffffffffffffffffffffffffffffffffff918284169485895260209460058652878a209085600754168b5282898c20916111fe90612242565b9161120893612485565b338952600585528689208181549061121f9161252b565b905586519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9586863393a38551848101917f45e2530d9b4b4107e164312ecbeec8bc5b2dd6807350344929778fb1a8dde05a8352878201611283908a6132f1565b815261128e81611e53565b51902061129a90613761565b906112a487612055565b6112ad88612055565b85890135916112bb946130f4565b50806112c686612055565b1686526005825280848720948160075416885280882095608088013596876112ed8a612055565b6112f690612242565b9161130093612485565b60608701968261130f89612055565b16895260058552818920878154906113269161252b565b905561133181612055565b61133a89612055565b848085519233845260a08601358a8501528b878501521692169060607f0b909c3b107998af1a2c39db9ce7d90ac92ee73043353dea81a86efd42b7ed4291a361138290612055565b9661138c90612055565b905195865216941692a380f35b843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576113d0612104565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209173ffffffffffffffffffffffffffffffffffffffff611488611d6e565b1681526005835261149a828220613423565b5090808213156114ad5750905b51908152f35b9050906114a7565b92505034610383576115c761151d916115a96114d036611f5c565b9290956114dc87612055565b888389013597889273ffffffffffffffffffffffffffffffffffffffff99816104ae888d809516968781526005602052818120956007541681522091612242565b338a526005602052838a2061153383825461252b565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519061159660208301937fc2eeead625770800ba2549bf3ea57d36d80f4e01dc7994148ee2ba1629b3a68885528301896132f1565b81526115a181611e53565b519020613761565b6115b285612055565b6115bb86612055565b906020870135926130f4565b506115d182612055565b906115ee60608401926115e384612055565b608086013591612e88565b8060a06116036115fd86612055565b94612055565b940135931691167f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051468152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160128152f35b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760243573ffffffffffffffffffffffffffffffffffffffff81168103610383576106d4913590336128c5565b508382346102995760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038357611799611d6e565b9073ffffffffffffffffffffffffffffffffffffffff94858316938486526005602052828620936117c981612242565b876117d3876137e8565b50129081611951575b50156119295785875260066020528387209788548060028b01915b611842578989818a8a338352600560205282206118168254825461252b565b90555533907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb48380a380f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181116118fd578a846bffffffffffffffffffffffff8a8f6118a39561188a91613994565b90549060031b1c93848152878b52205416911686612cd1565b80156118d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01806117f7565b60248a6011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248b6011897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8284517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b905061195c8661338d565b5012896117dc565b93505034611a355760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611a3557359033835260056020526119ce81842073ffffffffffffffffffffffffffffffffffffffff600754168552838386206104ae33612242565b6119da82600854612076565b600855611a0882337f0000000000000000000000000000000000000000000000000000000000000000612dee565b519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a380f35b5050fd5b848334610299577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757611a70611d6e565b611a926bffffffffffffffffffffffff611a8a8333612c6c565b168233612cd1565b73ffffffffffffffffffffffffffffffffffffffff6024359116337f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b50915034610383577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c08112610634576080136103835767ffffffffffffffff9060843582811161063857611b2f9036908501611dda565b93909260a435908111610630576106d494611c3c611b56611c6d94611bed94369101611dda565b9687949193611b6361200f565b8b611ba38a60443580946104ae73ffffffffffffffffffffffffffffffffffffffff93848316968781526005602052818120956007541681522091612242565b338d526005602052898d20611bb983825461252b565b905589519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a33691611f07565b61056b865196611c2560208901917fe8d1c597a62d6e2ab3b9ea9b09215a043159e6e592d246bd34e13b334ab14ecd835289016130bf565b606435978860a082015260a081526115a181611e08565b50611c4561200f565b30907f0000000000000000000000000000000000000000000000000000000000000000612547565b50611c7661200f565b611c7e61200f565b9060608414938415611c91575b50612a23565b61016014935038611c8b565b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995773ffffffffffffffffffffffffffffffffffffffff611ceb611d6e565b611cf3612104565b167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b85903461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600754168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b600080fd5b6064359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b359073ffffffffffffffffffffffffffffffffffffffff82168203611d9157565b9181601f84011215611d915782359167ffffffffffffffff8311611d915760208381860195010111611d9157565b60c0810190811067ffffffffffffffff821117611e2457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117611e2457604052565b6040810190811067ffffffffffffffff821117611e2457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611e2457604052565b67ffffffffffffffff8111611e2457601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611f1382611ecd565b91611f216040519384611e8c565b829481845281830111611d91578281602093846000960137010152565b9080601f83011215611d9157816020611f5993359101611f07565b90565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112611d915760c013611d915760049160c4359067ffffffffffffffff8211611d9157611f5991600401611f3e565b919082519283825260005b848110611ffb5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201611fbc565b60043573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b60643573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b3573ffffffffffffffffffffffffffffffffffffffff81168103611d915790565b9190820391821161208357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3d156120dd573d906120c382611ecd565b916120d16040519384611e8c565b82523d6000602084013e565b606090565b60c43561ffff81168103611d915790565b60a43561ffff81168103611d915790565b73ffffffffffffffffffffffffffffffffffffffff60025416330361212557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b519069ffffffffffffffffffff82168203611d9157565b908160a0910312611d915761218081612155565b91602082015191604081015191611f59608060608401519301612155565b8181029291811591840414171561208357565b9190820180921161208357565b8115612213577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f8000000000000000000000000000000000000000000000000000000000000000821416612083570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6040517ffeaf968c000000000000000000000000000000000000000000000000000000008082526004939260a09173ffffffffffffffffffffffffffffffffffffffff9190838588817f000000000000000000000000000000000000000000000000000000000000000087165afa94851561243c57600095612448575b5060405190815283818881867f0000000000000000000000000000000000000000000000000000000000000000165afa93841561243c57600094612408575b5050166000526006602052604060002054611f4090808202918204036123da576201d4c09081018091116123da579061233a61233f924861219e565b61219e565b7f000000000000000000000000000000000000000000000000000000000000000060ff16919060128310156123cc5790612378916121be565b9060120360ff811161239e5760ff16604d811161239e57611f59929350600a0a906121be565b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b909150611f599293506121be565b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b612428929450803d10612435575b6124208183611e8c565b81019061216c565b50505090509138806122fe565b503d612416565b6040513d6000823e3d90fd5b612460919550843d8611612435576124208183611e8c565b505050905093386122bf565b8181039291600013801582851316918412161761208357565b9291906124929084613052565b825490808212612501576124a59161246c565b825560006124b2836137e8565b501291826124ed575b50506124c357565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b6124f891925061349d565b501238806124bb565b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b9190916000838201938412911290801582169115161761208357565b6040519492916064841461280d5783604814612749578360e01461270b5783610100146126cb57836060146125f357505050610160146125a9576004827f68275857000000000000000000000000000000000000000000000000000000008152fd5b61016482610160600094937f2b67b570000000000000000000000000000000000000000000000000000000008695526004830137826e22d473030f116ddee9f6b43ac78ba35af190565b6101649350600095929486956020936040937f2b67b5700000000000000000000000000000000000000000000000000000000087526004870152602486015260148260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff9181601485013560e01c0183166064880152601884013560e01c608488015260a4870152601c83013560e01c011660c485015261010060e4850152816101048501528280820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af190565b5061010492508491506000949061010086957f8fcbaf0c0000000000000000000000000000000000000000000000000000000087945260048501375af190565b5060e492508491506000949060e086957fd505accf0000000000000000000000000000000000000000000000000000000087945260048501375af190565b6101049350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000969395879687947f8fcbaf0c0000000000000000000000000000000000000000000000000000000087526004870152602486015260206008602883013592803560e01c60448901527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600482013560e01c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af190565b60e49350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000969395879687947fd505accf0000000000000000000000000000000000000000000000000000000087526004870152602486015260206024604483013592828160448a01377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8382013560e01c0160648901528360ff1c601b0160848901520160a48701371660c48401525af190565b919073ffffffffffffffffffffffffffffffffffffffff8091169260008481526005602052604081206128f985825461252b565b9055612907846008546121b1565b6008557f000000000000000000000000000000000000000000000000000000000000000060208260646040517f23b872dd00000000000000000000000000000000000000000000000000000000815286600482015230602482015288604482015282855af191826129fe575b5050156129d4577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091857fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051888152a26040519485521692a3565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b9091503d15612a1a57600191505114601f3d11165b3880612973565b503b1515612a13565b73ffffffffffffffffffffffffffffffffffffffff8092169360008581526005602052604091828220612a5787825461252b565b9055612a65866008546121b1565b60085515612bad57838511612b84578151907f36c785160000000000000000000000000000000000000000000000000000000082528360048301523060248301528560448301527f000000000000000000000000000000000000000000000000000000000000000060648301528060846e22d473030f116ddee9f6b43ac78ba39382855af19081612b79575b5015612b5057916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef935b867fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c858351898152a2519485521692a3565b600490517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b151538612af1565b600482517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b7f0000000000000000000000000000000000000000000000000000000000000000602082606485517f23b872dd00000000000000000000000000000000000000000000000000000000815287600482015230602482015289604482015282855af19182612c47575b505015612b5057916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93612b1e565b9091503d15612c6357600191505114601f3d11165b3880612c15565b503b1515612c5c565b90612c9e9173ffffffffffffffffffffffffffffffffffffffff809116600052600660205260406000209116906137a2565b9015612ca75790565b60046040517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b9291909273ffffffffffffffffffffffffffffffffffffffff80911693600090858252600560205260409260026bffffffffffffffffffffffff8585209683600754168652612d2287872089613052565b169501612d30868254612076565b9055808216948584526005602052612d4a85852093612242565b916007541684526005602052612d6285852084613052565b612d7160018401918254612076565b905582612d7d836137e8565b50129182612dda575b5050612db157612dae9394815260066020528181209183825260028301602052812055613a78565b50565b600482517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612de591925061349d565b50123880612d86565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081612e65575b5015612e3b57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15612e805750600160005114601f3d11165b38612e33565b3b1515612e7a565b92919273ffffffffffffffffffffffffffffffffffffffff938482169160008381526020936006855260409283832096612ec58a821680996137a2565b9190613032575b5050818352600686526064848420541461300957868352600586526bffffffffffffffffffffffff6004858520015416948511612fe05781835260058652612f1684842091612242565b8960075416845260058752612f2d85852083613052565b60028201612f3c8782546121b1565b905583612f48836137e8565b50129182612fcc575b5050612fa3576001612dae97988784526005875284842090600754168452612f7b85852082613052565b01612f878582546121b1565b9055815260068452818120938582526002850190522055613bd9565b600483517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612fd791925061349d565b50123880612f51565b600484517fd83a01fa000000000000000000000000000000000000000000000000000000008152fd5b600484517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b6bffffffffffffffffffffffff61304b92169083612cd1565b3880612ecc565b60039161305e82613423565b90835481036130b7575b50806130a3575b50500164ffffffffff42167fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000825416179055565b6130ae90825461252b565b9055388061306f565b835538613068565b60043573ffffffffffffffffffffffffffffffffffffffff8116809103611d9157815260243560208201526040604435910152565b9193929073ffffffffffffffffffffffffffffffffffffffff80951693600094808652602093600385526040872054036132c7578552600383526040852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461329a57600101905561316a8185613958565b50600481101561326d5715968761325e575b5050851561318d575b505050505090565b84955090849293949160405161320b816131df888201947f1626ba7e000000000000000000000000000000000000000000000000000000009a8b87526024840152604060448401526064830190611fb1565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611e8c565b51915afa926132186120b2565b9084613251575b84613233575b505050503880808080613185565b90918093945082805181010312610227575001511438808080613225565b935081815110159361321f565b8381169116149550388061317c565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b60a0809173ffffffffffffffffffffffffffffffffffffffff8061331483611db9565b168552602082013560208601526040820135604086015261333760608301611db9565b166060850152608081013560808501520135910152565b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661208357818405149015171561208357565b9064ffffffffff60038301541665ffffffffffff42168114801561341b575b613412576133b9836137e8565b93909182158061340a575b6133ff576133d29042612076565b9062015180820180921161208357611f59926133f3836133f993549261334e565b9061252b565b9361219e565b505492506000919050565b5084156133c4565b50905490600090565b5080156133ac565b9064ffffffffff6003830154169165ffffffffffff421683148015613495575b61348d57613450816137e8565b93811580613485575b61347b57611f5992916133f36134726133f99342612076565b8094549261334e565b5050549150600090565b508415613459565b549150600090565b508215613443565b9064ffffffffff60038301541665ffffffffffff42168114801561350b575b613412576134c9836137e8565b939091821580613503575b6133ff576134e29042612076565b906202a300820180921161208357611f59926133f3836133f993549261334e565b5084156134d4565b5080156134bc565b60ff81146135695760ff811690601f821161353f576040519161353583611e70565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600080549060018260011c906001841693841561367e575b6020948584108114613651578387528694939291811561361257506001146135b6575b5050611f5992500382611e8c565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106135fa575050611f59935082010138806135a8565b855487840185015294850194869450918301916135e2565b9050611f599593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806135a8565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f1691613585565b60ff81146136aa5760ff811690601f821161353f576040519161353583611e70565b506040516000600190600154918260011c9060018416938415613757575b6020948584108114613651578387528694939291811561361257506001146136f8575050611f5992500382611e8c565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b81831061373f575050611f59935082010138806135a8565b85548784018501529485019486945091830191613727565b91607f16916136c8565b60429061376c613831565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b919080600052600283016020526040600020549283156000146137e0576137da92935060019160005201602052604060002054151590565b90600090565b505060019190565b9060018201549161382d6004820154936127109261382261ffff91600286613818858b60601c1660010b8761334e565b059101549061246c565b9560701c169061219e565b0490565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630148061392f575b15613899577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261392981611e08565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614613870565b81519190604183036139895761398292506020820151906060604084015193015160001a906139db565b9192909190565b505060009160029190565b80548210156139ac5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613a6c57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613a6057805173ffffffffffffffffffffffffffffffffffffffff811615613a5757918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90600182019060009281845282602052604084205490811515600014613bd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182810181811161329a57825490848201918211613ba557818103613b3b575b50505080548015613b0e57820191613af18383613994565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b613b90613b4b613b5b9386613994565b90549060031b1c92839286613994565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080613ad9565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b6000828152600182016020526040902054613c2e5780549068010000000000000000821015611e245782613c17613b5b846001809601855584613994565b905580549260005201602052604060002055600190565b505060009056fea264697066735822122062eb49d83ee27ea0ad3484549cab0aeed7e5637cf443a9f67f562e3d5a74ee0f64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3024,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3026,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 835,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7473,
        "contract": "contracts/Payout.sol:Payout",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7475,
        "contract": "contracts/Payout.sol:Payout",
        "label": "protocolSigner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6332,
        "contract": "contracts/Payout.sol:Payout",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)7969_storage)"
      },
      {
        "astId": 6337,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(AddressToUintMap)5228_storage)"
      },
      {
        "astId": 6339,
        "contract": "contracts/Payout.sol:Payout",
        "label": "protocolWallet",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6341,
        "contract": "contracts/Payout.sol:Payout",
        "label": "totalBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressToUintMap)5228_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.AddressToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressToUintMap)5228_storage"
      },
      "t_mapping(t_address,t_struct(User)7969_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserLib.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)7969_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)5228_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 5227,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)4570_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)5868_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 5867,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5674_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)4570_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 4565,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)5868_storage"
          },
          {
            "astId": 4569,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5674_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5669,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5673,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)7454_storage": {
        "encoding": "inplace",
        "label": "struct PayoutSigVerifier.Settings",
        "members": [
          {
            "astId": 7449,
            "contract": "contracts/Payout.sol:Payout",
            "label": "subscriptionRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 7451,
            "contract": "contracts/Payout.sol:Payout",
            "label": "userFee",
            "offset": 12,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7453,
            "contract": "contracts/Payout.sol:Payout",
            "label": "protocolFee",
            "offset": 14,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)7969_storage": {
        "encoding": "inplace",
        "label": "struct UserLib.User",
        "members": [
          {
            "astId": 7959,
            "contract": "contracts/Payout.sol:Payout",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 7961,
            "contract": "contracts/Payout.sol:Payout",
            "label": "incomeRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7963,
            "contract": "contracts/Payout.sol:Payout",
            "label": "outgoingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7965,
            "contract": "contracts/Payout.sol:Payout",
            "label": "updTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 7968,
            "contract": "contracts/Payout.sol:Payout",
            "label": "settings",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Settings)7454_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}