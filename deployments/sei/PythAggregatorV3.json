{
  "address": "0xD3B79811fFb55708A4fe848D0b131030a347887C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyth",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "priceUpdateData",
          "type": "bytes[]"
        }
      ],
      "name": "updateFeeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1f000a0445c3bff218ac25127db56415f4e8d77a445b3d7c9d709c34ac0fea0",
  "receipt": {
    "to": null,
    "from": "0xe39662803ae00fDCcb866E0B3984c90D9d836586",
    "contractAddress": "0xD3B79811fFb55708A4fe848D0b131030a347887C",
    "transactionIndex": 0,
    "gasUsed": "772220",
    "logsBloom": "0x
    "blockHash": "0x62baf917a1e68c80a76a0a053746afe0f29dda24dc2c6138be9c8f565536120e",
    "transactionHash": "0xf1f000a0445c3bff218ac25127db56415f4e8d77a445b3d7c9d709c34ac0fea0",
    "logs": [],
    "blockNumber": 91482500,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2880aB155794e7179c9eE2e38200202908C17B43",
    "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"
  ],
  "numDeployments": 3,
  "solcInputHash": "e87040be10039b72a57d7c8e61bcce5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"updateFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"A port of the ChainlinkAggregatorV3 interface that supports Pyth price feeds\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This does not store any roundId information on-chain. Please review the code before using this implementation. Users should deploy an instance of this contract to wrap every price feed id that they need to use.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol\":\"PythAggregatorV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nimport {PythStructs} from \\\"./PythStructs.sol\\\";\\nimport {IPyth} from \\\"./IPyth.sol\\\";\\n\\n// This interface is forked from the Zerolend Adapter found here:\\n// https://github.com/zerolend/pyth-oracles/blob/master/contracts/PythAggregatorV3.sol\\n// Original license found under licenses/zerolend-pyth-oracles.md\\n\\n/**\\n * @title A port of the ChainlinkAggregatorV3 interface that supports Pyth price feeds\\n * @notice This does not store any roundId information on-chain. Please review the code before using this implementation.\\n * Users should deploy an instance of this contract to wrap every price feed id that they need to use.\\n */\\ncontract PythAggregatorV3 {\\n    bytes32 public priceId;\\n    IPyth public pyth;\\n\\n    constructor(address _pyth, bytes32 _priceId) {\\n        priceId = _priceId;\\n        pyth = IPyth(_pyth);\\n    }\\n\\n    // Wrapper function to update the underlying Pyth price feeds. Not part of the AggregatorV3 interface but useful.\\n    function updateFeeds(bytes[] calldata priceUpdateData) public payable {\\n        // Update the prices to the latest available values and pay the required fee for it. The `priceUpdateData` data\\n        // should be retrieved from our off-chain Price Service API using the `pyth-evm-js` package.\\n        // See section \\\"How Pyth Works on EVM Chains\\\" below for more information.\\n        uint fee = pyth.getUpdateFee(priceUpdateData);\\n        pyth.updatePriceFeeds{value: fee}(priceUpdateData);\\n\\n        // refund remaining eth\\n        payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return uint8(-1 * int8(price.expo));\\n    }\\n\\n    function description() public pure returns (string memory) {\\n        return \\\"A port of a chainlink aggregator powered by pyth network feeds\\\";\\n    }\\n\\n    function version() public pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function latestAnswer() public view virtual returns (int256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return int256(price.price);\\n    }\\n\\n    function latestTimestamp() public view returns (uint256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return price.publishTime;\\n    }\\n\\n    function latestRound() public view returns (uint256) {\\n        // use timestamp as the round id\\n        return latestTimestamp();\\n    }\\n\\n    function getAnswer(uint256) public view returns (int256) {\\n        return latestAnswer();\\n    }\\n\\n    function getTimestamp(uint256) external view returns (uint256) {\\n        return latestTimestamp();\\n    }\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return (\\n            _roundId,\\n            int256(price.price),\\n            price.publishTime,\\n            price.publishTime,\\n            _roundId\\n        );\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        roundId = uint80(price.publishTime);\\n        return (\\n            roundId,\\n            int256(price.price),\\n            price.publishTime,\\n            price.publishTime,\\n            roundId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x13d8c3f0492a4463836d00cb9008e0302b4e128bc093cd5ce6ebf563a5230960\",\"license\":\"Apache 2\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60803461007c57601f610ccd38819003918201601f19168301916001600160401b0383118484101761008157808492604094855283398101031261007c5780516001600160a01b038116919082900361007c5760200151600055600180546001600160a01b031916919091179055604051610c3590816100988239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163311893341461088d57508063313ce5671461078857806350d25bcd1461074d57806354fd4d5014610713578063668a0f02146105dd5780637284e416146105e25780638205bf6a146105dd5780639a6fc8f5146104c8578063b5ab58dc1461048c578063b633620c14610449578063bc36c0a914610216578063f98d06f0146101bf5763feaf968c146100b257600080fd5b346101bb57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bb57608073ffffffffffffffffffffffffffffffffffffffff60015416916024855491855194859384927f96834ad30000000000000000000000000000000000000000000000000000000084528301525afa9283156101b0579261017f575b506060828101519251915169ffffffffffffffffffff841680825260079390930b60208201526040810184905290810192909252608082015260a090f35b0390f35b6101a291925060803d6080116101a9575b61019a818361090b565b81019061097b565b903861013d565b503d610190565b8251903d90823e3d90fd5b8280fd5b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5090602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104085767ffffffffffffffff9280358481116104455736602382011215610445578581830135868111610212576024830192602436918360051b0101116102125773ffffffffffffffffffffffffffffffffffffffff600154168551937fd47eed450000000000000000000000000000000000000000000000000000000085528785806102d186858b8401610b02565b0381855afa94851561043b57849561040c575b50813b15610408576103239487518096819582947fef9e5e280000000000000000000000000000000000000000000000000000000084528a8401610b02565b03925af180156103fe576103bf575b508480808047335af1503d156103b8573d93841161038a57509083915192610381827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561090b565b83523d92013e80f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b5050505080f35b8481969296116103d25782529338610332565b6024826041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83513d88823e3d90fd5b8380fd5b9094508781813d8311610434575b610424818361090b565b81010312610408575193386102e4565b503d61041a565b87513d86823e3d90fd5b8580fd5b5050346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602090610485610a7b565b9051908152f35b5050346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020906104856109e8565b508290346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125780359069ffffffffffffffffffff821682036101bb57608073ffffffffffffffffffffffffffffffffffffffff60015416916024855491875194859384927f96834ad30000000000000000000000000000000000000000000000000000000084528301525afa9283156105d257926105ad575b508151606092830151935169ffffffffffffffffffff9290921680835260079190910b60208301526040820184905291810192909252608082015260a090f35b61017b9192506105cb9060803d6080116101a95761019a818361090b565b919061056d565b8451903d90823e3d90fd5b6108c5565b50346101bb57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bb57815190606082019082821067ffffffffffffffff8311176106e757508252603e81526020907f4120706f7274206f66206120636861696e6c696e6b2061676772656761746f7260208201527f20706f77657265642062792070797468206e6574776f726b206665656473000083820152825193849260208452825192836020860152825b8481106106d157505050828201840152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b8181018301518882018801528795508201610695565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020905160018152f35b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020906104856109e8565b50823461088a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261088a5773ffffffffffffffffffffffffffffffffffffffff600154166080825460248651809481937f96834ad3000000000000000000000000000000000000000000000000000000008352888301525afa908115610880579084918391610861575b500151810b8103918280830b036108355760208360ff865191168152f35b9060116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b61087a915060803d6080116101a95761019a818361090b565b85610817565b84513d84823e3d90fd5b80fd5b84903461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602091548152f35b346109065760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109065760206108fe610a7b565b604051908152f35b600080fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761094c57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90816080910312610906576040519067ffffffffffffffff608083018181118482101761094c5760405281518060070b8103610906578352602082015190811681036109065760208301526040810151908160030b82036109065760609160408401520151606082015290565b73ffffffffffffffffffffffffffffffffffffffff6001541660806000546024604051809481937f96834ad300000000000000000000000000000000000000000000000000000000835260048301525afa908115610a6f57600091610a50575b505160070b90565b610a69915060803d6080116101a95761019a818361090b565b38610a48565b6040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff6001541660806000546024604051809481937f96834ad300000000000000000000000000000000000000000000000000000000835260048301525afa8015610a6f57606091600091610ae3575b50015190565b610afc915060803d6080116101a95761019a818361090b565b38610add565b9160208181850182865252604084019360408360051b82010194846000925b858410610b32575050505050505090565b909192939495967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301845287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181121561090657830186810191903567ffffffffffffffff81116109065780360383136109065787827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f848060019886989787985286860137600085828601015201160101990194019401929594939190610b2156fea26469706673582212202cfeb6e9cdd707c0b1576f56934bbed08557e9c7b66b3700486dab84f7785e3f64736f6c63430008180033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908163311893341461088d57508063313ce5671461078857806350d25bcd1461074d57806354fd4d5014610713578063668a0f02146105dd5780637284e416146105e25780638205bf6a146105dd5780639a6fc8f5146104c8578063b5ab58dc1461048c578063b633620c14610449578063bc36c0a914610216578063f98d06f0146101bf5763feaf968c146100b257600080fd5b346101bb57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bb57608073ffffffffffffffffffffffffffffffffffffffff60015416916024855491855194859384927f96834ad30000000000000000000000000000000000000000000000000000000084528301525afa9283156101b0579261017f575b506060828101519251915169ffffffffffffffffffff841680825260079390930b60208201526040810184905290810192909252608082015260a090f35b0390f35b6101a291925060803d6080116101a9575b61019a818361090b565b81019061097b565b903861013d565b503d610190565b8251903d90823e3d90fd5b8280fd5b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5090602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104085767ffffffffffffffff9280358481116104455736602382011215610445578581830135868111610212576024830192602436918360051b0101116102125773ffffffffffffffffffffffffffffffffffffffff600154168551937fd47eed450000000000000000000000000000000000000000000000000000000085528785806102d186858b8401610b02565b0381855afa94851561043b57849561040c575b50813b15610408576103239487518096819582947fef9e5e280000000000000000000000000000000000000000000000000000000084528a8401610b02565b03925af180156103fe576103bf575b508480808047335af1503d156103b8573d93841161038a57509083915192610381827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561090b565b83523d92013e80f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b5050505080f35b8481969296116103d25782529338610332565b6024826041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83513d88823e3d90fd5b8380fd5b9094508781813d8311610434575b610424818361090b565b81010312610408575193386102e4565b503d61041a565b87513d86823e3d90fd5b8580fd5b5050346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602090610485610a7b565b9051908152f35b5050346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020906104856109e8565b508290346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125780359069ffffffffffffffffffff821682036101bb57608073ffffffffffffffffffffffffffffffffffffffff60015416916024855491875194859384927f96834ad30000000000000000000000000000000000000000000000000000000084528301525afa9283156105d257926105ad575b508151606092830151935169ffffffffffffffffffff9290921680835260079190910b60208301526040820184905291810192909252608082015260a090f35b61017b9192506105cb9060803d6080116101a95761019a818361090b565b919061056d565b8451903d90823e3d90fd5b6108c5565b50346101bb57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bb57815190606082019082821067ffffffffffffffff8311176106e757508252603e81526020907f4120706f7274206f66206120636861696e6c696e6b2061676772656761746f7260208201527f20706f77657265642062792070797468206e6574776f726b206665656473000083820152825193849260208452825192836020860152825b8481106106d157505050828201840152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b8181018301518882018801528795508201610695565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020905160018152f35b50503461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576020906104856109e8565b50823461088a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261088a5773ffffffffffffffffffffffffffffffffffffffff600154166080825460248651809481937f96834ad3000000000000000000000000000000000000000000000000000000008352888301525afa908115610880579084918391610861575b500151810b8103918280830b036108355760208360ff865191168152f35b9060116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b61087a915060803d6080116101a95761019a818361090b565b85610817565b84513d84823e3d90fd5b80fd5b84903461021257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602091548152f35b346109065760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109065760206108fe610a7b565b604051908152f35b600080fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761094c57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90816080910312610906576040519067ffffffffffffffff608083018181118482101761094c5760405281518060070b8103610906578352602082015190811681036109065760208301526040810151908160030b82036109065760609160408401520151606082015290565b73ffffffffffffffffffffffffffffffffffffffff6001541660806000546024604051809481937f96834ad300000000000000000000000000000000000000000000000000000000835260048301525afa908115610a6f57600091610a50575b505160070b90565b610a69915060803d6080116101a95761019a818361090b565b38610a48565b6040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff6001541660806000546024604051809481937f96834ad300000000000000000000000000000000000000000000000000000000835260048301525afa8015610a6f57606091600091610ae3575b50015190565b610afc915060803d6080116101a95761019a818361090b565b38610add565b9160208181850182865252604084019360408360051b82010194846000925b858410610b32575050505050505090565b909192939495967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301845287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181121561090657830186810191903567ffffffffffffffff81116109065780360383136109065787827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f848060019886989787985286860137600085828601015201160101990194019401929594939190610b2156fea26469706673582212202cfeb6e9cdd707c0b1576f56934bbed08557e9c7b66b3700486dab84f7785e3f64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "A port of the ChainlinkAggregatorV3 interface that supports Pyth price feeds",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This does not store any roundId information on-chain. Please review the code before using this implementation. Users should deploy an instance of this contract to wrap every price feed id that they need to use.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 623,
        "contract": "@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol:PythAggregatorV3",
        "label": "priceId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 626,
        "contract": "@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol:PythAggregatorV3",
        "label": "pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)599"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)599": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      }
    }
  }
}