{
  "address": "0x44A2FD7527B4f39f6f909aFB50Dd8C4acf573530",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolSigner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolWallet_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "CHAIN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "TOKEN_DECIMALS_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExcessOfRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessOfSubscriptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficialBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLegal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSubscribed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Permit2TransferAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceTheAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TopUpBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPercent",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "rate",
          "type": "uint96"
        }
      ],
      "name": "ChangeSubscriptionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayBySig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Subscribe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Unsubscribe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "userFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        }
      ],
      "name": "UpdateSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROX_LIQUIDATE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROX_SUBSCRIPTION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COIN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COIN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "subscriptionRate",
          "type": "uint96"
        }
      ],
      "name": "changeSubscriptionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PayoutSigVerifier.DepositSig",
          "name": "depositsig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        }
      ],
      "name": "depositBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.PaymentSig",
          "name": "payment",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "payBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.SubSig",
          "name": "subscribeSig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "subscribeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PayoutSigVerifier.UnSubSig",
          "name": "unsubscribeSig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "unsubscribeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolSigner_",
          "type": "address"
        }
      ],
      "name": "updateProtocolSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolWallet_",
          "type": "address"
        }
      ],
      "name": "updateProtocolWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Sig",
              "name": "sig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint96",
                  "name": "subscriptionRate",
                  "type": "uint96"
                },
                {
                  "internalType": "uint16",
                  "name": "userFee",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "protocolFee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PayoutSigVerifier.Settings",
              "name": "settings",
              "type": "tuple"
            }
          ],
          "internalType": "struct PayoutSigVerifier.SettingsSig",
          "name": "settings",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "rvs",
          "type": "bytes"
        }
      ],
      "name": "updateSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "incomeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outgoingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "updTimestamp",
          "type": "uint40"
        },
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "subscriptionRate",
              "type": "uint96"
            },
            {
              "internalType": "uint16",
              "name": "userFee",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "protocolFee",
              "type": "uint16"
            }
          ],
          "internalType": "struct PayoutSigVerifier.Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63e0c892206e74e8ac1298f59d98589f4954670cc6981e8db550ab72d0fbe953",
  "receipt": {
    "to": null,
    "from": "0xC6a51980712aAD77A4394e847a8958c9CF6a629D",
    "contractAddress": "0x44A2FD7527B4f39f6f909aFB50Dd8C4acf573530",
    "transactionIndex": 2,
    "gasUsed": "3490809",
    "logsBloom": "0x
    "blockHash": "0xad08d7bf63ee0f0a87cf56b2844fee84378e5786180da2ce0c112cd7d0f14ea7",
    "transactionHash": "0x63e0c892206e74e8ac1298f59d98589f4954670cc6981e8db550ab72d0fbe953",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 45150454,
        "transactionHash": "0x63e0c892206e74e8ac1298f59d98589f4954670cc6981e8db550ab72d0fbe953",
        "address": "0x44A2FD7527B4f39f6f909aFB50Dd8C4acf573530",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c6a51980712aad77a4394e847a8958c9cf6a629d"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xad08d7bf63ee0f0a87cf56b2844fee84378e5786180da2ce0c112cd7d0f14ea7"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 45150454,
        "transactionHash": "0x63e0c892206e74e8ac1298f59d98589f4954670cc6981e8db550ab72d0fbe953",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c6a51980712aad77a4394e847a8958c9cf6a629d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000129a4ef5a2b7000000000000000000000000000000000000000000000000000e51a440cf82c95c000000000000000000000000000000000000000000002354b67d4fc710e129a10000000000000000000000000000000000000000000000000e3f09f1d9e0125c000000000000000000000000000000000000000000002354b68fea160683e0a1",
        "logIndex": 11,
        "blockHash": "0xad08d7bf63ee0f0a87cf56b2844fee84378e5786180da2ce0c112cd7d0f14ea7"
      }
    ],
    "blockNumber": 45150454,
    "cumulativeGasUsed": "3878957",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa461C50e169464dFFcd65A96bfa9682dE93b7520",
    "0x75C75EA24BDB26310C1eDC89A22E147EabA7906f",
    "0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada",
    "0x572dDec9087154dC5dfBB1546Bb62713147e0Ab0",
    "0x73CbF922ce00AC14cd06BDBBBD4F3646A2BBEa75",
    "6"
  ],
  "numDeployments": 3,
  "solcInputHash": "abbb022bf6f2e6b476704da05abffaf6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolSigner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CHAIN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"TOKEN_DECIMALS_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExcessOfRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessOfSubscriptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficialBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLegal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSubscribed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceTheAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TopUpBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPercent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"ChangeSubscriptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBySig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Unsubscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"name\":\"UpdateSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROX_LIQUIDATE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROX_SUBSCRIPTION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COIN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COIN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"}],\"name\":\"changeSubscriptionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.DepositSig\",\"name\":\"depositsig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.PaymentSig\",\"name\":\"payment\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"payBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.SubSig\",\"name\":\"subscribeSig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"subscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct PayoutSigVerifier.UnSubSig\",\"name\":\"unsubscribeSig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"unsubscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolSigner_\",\"type\":\"address\"}],\"name\":\"updateProtocolSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolWallet_\",\"type\":\"address\"}],\"name\":\"updateProtocolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PayoutSigVerifier.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"internalType\":\"struct PayoutSigVerifier.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"internalType\":\"struct PayoutSigVerifier.SettingsSig\",\"name\":\"settings\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"rvs\",\"type\":\"bytes\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"incomeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outgoingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"updTimestamp\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"userFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"internalType\":\"struct PayoutSigVerifier.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payout.sol\":\"Payout\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbbb219886412a339a7f84b0850f700311dd2b3a106919ae54fa0a215d847a3b2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x63209a082f66ecb584b86e412b3dd0010e9675bc19bc1f80a75437311df7ec11\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x048a69d5bb1238cafcc67dbda5a530dcd9236e6e8c963765089655b85cb0fc7a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x953c4a195ae066e90aac2ccfcef3121e4c5b74f2cf7cb4add341a7df7df2d00e\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Permit2 version of safeTransferFrom above.\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            switch permit.length\\n            case 100 {\\n                mstore(ptr, permitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20)))\\n                    let vs := calldataload(add(permit.offset, 0x44))\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20) // value\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // r\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04)))\\n                    let vs := calldataload(add(permit.offset, 0x28))\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset)))\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))\\n                    mstore(add(ptr, 0x84), true)\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20) // r\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), token)\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14) // amount\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // expiration\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // nonce\\n                mstore(add(ptr, 0xa4), spender)\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // sigDeadline\\n                mstore(add(ptr, 0xe4), 0x100)\\n                mstore(add(ptr, 0x104), 0x40)\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // r\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // vs\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            default {\\n                mstore(ptr, _PERMIT_LENGTH_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x873506454318fb67b9f108851f67a5fd6060ac50ba0d0231e4582bf7a5fc9f99\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Payout.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport {SafeERC20} from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\r\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPayout.sol\\\";\\r\\nimport \\\"./abstract/PayoutSigVerifier.sol\\\";\\r\\nimport \\\"./library/UserLib.sol\\\";\\r\\n\\r\\ncontract Payout is IPayout, PayoutSigVerifier {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using UserLib for UserLib.User;\\r\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\r\\n\\r\\n    uint256 public constant APPROX_LIQUIDATE_GAS = 120000;\\r\\n    uint256 public constant APPROX_SUBSCRIPTION_GAS = 8000;\\r\\n    uint8 public constant COIN_DECIMALS = 18;\\r\\n    uint8 public constant SUBSCRIPTION_THRESHOLD = 100;\\r\\n\\r\\n    AggregatorV3Interface public immutable COIN_PRICE_FEED;\\r\\n    AggregatorV3Interface public immutable TOKEN_PRICE_FEED;\\r\\n\\r\\n    IERC20 public immutable TOKEN;\\r\\n    uint8 public immutable TOKEN_DECIMALS;\\r\\n\\r\\n    mapping(address account => UserLib.User) public users;\\r\\n    mapping(address account => EnumerableMap.AddressToUintMap) private _subscriptions;\\r\\n\\r\\n    address public protocolWallet;\\r\\n    uint256 public totalBalance;\\r\\n\\r\\n    modifier transferExecutionFee(\\r\\n        address spender, \\r\\n        address receiver,\\r\\n        uint256 executionFee\\r\\n    ) {\\r\\n        users[spender].decreaseBalance(\\r\\n            users[protocolWallet],\\r\\n            executionFee,\\r\\n            _liquidationThreshold(spender)\\r\\n        );\\r\\n        users[receiver].increaseBalance(executionFee);\\r\\n\\r\\n        emit Transfer(spender, receiver, executionFee);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address protocolSigner_,\\r\\n        address protocolWallet_,\\r\\n        address CHAIN_PRICE_FEED_,\\r\\n        address TOKEN_PRICE_FEED_,\\r\\n        address TOKEN_,\\r\\n        uint8 TOKEN_DECIMALS_\\r\\n    ) PayoutSigVerifier(protocolSigner_) {\\r\\n        COIN_PRICE_FEED = AggregatorV3Interface(CHAIN_PRICE_FEED_);\\r\\n        TOKEN_PRICE_FEED = AggregatorV3Interface(TOKEN_PRICE_FEED_);\\r\\n        TOKEN = IERC20(TOKEN_);\\r\\n        TOKEN_DECIMALS = TOKEN_DECIMALS_;\\r\\n        protocolWallet = protocolWallet_;\\r\\n    }\\r\\n\\r\\n    function updateProtocolWallet(address protocolWallet_) external onlyOwner {\\r\\n        protocolWallet = protocolWallet_;\\r\\n    }\\r\\n\\r\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\r\\n        if (token == TOKEN && amount > TOKEN.balanceOf(address(this)) - totalBalance) {\\r\\n            revert UserLib.InsufficialBalance();\\r\\n        }\\r\\n\\r\\n        if (address(token) == address(0)) {\\r\\n            (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n\\r\\n            require(success, \\\"Payout: Transfer coin failed\\\");\\r\\n        } else {\\r\\n            token.safeTransfer(protocolWallet, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateSettings(\\r\\n        SettingsSig calldata settings, \\r\\n        bytes memory rvs\\r\\n    ) external {\\r\\n        if (settings.settings.protocolFee >= settings.settings.userFee) revert WrongPercent();\\r\\n        if (settings.settings.protocolFee + settings.settings.userFee != UserLib.FLOOR) revert WrongPercent();\\r\\n        verifySettings(settings, rvs);\\r\\n        users[settings.user].setSettings(settings.settings, users[protocolWallet]);\\r\\n\\r\\n        emit UpdateSettings(settings.user, settings.settings.userFee, settings.settings.protocolFee);\\r\\n    }\\r\\n\\r\\n    function deposit(uint amount) external {\\r\\n        _deposit(msg.sender, msg.sender, amount, false);\\r\\n    }\\r\\n\\r\\n    function depositFor(uint amount, address to) external {\\r\\n        _deposit(msg.sender, to, amount, false);\\r\\n    }\\r\\n\\r\\n    function depositWithPermit(bytes calldata permitData, uint amount) external {\\r\\n        TOKEN.tryPermit(permitData);\\r\\n        _deposit(msg.sender, msg.sender, amount, _isPermit2(permitData.length));\\r\\n    }\\r\\n\\r\\n    function depositBySig(\\r\\n        DepositSig calldata depositsig,\\r\\n        bytes calldata rvs,  \\r\\n        bytes calldata permitData\\r\\n    ) external transferExecutionFee(\\r\\n        depositsig.sig.signer, \\r\\n        msg.sender,\\r\\n        depositsig.sig.executionFee\\r\\n    ) {\\r\\n        verifyDepositSig(depositsig, rvs);\\r\\n        TOKEN.tryPermit(depositsig.sig.signer, address(this), permitData);\\r\\n        _deposit(depositsig.sig.signer, depositsig.sig.signer, depositsig.amount, _isPermit2(permitData.length));\\r\\n    }\\r\\n\\r\\n    function changeSubscriptionRate(uint96 subscriptionRate) external {\\r\\n        users[msg.sender].settings.subscriptionRate = subscriptionRate;\\r\\n\\r\\n        emit ChangeSubscriptionRate(msg.sender, subscriptionRate);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view  returns (uint) {\\r\\n        return uint(SignedMath.max(users[account].balanceOf(), int(0)));\\r\\n    }\\r\\n\\r\\n    function subscribe(address author, uint maxRate, bytes32 id) external {\\r\\n        _subscribeChecksAndEffects(msg.sender, author, maxRate);\\r\\n\\r\\n        emit Subscribe(msg.sender, author, id);\\r\\n    }\\r\\n\\r\\n    function subscribeBySig(\\r\\n        SubSig calldata subscribeSig, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee( \\r\\n        subscribeSig.sig.signer,\\r\\n        msg.sender, \\r\\n        subscribeSig.sig.executionFee\\r\\n    ) {\\r\\n        verifySubscribe(subscribeSig, rvs);\\r\\n        _subscribeChecksAndEffects(subscribeSig.sig.signer, subscribeSig.author, subscribeSig.maxRate);\\r\\n\\r\\n        emit Subscribe(subscribeSig.sig.signer, subscribeSig.author, subscribeSig.id);\\r\\n    }\\r\\n\\r\\n    function unsubscribe(address author, bytes32 id) external {\\r\\n        uint actualRate = _unsubscribeChecks(msg.sender, author);\\r\\n        _unsubscribeEffects(msg.sender, author, uint96(actualRate));\\r\\n\\r\\n        emit Unsubscribe(msg.sender, author, id);\\r\\n    }\\r\\n\\r\\n    function unsubscribeBySig(\\r\\n        UnSubSig calldata unsubscribeSig, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee(\\r\\n        unsubscribeSig.sig.signer, \\r\\n        msg.sender, \\r\\n        unsubscribeSig.sig.executionFee\\r\\n    ) {\\r\\n        verifyUnsubscribe(unsubscribeSig, rvs);\\r\\n\\r\\n        uint actualRate = _unsubscribeChecks(unsubscribeSig.sig.signer, unsubscribeSig.author);\\r\\n        _unsubscribeEffects(unsubscribeSig.sig.signer, unsubscribeSig.author, uint96(actualRate));\\r\\n\\r\\n        emit Unsubscribe(unsubscribeSig.sig.signer, unsubscribeSig.author, unsubscribeSig.id);\\r\\n    }\\r\\n\\r\\n    function payBySig(\\r\\n        PaymentSig calldata payment, \\r\\n        bytes memory rvs\\r\\n    ) external transferExecutionFee(\\r\\n        payment.sig.signer, \\r\\n        msg.sender, \\r\\n        payment.sig.executionFee\\r\\n    ) {\\r\\n        verifyPayment(payment, rvs);\\r\\n\\r\\n        users[payment.sig.signer].decreaseBalance(\\r\\n            users[protocolWallet],\\r\\n            payment.amount,\\r\\n            _liquidationThreshold(payment.sig.signer)\\r\\n        );\\r\\n\\r\\n        users[payment.receiver].increaseBalance(payment.amount);\\r\\n\\r\\n        emit PayBySig(payment.sig.signer, payment.receiver, msg.sender, payment.id, payment.amount);\\r\\n        emit Transfer(payment.sig.signer, payment.receiver, payment.amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external {\\r\\n        users[msg.sender].decreaseBalance(users[protocolWallet], amount, _liquidationThreshold(msg.sender));\\r\\n        totalBalance -= amount;\\r\\n\\r\\n        TOKEN.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Transfer(msg.sender, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function liquidate(address account) external {\\r\\n        UserLib.User storage user = users[account];\\r\\n        if (!user.isLiquidatable(_liquidationThreshold(account))) revert NotLiquidatable();\\r\\n\\r\\n        EnumerableMap.AddressToUintMap storage user_subscriptions = _subscriptions[account];\\r\\n        for (uint i = user_subscriptions.length(); i > 0; i--) {\\r\\n            (address author, uint subscriptionRate) = user_subscriptions.at(i - 1);\\r\\n\\r\\n            _unsubscribeEffects(account, author, uint96(subscriptionRate));\\r\\n        }\\r\\n        user.drainBalance(users[msg.sender]);\\r\\n\\r\\n        emit Liquidate(account, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _isPermit2(uint256 length) private pure returns (bool) {\\r\\n        return length == 96 || length == 352;\\r\\n    }\\r\\n\\r\\n    function _deposit(address from, address to, uint amount, bool usePermit2) private {\\r\\n        users[to].increaseBalance(amount);\\r\\n        totalBalance += amount;\\r\\n\\r\\n        if(usePermit2) {\\r\\n            TOKEN.safeTransferFromPermit2(from, address(this), amount);\\r\\n        } else {\\r\\n            TOKEN.safeTransferFrom(from, address(this), amount);\\r\\n        }\\r\\n\\r\\n        emit Deposit(to, amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _unsubscribeChecks(address user, address author) private view returns (uint) {\\r\\n        (bool success, uint actualRate) = _subscriptions[user].tryGet(author);\\r\\n        if (!success) revert NotSubscribed();\\r\\n\\r\\n        return actualRate;\\r\\n    }\\r\\n\\r\\n    function _unsubscribeEffects(address user, address author, uint96 subscriptionRate) private {\\r\\n        users[user].decreaseOutgoingRate(subscriptionRate, users[protocolWallet]);\\r\\n        users[author].decreaseIncomeRate(subscriptionRate, _liquidationThreshold(author), users[protocolWallet]);\\r\\n        _subscriptions[user].remove(author);\\r\\n    }\\r\\n\\r\\n    function _subscribeChecksAndEffects(address user, address author, uint maxRate) private {\\r\\n        (bool success, uint actualRate) = _subscriptions[user].tryGet(author);\\r\\n        if (success) _unsubscribeEffects(user, author, uint96(actualRate));\\r\\n\\r\\n        if (_subscriptions[user].length() == SUBSCRIPTION_THRESHOLD) revert ExcessOfSubscriptions();\\r\\n\\r\\n        uint96 subscriptionRate = users[author].settings.subscriptionRate;\\r\\n        if (subscriptionRate > maxRate) revert ExcessOfRate();\\r\\n\\r\\n        users[user].increaseOutgoingRate(subscriptionRate, _liquidationThreshold(user), users[protocolWallet]);\\r\\n        users[author].increaseIncomeRate(subscriptionRate, users[protocolWallet]);\\r\\n        _subscriptions[user].set(author, subscriptionRate);\\r\\n    }\\r\\n\\r\\n    function _liquidationThreshold(address user) private view returns (int) {\\r\\n        (, int256 tokenPrice, , , ) = TOKEN_PRICE_FEED.latestRoundData();\\r\\n        (, int256 coinPrice, , , ) = COIN_PRICE_FEED.latestRoundData();\\r\\n\\r\\n        uint256 expectedNativeAssetCost = block.basefee *\\r\\n            (APPROX_LIQUIDATE_GAS + APPROX_SUBSCRIPTION_GAS * _subscriptions[user].length());\\r\\n\\r\\n        uint256 executionPrice = expectedNativeAssetCost * uint(coinPrice);\\r\\n\\r\\n        if (TOKEN_DECIMALS < COIN_DECIMALS) {\\r\\n            return int(executionPrice) / tokenPrice / int(10 ** (COIN_DECIMALS - TOKEN_DECIMALS));\\r\\n        } else {\\r\\n            return int(executionPrice) / tokenPrice;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4b4a62850ba53989e1487b9334d91d7ce175cad2c0610ebe525747e34d7c1b9c\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/PayoutSigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract PayoutSigVerifier is EIP712, Ownable {\\r\\n    error InvalidNonce();\\r\\n\\r\\n    struct Sig {\\r\\n        address signer;\\r\\n        uint256 nonce;\\r\\n        uint256 executionFee;\\r\\n    }\\r\\n\\r\\n    struct DepositSig {\\r\\n        Sig sig;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct PaymentSig {\\r\\n        Sig sig;\\r\\n        address receiver;\\r\\n        uint256 amount;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct SubSig {\\r\\n        Sig sig;\\r\\n        address author;\\r\\n        uint256 maxRate;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct UnSubSig {\\r\\n        Sig sig;\\r\\n        address author;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    struct Settings {\\r\\n        uint96 subscriptionRate;\\r\\n        uint16 userFee;\\r\\n        uint16 protocolFee;\\r\\n    }\\r\\n\\r\\n    struct SettingsSig {\\r\\n        Sig sig;\\r\\n        address user;\\r\\n        Settings settings;\\r\\n    }\\r\\n\\r\\n    string private constant SIGNING_DOMAIN = \\\"PayoutSigVerifier\\\";\\r\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\r\\n\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    address protocolSigner;\\r\\n\\r\\n    constructor(address protocolSigner_) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\\r\\n        protocolSigner = protocolSigner_;\\r\\n    }\\r\\n\\r\\n    function updateProtocolSigner(address protocolSigner_) external onlyOwner {\\r\\n        protocolSigner = protocolSigner_;\\r\\n    }\\r\\n\\r\\n    function getChainID() external view returns (uint256) {\\r\\n        return block.chainid;\\r\\n    }\\r\\n\\r\\n    function _hashPayment(PaymentSig calldata payment) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        keccak256(\\r\\n                            \\\"PaymentSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address receiver,\\\"\\r\\n                                \\\"uint256 amount,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ),\\r\\n                        payment\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashSettings(SettingsSig calldata settingssig) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        keccak256(\\r\\n                            \\\"SettingsSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address user,\\\"\\r\\n                                \\\"Settings settings\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Settings(\\\"\\r\\n                                \\\"uint96 subscriptionRate,\\\"\\r\\n                                \\\"uint16 userFee,\\\"\\r\\n                                \\\"uint16 protocolFee,\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ),\\r\\n                        settingssig\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashSubscribe(SubSig calldata subscription) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(keccak256(\\r\\n                            \\\"SubSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address author,\\\"\\r\\n                                \\\"uint256 maxRate,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        subscription\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashUnSubscribe(UnSubSig calldata unsubscription) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(abi.encode(keccak256(\\r\\n                            \\\"UnSubSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"address author,\\\"\\r\\n                                \\\"bytes32 id\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        unsubscription\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _hashDeposit(DepositSig calldata depositSig) internal view returns (bytes32) {\\r\\n        return\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(abi.encode(keccak256(\\r\\n                            \\\"DepositSig(\\\"\\r\\n                                \\\"Sig sig,\\\"\\r\\n                                \\\"uint256 amount\\\"\\r\\n                            \\\")\\\"\\r\\n                            \\\"Sig(\\\"\\r\\n                                \\\"address signer,\\\"\\r\\n                                \\\"uint256 nonce,\\\"\\r\\n                                \\\"uint256 executionFee\\\"\\r\\n                            \\\")\\\"\\r\\n                        ), \\r\\n                        depositSig\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verifyPayment(PaymentSig calldata payment, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashPayment(payment), payment.sig.signer, payment.sig.signer, payment.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function verifySettings(SettingsSig calldata settings, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashSettings(settings), protocolSigner, settings.user, settings.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function verifySubscribe(SubSig calldata subscription, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(\\r\\n            _hashSubscribe(subscription), \\r\\n            subscription.sig.signer, \\r\\n            subscription.sig.signer, \\r\\n            subscription.sig.nonce, \\r\\n            rvs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyUnsubscribe(UnSubSig calldata unsubscription, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(\\r\\n            _hashUnSubscribe(unsubscription), \\r\\n            unsubscription.sig.signer, \\r\\n            unsubscription.sig.signer, \\r\\n            unsubscription.sig.nonce, \\r\\n            rvs);\\r\\n    }\\r\\n\\r\\n    function verifyDepositSig(DepositSig calldata deposit, bytes memory rvs) internal returns (bool) {\\r\\n        return _verify(_hashDeposit(deposit), deposit.sig.signer, deposit.sig.signer, deposit.sig.nonce, rvs);\\r\\n    }\\r\\n\\r\\n    function _verify(\\r\\n        bytes32 hash,\\r\\n        address signer,\\r\\n        address noncer,\\r\\n        uint256 nonce,\\r\\n        bytes memory rvs\\r\\n    ) internal returns (bool) {\\r\\n        if (nonce != nonces[noncer]) {\\r\\n            revert InvalidNonce();\\r\\n        }\\r\\n\\r\\n        nonces[noncer]++;\\r\\n\\r\\n        return SignatureChecker.isValidSignatureNow(signer, hash, rvs);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x198419569647cb6693d0c9107dabad60796d740cd1ac4dda52b9c810e7a60a81\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPayout.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IPayout {\\r\\n    event UpdateSettings(address indexed user, uint16 userFee, uint16 protocolFee);\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event ChangeSubscriptionRate(address indexed user, uint96 rate);\\r\\n    event Subscribe(address indexed user, address indexed author, bytes32 indexed id);\\r\\n    event Unsubscribe(address indexed user, address indexed author, bytes32 indexed id);\\r\\n    event Liquidate(address indexed user, address indexed liquidator);\\r\\n    event PayBySig(address indexed spender, address indexed receiver, address executor, bytes32 id, uint256 amount);\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n\\r\\n    error WrongPercent();\\r\\n    error NotSubscribed();\\r\\n    error NotLiquidatable();\\r\\n    error NotLegal();\\r\\n    error ExcessOfRate();\\r\\n    error ExcessOfSubscriptions();\\r\\n\\r\\n    function deposit(uint amount) external;\\r\\n\\r\\n    function depositFor(uint amount, address user) external;\\r\\n\\r\\n    function changeSubscriptionRate(uint96 rate) external;\\r\\n\\r\\n    function subscribe(address author, uint maxRate, bytes32 id) external;\\r\\n\\r\\n    function unsubscribe(address author, bytes32 id) external;\\r\\n\\r\\n    function withdraw(uint amount) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function balanceOf(address account) external returns (uint);\\r\\n\\r\\n    function rescueFunds(IERC20 token_, uint256 amount) external;\\r\\n\\r\\n    function updateProtocolWallet(address newWallet_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca5633423090997ecefa1a5885174c28ca631222a10ce157b3f926cc09ccdf48\",\"license\":\"BUSL-1.1\"},\"contracts/library/UserLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../abstract/PayoutSigVerifier.sol\\\";\\r\\n\\r\\nlibrary UserLib {\\r\\n    error TopUpBalance();\\r\\n    error InsufficialBalance();\\r\\n    error ReduceTheAmount();\\r\\n\\r\\n    uint256 constant SAFE_LIQUIDATION_TIME = 2 days;\\r\\n    uint256 constant LIQUIDATION_TIME = 1 days;\\r\\n\\r\\n    uint16 public constant FLOOR = 10000;\\r\\n\\r\\n    struct User {\\r\\n        int balance;\\r\\n        uint incomeRate; // changes to this field requires _syncBalance() call\\r\\n        uint outgoingRate; // changes to this field requires _syncBalance() call\\r\\n        uint40 updTimestamp;\\r\\n        PayoutSigVerifier.Settings settings;\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        User storage user,\\r\\n        PayoutSigVerifier.Settings calldata settings,\\r\\n        User storage protocol\\r\\n    ) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.settings = settings;\\r\\n    }\\r\\n\\r\\n    function increaseOutgoingRate(User storage user, uint96 diff, int256 threshold, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.outgoingRate += diff;\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function decreaseOutgoingRate(User storage user, uint96 diff, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.outgoingRate -= diff;\\r\\n    }\\r\\n\\r\\n    function increaseIncomeRate(User storage user, uint96 diff, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.incomeRate += diff;\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeRate(User storage user, uint96 diff, int256 threshold, User storage protocol) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        user.incomeRate -= diff;\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function increaseBalance(User storage user, uint256 amount) internal {\\r\\n        user.balance += int(amount);\\r\\n    }\\r\\n\\r\\n    function decreaseBalance(User storage user, User storage protocol, uint256 amount, int256 threshold) internal {\\r\\n        _syncBalance(user, protocol);\\r\\n        if (user.balance < int(amount)) revert InsufficialBalance();\\r\\n        user.balance -= int(amount);\\r\\n        if (isSafeLiquidatable(user, threshold)) revert ReduceTheAmount();\\r\\n    }\\r\\n\\r\\n    function drainBalance(User storage user, User storage liquidator) internal {\\r\\n        liquidator.balance += user.balance;\\r\\n        user.balance = 0;\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user) internal view returns (int balance) {\\r\\n        (balance, ) = _fullBalanceOf(user, 0);\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user, uint256 afterDelay) internal view returns (int balance) {\\r\\n        (balance, ) = _fullBalanceOf(user, afterDelay);\\r\\n    }\\r\\n\\r\\n    function isSafeLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, SAFE_LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function isLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function _isLiquidatable(User storage user, int256 threshold, uint256 afterDelay) private view returns (bool) {\\r\\n        (int256 currentRate, ) = _currentRateAndProtocolFee(user);\\r\\n        return currentRate < 0 && balanceOf(user, afterDelay) < threshold;\\r\\n    }\\r\\n\\r\\n    function _currentRateAndProtocolFee(User storage user) private view returns (int, uint256) {\\r\\n        return (\\r\\n            int256((int(user.incomeRate) * int16(user.settings.userFee)) / int16(FLOOR) - int(user.outgoingRate)),\\r\\n            uint((user.incomeRate * user.settings.protocolFee) / FLOOR)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _fullBalanceOf(\\r\\n        User storage user,\\r\\n        uint256 afterDelay\\r\\n    ) private view returns (int balance, uint256 protocolFee) {\\r\\n        if (user.updTimestamp == uint48(block.timestamp) || user.updTimestamp == 0) return (user.balance, 0);\\r\\n        (int256 currentRate, uint256 protocolRate) = _currentRateAndProtocolFee(user);\\r\\n        if (currentRate == 0 && protocolRate == 0) return (user.balance, 0);\\r\\n        uint256 timePassed = block.timestamp - user.updTimestamp + afterDelay;\\r\\n        balance = user.balance + currentRate * int256(timePassed);\\r\\n        protocolFee = protocolRate * timePassed;\\r\\n    }\\r\\n\\r\\n    function _syncBalance(User storage user, User storage protocol) private {\\r\\n        (int256 balance, uint256 protocolFee) = _fullBalanceOf(user, 0);\\r\\n        if (balance != user.balance) user.balance = balance;\\r\\n        if (protocolFee > 0) protocol.balance += int(protocolFee);\\r\\n        user.updTimestamp = uint40(block.timestamp);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28d98a2eb2b1211ce95d5b9674e880884e4f6efc72762e2cfd2cfa3881d36b29\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101e034620002c057601f6200435538819003918201601f19168301926001600160401b0392909183851183861017620002aa578160c09284926040978852833981010312620002c0576200005481620002e1565b906200006360208201620002e1565b62000070858301620002e1565b6200007e60608401620002e1565b9160a06200008f60808601620002e1565b9401519460ff86168603620002c057875191620000ac83620002c5565b601183526020830191702830bcb7baba29b4b3ab32b934b334b2b960791b83528951620000d981620002c5565b6001815260208101603160f81b8152620000f386620002f6565b946101209586526200010583620004c9565b96610140978852519020918260e0525190206101009b818d524660a05280519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85528284015260608301524660808301523060a083015260a0825260c082019b828d10908d1117620002aa578b90525190206080523060c052600280546001600160a01b031980821633908117909355936001600160a01b03939092849283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a31683600454161760045581610160961686528161018097168752816101a0981688526101c098895216906007541617600755613cde9788620006778939608051886135ce015260a05188613689015260c0518861359f015260e0518861361d0152518761364301525186610d1301525185610d3d015251848181610c67015261331601525183818161027501526132d70152518281816106ec01528181610f420152818161102a01528181611a4701528181611cac015281816128d001528181612a720152612b730152518181816116b6015261338a0152f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b03821117620002aa57604052565b51906001600160a01b0382168203620002c057565b8051602091908281101562000395575090601f8251116200033457808251920151908083106200032557501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b8285106200037b575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000357565b6001600160401b038111620002aa576000928354926001938481811c91168015620004be575b83821014620004aa57601f811162000474575b5081601f84116001146200040d5750928293918392869462000401575b50501b916000199060031b1c191617905560ff90565b015192503880620003eb565b919083601f1981168780528488209488905b888383106200045957505050106200043f575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000432565b8587015188559096019594850194879350908101906200041f565b85805284601f848820920160051c820191601f860160051c015b8281106200049e575050620003ce565b8781550185906200048e565b634e487b7160e01b86526022600452602486fd5b90607f1690620003bb565b805160209081811015620005575750601f825111620004f657808251920151908083106200032557501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b8285106200053d575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000519565b9192916001600160401b038111620002aa5760019182548381811c911680156200066b575b828210146200065557601f81116200061c575b5080601f8311600114620005cf575081929394600092620005c3575b5050600019600383901b1c191690821b17905560ff90565b015190503880620005ab565b90601f198316958460005282600020926000905b8882106200060457505083859697106200043f57505050811b01905560ff90565b808785968294968601518155019501930190620005e3565b8360005283601f83600020920160051c820191601f850160051c015b828110620006485750506200058f565b6000815501849062000638565b634e487b7160e01b600052602260045260246000fd5b90607f16906200057c56fe60806040908082526004918236101561001757600080fd5b60009260e08435811c93846306d6e63f14611d81575083630814c28514611d005783630d525ac014611b3757836318c3332614611a9c578484632e1a7d4d146119c7575083632f865568146117a957836336efd16f1461174d57836338aff6ae14611713578363564b81ef146116da5783635b7f415c1461167e5783636ba7c6b21461150257836370a0823114611484578363715018a6146113e65783637690a6e3146111ec57836377359159146111b257836378e3214f14610fc85783637ecebe0014610f6657836382bfefc814610ef7578363843ce43014610e4b57836384b0196e14610cde5783638da5cb5b14610c8b5783639a6c595214610c1c578363a5bc097f14610be1578363a87430ba14610ac5578363ad7a672f14610a88578363afcf3bbc146107b0578363b6b55f2514610773578363bbeb1ed714610737578363cec08c1e14610690578363da0d938a1461045d57508263e308a099146103db578263f2fde38b1461029d57508163f469f77a1461022a575063fb7e3d74146101a157600080fd5b346102275760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576101d8611dd1565b6101e56024358233612f86565b73ffffffffffffffffffffffffffffffffffffffff6044359116337f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b80fd5b90503461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b909150346103d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d7576102d7611dd1565b906102e0612071565b73ffffffffffffffffffffffffffffffffffffffff809216928315610354575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b83346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610428611dd1565b610430612071565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600754161760075580f35b92509034610688577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c0811261068c5760a0136106885767ffffffffffffffff9160a435838111610684576104b89036908301611fa1565b916104c161245e565b9360443573ffffffffffffffffffffffffffffffffffffffff95610508898389841693848352600560205261050288808520948d600754168152209161328c565b92613987565b338952600560205283892061051e838254613952565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519160208301937fad393dfe8522c7ebf48cc87f938e18127980fb505639ec7d21cd0ebe1603268285526105818285016134b5565b8661058a611df9565b1660a0850152608435978860c086015260c08552840192848410908411176106585750525190206105d991906105bf90613547565b6105c761245e565b6105cf61245e565b90602435926136af565b5061061c6105f66105e861245e565b6105f0612481565b90612c30565b6105fe61245e565b906bffffffffffffffffffffffff610614612481565b911691612cdb565b61062461245e565b908061062e612481565b1691167f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b8860416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8580fd5b8380fd5b8480fd5b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995780359067ffffffffffffffff82116103d7576106e56107109161072893369101611e3d565b80929130337f00000000000000000000000000000000000000000000000000000000000000006124c5565b506060811490811561072b575b5060243533336129e7565b80f35b6101609150143861071d565b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029957602090516201d4c08152f35b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995761072890353333612889565b849192346103d757610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0181811261068c5783136106885767ffffffffffffffff9260e4358481116106845761080c9036908801611fa1565b61081461243c565b9461ffff95868061082361244d565b1691161015610a345761083461243c565b868061083e61244d565b16911601868111610a5c5786612710911603610a3457845160208101917f5d28c6d88e78f0b1c3c683cced71465011628afa85494e4b583128f2bd8325ca83526108898783016134b5565b73ffffffffffffffffffffffffffffffffffffffff95866108a8611df9565b1660a0840152608435956bffffffffffffffffffffffff8716809703610a2c578660c085015260a435908a8216809203610a305784015260c435898116809103610a2c57838201528252610120820190811182821017610a0057610946927f2bc7c690e379673c356b3cb9b8eb4e6040e2158721e4465aa0fe1f187443f40b98999a949261093a928952519020613547565b858454166105cf612481565b5082610950612481565b16875260056020528387208360075416885261096e85892082613c3b565b01908154906dffff00000000000000000000000061098a61244d565b60601b16907fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffff00000000000000000000000000006109c961243c565b60701b16931617171790556109dc612481565b6109e461244d565b946109ed61243c565b818551971687521660208601521692a280f35b60248960418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8a80fd5b8b80fd5b8785517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b60248860118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020906008549051908152f35b9184346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610b13611dd1565b168152600560205281812080549360018201549160028101549164ffffffffff60038301541691865195606087019087821067ffffffffffffffff831117610bb5575087520154936bffffffffffffffffffffffff918286168252602082019361ffff978896878960601c168752878286019960701c16895281519a8b5260208b0152890152606088015251166080860152511660a0840152511660c0820152f35b806041857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051611f408152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b91843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757610d377f00000000000000000000000000000000000000000000000000000000000000006120f0565b90610d617f0000000000000000000000000000000000000000000000000000000000000000612263565b928051936020938486019686881067ffffffffffffffff891117610e1f57509593610dd5838293878b999652868652610dc882519a8b9a7f0f000000000000000000000000000000000000000000000000000000000000008c5280878d01528b0190612013565b91898303908a0152612013565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610e0857505050500390f35b835185528695509381019392810192600101610df9565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509150346103d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d7578135916bffffffffffffffffffffffff831680930361068857338452600560205281842001827fffffffffffffffffffffffffffffffffffffffff000000000000000000000000825416179055519081527fcbe76e2308c6dbaa4a8d74be4b741727f7fc9ee8ede6445a629918edc83cf41d60203392a280f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299578060209273ffffffffffffffffffffffffffffffffffffffff610fb8611dd1565b1681526003845220549051908152f35b509150346103d757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d75773ffffffffffffffffffffffffffffffffffffffff8235818116918282036106845760243592611027612071565b817f0000000000000000000000000000000000000000000000000000000000000000168082149081611117575b506110ef5786939291906110db57505081808092335af1611073612372565b501561107e57505080f35b90602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601c60248201527f5061796f75743a205472616e7366657220636f696e206661696c6564000000006044820152fd5b9193509150610728935060075416906123a2565b8585517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908751928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa80156111a8578890611171575b611169915060085490612336565b841138611054565b506020813d82116111a0575b8161118a60209383611eef565b8101031261119c57611169905161115b565b8780fd5b3d915061117d565b86513d8a823e3d90fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160648152f35b925050346103d7576111fd36611fbf565b9092611208846124a4565b90838501359273ffffffffffffffffffffffffffffffffffffffff918284169485895260209460058652878a209085600754168b5282898c209161124b9061328c565b9161125593613987565b338952600585528689208181549061126c91613952565b905586519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9586863393a38551848101917f45e2530d9b4b4107e164312ecbeec8bc5b2dd6807350344929778fb1a8dde05a83528782016112d0908a6134ea565b81526112db81611eb6565b5190206112e790613547565b906112f1876124a4565b6112fa886124a4565b8589013591611308946136af565b5080611313866124a4565b16865260058252808487209481600754168852808820956080880135968761133a8a6124a4565b6113439061328c565b9161134d93613987565b60608701968261135c896124a4565b168952600585528189208781549061137391613952565b905561137e816124a4565b611387896124a4565b848085519233845260a08601358a8501528b878501521692169060607f0b909c3b107998af1a2c39db9ce7d90ac92ee73043353dea81a86efd42b7ed4291a36113cf906124a4565b966113d9906124a4565b905195865216941692a380f35b843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275761141d612071565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209173ffffffffffffffffffffffffffffffffffffffff6114d5611dd1565b168152600583526114e7828220613b4b565b5090808213156114fa5750905b51908152f35b9050906114f4565b925050346103d75761161461156a916115f661151d36611fbf565b929095611529876124a4565b888389013597889273ffffffffffffffffffffffffffffffffffffffff9981610502888d80951696878152600560205281812095600754168152209161328c565b338a526005602052838a20611580838254613952565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a38151906115e360208301937fc2eeead625770800ba2549bf3ea57d36d80f4e01dc7994148ee2ba1629b3a68885528301896134ea565b81526115ee81611eb6565b519020613547565b6115ff856124a4565b611608866124a4565b906020870135926136af565b5061161e826124a4565b9061163b6060840192611630846124a4565b608086013591612f86565b8060a061165061164a866124a4565b946124a4565b940135931691167f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051468152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160128152f35b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760243573ffffffffffffffffffffffffffffffffffffffff811681036103d75761072891359033612889565b509150346103d757602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610688576117e5611dd1565b9173ffffffffffffffffffffffffffffffffffffffff8084169485875260058352838720946118138161328c565b8861181d88613a6c565b501290816119b4575b501561198c5790879594939291878752600684528487209283548060028601915b6118925750505050505060059033855252822061186682548254613952565b90555533907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb48380a380f35b909192939495969798507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818111611960578b846bffffffffffffffffffffffff8b6118e36118fc958c612835565b90549060031b1c93848152878d52205416911686612cdb565b8015611934577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190818b9998979695949392611847565b60248b6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248c6011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5083517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b90506119bf87613ab5565b501238611826565b93505034611a985760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611a985735903383526005602052611a3181842073ffffffffffffffffffffffffffffffffffffffff600754168552838386206105023361328c565b611a3d82600854612336565b600855611a6b82337f00000000000000000000000000000000000000000000000000000000000000006123a2565b519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a380f35b5050fd5b848334610299577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757611ad3611dd1565b611af56bffffffffffffffffffffffff611aed8333612c30565b168233612cdb565b73ffffffffffffffffffffffffffffffffffffffff6024359116337f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c08112610688576080136103d75767ffffffffffffffff9060843582811161068c57611b929036908501611e3d565b93909260a4359081116106845761072894611c9f611bb9611cd094611c5094369101611e3d565b9687949193611bc661245e565b8b611c068a604435809461050273ffffffffffffffffffffffffffffffffffffffff9384831696878152600560205281812095600754168152209161328c565b338d526005602052898d20611c1c838254613952565b905589519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a33691611f6a565b6105bf865196611c8860208901917fe8d1c597a62d6e2ab3b9ea9b09215a043159e6e592d246bd34e13b334ab14ecd835289016134b5565b606435978860a082015260a081526115ee81611e6b565b50611ca861245e565b30907f00000000000000000000000000000000000000000000000000000000000000006124c5565b50611cd961245e565b611ce161245e565b9060608414938415611cf4575b506129e7565b61016014935038611cee565b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995773ffffffffffffffffffffffffffffffffffffffff611d4e611dd1565b611d56612071565b167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b85903461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600754168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b600080fd5b6064359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b9181601f84011215611df45782359167ffffffffffffffff8311611df45760208381860195010111611df457565b60c0810190811067ffffffffffffffff821117611e8757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117611e8757604052565b6040810190811067ffffffffffffffff821117611e8757604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611e8757604052565b67ffffffffffffffff8111611e8757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611f7682611f30565b91611f846040519384611eef565b829481845281830111611df4578281602093846000960137010152565b9080601f83011215611df457816020611fbc93359101611f6a565b90565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112611df45760c013611df45760049160c4359067ffffffffffffffff8211611df457611fbc918401611fa1565b919082519283825260005b84811061205d5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b60208183018101518483018201520161201e565b73ffffffffffffffffffffffffffffffffffffffff60025416330361209257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff81146121465760ff811690601f821161211c576040519161211283611ed3565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b506040516000805490600182811c90808416938415612259575b602094858410811461222c57838752869493929181156121ed5750600114612191575b5050611fbc92500382611eef565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106121d5575050611fbc93508201013880612183565b855487840185015294850194869450918301916121bd565b9050611fbc9593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612183565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f1691612160565b60ff81146122855760ff811690601f821161211c576040519161211283611ed3565b50604051600060019081549182811c9080841693841561232c575b602094858410811461222c57838752869493929181156121ed57506001146122d0575050611fbc92500382611eef565b60008181527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf695935091905b818310612314575050611fbc93508201013880612183565b855487840185015294850194869450918301916122fc565b91607f16916122a0565b9190820391821161234357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3d1561239d573d9061238382611f30565b916123916040519384611eef565b82523d6000602084013e565b606090565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081612419575b50156123ef57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d156124345750600160005114601f3d11165b386123e7565b3b151561242e565b60c43561ffff81168103611df45790565b60a43561ffff81168103611df45790565b60043573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b60643573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b3573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b929160009360405195928360641461278057836048146126bf578360e0146126845783610100146126475783606014612572575050506101601461252b576004837f68275857000000000000000000000000000000000000000000000000000000008152fd5b82610160610164927f2b67b570000000000000000000000000000000000000000000000000000000008596526004830137826e22d473030f116ddee9f6b43ac78ba35af190565b86935093602092604092610164967f2b67b57000000000000000000000000000000000000000000000000000000000899a526004870152602486015260148260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff9181601485013560e01c0183166064880152601884013560e01c608488015260a4870152601c83013560e01c011660c485015261010060e4850152816101048501528280820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af190565b508592508495859250610104947f8fcbaf0c00000000000000000000000000000000000000000000000000000000610100925260048501375af190565b50859250849585925060e4947fd505accf0000000000000000000000000000000000000000000000000000000060e0925260048501375af190565b869350610104948697937f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff927f8fcbaf0c000000000000000000000000000000000000000000000000000000008996526004870152602486015260206008602883013592803560e01c60448901527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600482013560e01c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af190565b86935060e4948697937f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff927fd505accf000000000000000000000000000000000000000000000000000000008996526004870152602486015260206024604483013592828160448a01377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8382013560e01c0160648901528360ff1c601b0160848901520160a48701371660c48401525af190565b805482101561284d5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190820180921161234357565b919073ffffffffffffffffffffffffffffffffffffffff8091169260008481526005602052604081206128bd858254613952565b90556128cb8460085461287c565b6008557f000000000000000000000000000000000000000000000000000000000000000060208260646040517f23b872dd00000000000000000000000000000000000000000000000000000000815286600482015230602482015288604482015282855af191826129c2575b505015612998577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091857fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051888152a26040519485521692a3565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b9091503d156129de57600191505114601f3d11165b3880612937565b503b15156129d7565b73ffffffffffffffffffffffffffffffffffffffff8092169360008581526005602052604091828220612a1b878254613952565b9055612a298660085461287c565b60085515612b7157838511612b48578151907f36c785160000000000000000000000000000000000000000000000000000000082528360048301523060248301528560448301527f000000000000000000000000000000000000000000000000000000000000000060648301528060846e22d473030f116ddee9f6b43ac78ba39382855af19081612b3d575b5015612b1457916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef935b867fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c858351898152a2519485521692a3565b600490517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b151538612ab5565b600482517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b7f0000000000000000000000000000000000000000000000000000000000000000602082606485517f23b872dd00000000000000000000000000000000000000000000000000000000815287600482015230602482015289604482015282855af19182612c0b575b505015612b1457916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93612ae2565b9091503d15612c2757600191505114601f3d11165b3880612bd9565b503b1515612c20565b90612c629173ffffffffffffffffffffffffffffffffffffffff80911660005260066020526040600020911690612c95565b9015612c6b5790565b60046040517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b91908060005260028301602052604060002054928315600014612cd357612ccd92935060019160005201602052604060002054151590565b90600090565b505060019190565b9291909273ffffffffffffffffffffffffffffffffffffffff80911693600090858252600560205260409260026bffffffffffffffffffffffff8585209683600754168652612d2c87872089613c3b565b169501612d3a868254612336565b9055808216948584526005602052612d548585209361328c565b916007541684526005602052612d6c85852084613c3b565b612d7b60018401918254612336565b905582612d8783613a6c565b50129182612de4575b5050612dbb57612db89394815260066020528181209183825260028301602052812055612df8565b50565b600482517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612def919250613bc5565b50123880612d90565b90600182019060009281845282602052604084205490811515600014612f7f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828101818111612f5257825490848201918211612f2557808203612ebb575b50505080548015612e8e57820191612e718383612835565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b612f10612ecb612edb9386612835565b90549060031b1c92839286612835565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080612e59565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b92919273ffffffffffffffffffffffffffffffffffffffff938482169160008381526020936006855260409283832096612fc38a82168099612c95565b9190613130575b5050818352600686526064848420541461310757868352600586526bffffffffffffffffffffffff60048585200154169485116130de57818352600586526130148484209161328c565b896007541684526005875261302b85852083613c3b565b6002820161303a87825461287c565b90558361304683613a6c565b501291826130ca575b50506130a1576001612db89798878452600587528484209060075416845261307985852082613c3b565b0161308585825461287c565b9055815260068452818120938582526002850190522055613150565b600483517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b6130d5919250613bc5565b5012388061304f565b600484517fd83a01fa000000000000000000000000000000000000000000000000000000008152fd5b600484517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b6bffffffffffffffffffffffff61314992169083612cdb565b3880612fca565b60008281526001820160205260409020546131a55780549068010000000000000000821015611e87578261318e612edb846001809601855584612835565b905580549260005201602052604060002055600190565b5050600090565b519069ffffffffffffffffffff82168203611df457565b908160a0910312611df4576131d7816131ac565b91602082015191604081015191611fbc6080606084015193016131ac565b8181029291811591840414171561234357565b811561325d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f8000000000000000000000000000000000000000000000000000000000000000821416612343570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906040517ffeaf968c0000000000000000000000000000000000000000000000000000000080825260a09060049473ffffffffffffffffffffffffffffffffffffffff9183858881867f0000000000000000000000000000000000000000000000000000000000000000165afa94851561348557600095613491575b5060405190815283818881867f0000000000000000000000000000000000000000000000000000000000000000165afa93841561348557600094613451575b5050166000526006602052604060002054611f409080820291820403613423576201d4c0908101809111613423579061338361338892486131f5565b6131f5565b7f000000000000000000000000000000000000000000000000000000000000000060ff169190601283101561341557906133c191613208565b9060120360ff81116133e75760ff16604d81116133e757611fbc929350600a0a90613208565b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b909150611fbc929350613208565b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b613471929450803d1061347e575b6134698183611eef565b8101906131c3565b5050509050913880613347565b503d61345f565b6040513d6000823e3d90fd5b6134a9919550843d861161347e576134698183611eef565b50505090509338613308565b60043573ffffffffffffffffffffffffffffffffffffffff8116809103611df457815260243560208201526040604435910152565b60a0809173ffffffffffffffffffffffffffffffffffffffff8061350d83611e1c565b168552602082013560208601526040820135604086015261353060608301611e1c565b166060850152608081013560808501520135910152565b604290613552613588565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016301480613686575b156135f0577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261368081611e6b565b51902090565b507f000000000000000000000000000000000000000000000000000000000000000046146135c7565b9193929073ffffffffffffffffffffffffffffffffffffffff8095169360009480865260209360038552604087205403613854578552600383526040852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612f52576001019055613725818561387e565b600581101561382757159687613818575b50508515613747575b505050505090565b8495509084929394916040516137c581613799888201947f1626ba7e000000000000000000000000000000000000000000000000000000009a8b87526024840152604060448401526064830190612013565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611eef565b51915afa926137d2612372565b908461380b575b846137ed575b50505050388080808061373f565b909180939450828051810103126102275750015114388080806137df565b93508181511015936137d9565b83811691161495503880613736565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b9060418151146000146138ac576138a8916020820151906060604084015193015160001a906138b6565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116139465791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561393957815173ffffffffffffffffffffffffffffffffffffffff811615613933579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b9190916000838201938412911290801582169115161761234357565b8181039291600013801582851316918412161761234357565b9291906139949084613c3b565b825490808212613a03576139a79161396e565b825560006139b483613a6c565b501291826139ef575b50506139c557565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b6139fa919250613bc5565b501238806139bd565b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661234357818405149015171561234357565b90600182015491613ab160048201549361271092613aa661ffff91600286613a9c858b60601c1660010b87613a2d565b059101549061396e565b9560701c16906131f5565b0490565b9064ffffffffff60038301541665ffffffffffff421681148015613b43575b613b3a57613ae183613a6c565b939091821580613b32575b613b2757613afa9042612336565b9062015180820180921161234357611fbc92613b1b83613b21935492613a2d565b90613952565b936131f5565b505492506000919050565b508415613aec565b50905490600090565b508015613ad4565b9064ffffffffff6003830154169165ffffffffffff421683148015613bbd575b613bb557613b7881613a6c565b93811580613bad575b613ba357611fbc9291613b1b613b9a613b219342612336565b80945492613a2d565b5050549150600090565b508415613b81565b549150600090565b508215613b6b565b9064ffffffffff60038301541665ffffffffffff421681148015613c33575b613b3a57613bf183613a6c565b939091821580613c2b575b613b2757613c0a9042612336565b906202a300820180921161234357611fbc92613b1b83613b21935492613a2d565b508415613bfc565b508015613be4565b600391613c4782613b4b565b9083548103613ca0575b5080613c8c575b50500164ffffffffff42167fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000825416179055565b613c97908254613952565b90553880613c58565b835538613c5156fea26469706673582212202baaa08981af2448509ee18b88cf14a6c32b2e6513a913600b81303aaffbb9d364736f6c63430008130033",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b60009260e08435811c93846306d6e63f14611d81575083630814c28514611d005783630d525ac014611b3757836318c3332614611a9c578484632e1a7d4d146119c7575083632f865568146117a957836336efd16f1461174d57836338aff6ae14611713578363564b81ef146116da5783635b7f415c1461167e5783636ba7c6b21461150257836370a0823114611484578363715018a6146113e65783637690a6e3146111ec57836377359159146111b257836378e3214f14610fc85783637ecebe0014610f6657836382bfefc814610ef7578363843ce43014610e4b57836384b0196e14610cde5783638da5cb5b14610c8b5783639a6c595214610c1c578363a5bc097f14610be1578363a87430ba14610ac5578363ad7a672f14610a88578363afcf3bbc146107b0578363b6b55f2514610773578363bbeb1ed714610737578363cec08c1e14610690578363da0d938a1461045d57508263e308a099146103db578263f2fde38b1461029d57508163f469f77a1461022a575063fb7e3d74146101a157600080fd5b346102275760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610227576101d8611dd1565b6101e56024358233612f86565b73ffffffffffffffffffffffffffffffffffffffff6044359116337f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b80fd5b90503461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b909150346103d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d7576102d7611dd1565b906102e0612071565b73ffffffffffffffffffffffffffffffffffffffff809216928315610354575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b83346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610428611dd1565b610430612071565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600754161760075580f35b92509034610688577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c0811261068c5760a0136106885767ffffffffffffffff9160a435838111610684576104b89036908301611fa1565b916104c161245e565b9360443573ffffffffffffffffffffffffffffffffffffffff95610508898389841693848352600560205261050288808520948d600754168152209161328c565b92613987565b338952600560205283892061051e838254613952565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a381519160208301937fad393dfe8522c7ebf48cc87f938e18127980fb505639ec7d21cd0ebe1603268285526105818285016134b5565b8661058a611df9565b1660a0850152608435978860c086015260c08552840192848410908411176106585750525190206105d991906105bf90613547565b6105c761245e565b6105cf61245e565b90602435926136af565b5061061c6105f66105e861245e565b6105f0612481565b90612c30565b6105fe61245e565b906bffffffffffffffffffffffff610614612481565b911691612cdb565b61062461245e565b908061062e612481565b1691167f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b8860416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8580fd5b8380fd5b8480fd5b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995780359067ffffffffffffffff82116103d7576106e56107109161072893369101611e3d565b80929130337f00000000000000000000000000000000000000000000000000000000000000006124c5565b506060811490811561072b575b5060243533336129e7565b80f35b6101609150143861071d565b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029957602090516201d4c08152f35b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995761072890353333612889565b849192346103d757610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0181811261068c5783136106885767ffffffffffffffff9260e4358481116106845761080c9036908801611fa1565b61081461243c565b9461ffff95868061082361244d565b1691161015610a345761083461243c565b868061083e61244d565b16911601868111610a5c5786612710911603610a3457845160208101917f5d28c6d88e78f0b1c3c683cced71465011628afa85494e4b583128f2bd8325ca83526108898783016134b5565b73ffffffffffffffffffffffffffffffffffffffff95866108a8611df9565b1660a0840152608435956bffffffffffffffffffffffff8716809703610a2c578660c085015260a435908a8216809203610a305784015260c435898116809103610a2c57838201528252610120820190811182821017610a0057610946927f2bc7c690e379673c356b3cb9b8eb4e6040e2158721e4465aa0fe1f187443f40b98999a949261093a928952519020613547565b858454166105cf612481565b5082610950612481565b16875260056020528387208360075416885261096e85892082613c3b565b01908154906dffff00000000000000000000000061098a61244d565b60601b16907fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffff00000000000000000000000000006109c961243c565b60701b16931617171790556109dc612481565b6109e461244d565b946109ed61243c565b818551971687521660208601521692a280f35b60248960418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8a80fd5b8b80fd5b8785517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b60248860118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020906008549051908152f35b9184346102275760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275773ffffffffffffffffffffffffffffffffffffffff610b13611dd1565b168152600560205281812080549360018201549160028101549164ffffffffff60038301541691865195606087019087821067ffffffffffffffff831117610bb5575087520154936bffffffffffffffffffffffff918286168252602082019361ffff978896878960601c168752878286019960701c16895281519a8b5260208b0152890152606088015251166080860152511660a0840152511660c0820152f35b806041857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051611f408152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b91843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757610d377f00000000000000000000000000000000000000000000000000000000000000006120f0565b90610d617f0000000000000000000000000000000000000000000000000000000000000000612263565b928051936020938486019686881067ffffffffffffffff891117610e1f57509593610dd5838293878b999652868652610dc882519a8b9a7f0f000000000000000000000000000000000000000000000000000000000000008c5280878d01528b0190612013565b91898303908a0152612013565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610e0857505050500390f35b835185528695509381019392810192600101610df9565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509150346103d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d7578135916bffffffffffffffffffffffff831680930361068857338452600560205281842001827fffffffffffffffffffffffffffffffffffffffff000000000000000000000000825416179055519081527fcbe76e2308c6dbaa4a8d74be4b741727f7fc9ee8ede6445a629918edc83cf41d60203392a280f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299578060209273ffffffffffffffffffffffffffffffffffffffff610fb8611dd1565b1681526003845220549051908152f35b509150346103d757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d75773ffffffffffffffffffffffffffffffffffffffff8235818116918282036106845760243592611027612071565b817f0000000000000000000000000000000000000000000000000000000000000000168082149081611117575b506110ef5786939291906110db57505081808092335af1611073612372565b501561107e57505080f35b90602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601c60248201527f5061796f75743a205472616e7366657220636f696e206661696c6564000000006044820152fd5b9193509150610728935060075416906123a2565b8585517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908751928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa80156111a8578890611171575b611169915060085490612336565b841138611054565b506020813d82116111a0575b8161118a60209383611eef565b8101031261119c57611169905161115b565b8780fd5b3d915061117d565b86513d8a823e3d90fd5b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160648152f35b925050346103d7576111fd36611fbf565b9092611208846124a4565b90838501359273ffffffffffffffffffffffffffffffffffffffff918284169485895260209460058652878a209085600754168b5282898c209161124b9061328c565b9161125593613987565b338952600585528689208181549061126c91613952565b905586519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9586863393a38551848101917f45e2530d9b4b4107e164312ecbeec8bc5b2dd6807350344929778fb1a8dde05a83528782016112d0908a6134ea565b81526112db81611eb6565b5190206112e790613547565b906112f1876124a4565b6112fa886124a4565b8589013591611308946136af565b5080611313866124a4565b16865260058252808487209481600754168852808820956080880135968761133a8a6124a4565b6113439061328c565b9161134d93613987565b60608701968261135c896124a4565b168952600585528189208781549061137391613952565b905561137e816124a4565b611387896124a4565b848085519233845260a08601358a8501528b878501521692169060607f0b909c3b107998af1a2c39db9ce7d90ac92ee73043353dea81a86efd42b7ed4291a36113cf906124a4565b966113d9906124a4565b905195865216941692a380f35b843461022757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102275761141d612071565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8483346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209173ffffffffffffffffffffffffffffffffffffffff6114d5611dd1565b168152600583526114e7828220613b4b565b5090808213156114fa5750905b51908152f35b9050906114f4565b925050346103d75761161461156a916115f661151d36611fbf565b929095611529876124a4565b888389013597889273ffffffffffffffffffffffffffffffffffffffff9981610502888d80951696878152600560205281812095600754168152209161328c565b338a526005602052838a20611580838254613952565b905583519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a38151906115e360208301937fc2eeead625770800ba2549bf3ea57d36d80f4e01dc7994148ee2ba1629b3a68885528301896134ea565b81526115ee81611eb6565b519020613547565b6115ff856124a4565b611608866124a4565b906020870135926136af565b5061161e826124a4565b9061163b6060840192611630846124a4565b608086013591612f86565b8060a061165061164a866124a4565b946124a4565b940135931691167f9d48c8374928935f162c75d7310b15fb1040c13fd2f8725698fd7e66cecc0a138480a480f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209051468152f35b84833461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610299576020905160128152f35b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760243573ffffffffffffffffffffffffffffffffffffffff811681036103d75761072891359033612889565b509150346103d757602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610688576117e5611dd1565b9173ffffffffffffffffffffffffffffffffffffffff8084169485875260058352838720946118138161328c565b8861181d88613a6c565b501290816119b4575b501561198c5790879594939291878752600684528487209283548060028601915b6118925750505050505060059033855252822061186682548254613952565b90555533907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb48380a380f35b909192939495969798507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818111611960578b846bffffffffffffffffffffffff8b6118e36118fc958c612835565b90549060031b1c93848152878d52205416911686612cdb565b8015611934577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190818b9998979695949392611847565b60248b6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248c6011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5083517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b90506119bf87613ab5565b501238611826565b93505034611a985760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611a985735903383526005602052611a3181842073ffffffffffffffffffffffffffffffffffffffff600754168552838386206105023361328c565b611a3d82600854612336565b600855611a6b82337f00000000000000000000000000000000000000000000000000000000000000006123a2565b519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a380f35b5050fd5b848334610299577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022757611ad3611dd1565b611af56bffffffffffffffffffffffff611aed8333612c30565b168233612cdb565b73ffffffffffffffffffffffffffffffffffffffff6024359116337f373c591f0f8b71e8af368873ce91220bb01eaf58ab25191225215a0a01a5fd618480a480f35b509150346103d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160c08112610688576080136103d75767ffffffffffffffff9060843582811161068c57611b929036908501611e3d565b93909260a4359081116106845761072894611c9f611bb9611cd094611c5094369101611e3d565b9687949193611bc661245e565b8b611c068a604435809461050273ffffffffffffffffffffffffffffffffffffffff9384831696878152600560205281812095600754168152209161328c565b338d526005602052898d20611c1c838254613952565b905589519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a33691611f6a565b6105bf865196611c8860208901917fe8d1c597a62d6e2ab3b9ea9b09215a043159e6e592d246bd34e13b334ab14ecd835289016134b5565b606435978860a082015260a081526115ee81611e6b565b50611ca861245e565b30907f00000000000000000000000000000000000000000000000000000000000000006124c5565b50611cd961245e565b611ce161245e565b9060608414938415611cf4575b506129e7565b61016014935038611cee565b8482346102995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995773ffffffffffffffffffffffffffffffffffffffff611d4e611dd1565b611d56612071565b167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b85903461029957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102995760209073ffffffffffffffffffffffffffffffffffffffff600754168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b600080fd5b6064359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b359073ffffffffffffffffffffffffffffffffffffffff82168203611df457565b9181601f84011215611df45782359167ffffffffffffffff8311611df45760208381860195010111611df457565b60c0810190811067ffffffffffffffff821117611e8757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117611e8757604052565b6040810190811067ffffffffffffffff821117611e8757604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611e8757604052565b67ffffffffffffffff8111611e8757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611f7682611f30565b91611f846040519384611eef565b829481845281830111611df4578281602093846000960137010152565b9080601f83011215611df457816020611fbc93359101611f6a565b90565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112611df45760c013611df45760049160c4359067ffffffffffffffff8211611df457611fbc918401611fa1565b919082519283825260005b84811061205d5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b60208183018101518483018201520161201e565b73ffffffffffffffffffffffffffffffffffffffff60025416330361209257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff81146121465760ff811690601f821161211c576040519161211283611ed3565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b506040516000805490600182811c90808416938415612259575b602094858410811461222c57838752869493929181156121ed5750600114612191575b5050611fbc92500382611eef565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106121d5575050611fbc93508201013880612183565b855487840185015294850194869450918301916121bd565b9050611fbc9593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612183565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f1691612160565b60ff81146122855760ff811690601f821161211c576040519161211283611ed3565b50604051600060019081549182811c9080841693841561232c575b602094858410811461222c57838752869493929181156121ed57506001146122d0575050611fbc92500382611eef565b60008181527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf695935091905b818310612314575050611fbc93508201013880612183565b855487840185015294850194869450918301916122fc565b91607f16916122a0565b9190820391821161234357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3d1561239d573d9061238382611f30565b916123916040519384611eef565b82523d6000602084013e565b606090565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081612419575b50156123ef57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d156124345750600160005114601f3d11165b386123e7565b3b151561242e565b60c43561ffff81168103611df45790565b60a43561ffff81168103611df45790565b60043573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b60643573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b3573ffffffffffffffffffffffffffffffffffffffff81168103611df45790565b929160009360405195928360641461278057836048146126bf578360e0146126845783610100146126475783606014612572575050506101601461252b576004837f68275857000000000000000000000000000000000000000000000000000000008152fd5b82610160610164927f2b67b570000000000000000000000000000000000000000000000000000000008596526004830137826e22d473030f116ddee9f6b43ac78ba35af190565b86935093602092604092610164967f2b67b57000000000000000000000000000000000000000000000000000000000899a526004870152602486015260148260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff9181601485013560e01c0183166064880152601884013560e01c608488015260a4870152601c83013560e01c011660c485015261010060e4850152816101048501528280820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af190565b508592508495859250610104947f8fcbaf0c00000000000000000000000000000000000000000000000000000000610100925260048501375af190565b50859250849585925060e4947fd505accf0000000000000000000000000000000000000000000000000000000060e0925260048501375af190565b869350610104948697937f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff927f8fcbaf0c000000000000000000000000000000000000000000000000000000008996526004870152602486015260206008602883013592803560e01c60448901527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600482013560e01c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af190565b86935060e4948697937f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff927fd505accf000000000000000000000000000000000000000000000000000000008996526004870152602486015260206024604483013592828160448a01377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8382013560e01c0160648901528360ff1c601b0160848901520160a48701371660c48401525af190565b805482101561284d5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190820180921161234357565b919073ffffffffffffffffffffffffffffffffffffffff8091169260008481526005602052604081206128bd858254613952565b90556128cb8460085461287c565b6008557f000000000000000000000000000000000000000000000000000000000000000060208260646040517f23b872dd00000000000000000000000000000000000000000000000000000000815286600482015230602482015288604482015282855af191826129c2575b505015612998577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091857fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051888152a26040519485521692a3565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b9091503d156129de57600191505114601f3d11165b3880612937565b503b15156129d7565b73ffffffffffffffffffffffffffffffffffffffff8092169360008581526005602052604091828220612a1b878254613952565b9055612a298660085461287c565b60085515612b7157838511612b48578151907f36c785160000000000000000000000000000000000000000000000000000000082528360048301523060248301528560448301527f000000000000000000000000000000000000000000000000000000000000000060648301528060846e22d473030f116ddee9f6b43ac78ba39382855af19081612b3d575b5015612b1457916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef935b867fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c858351898152a2519485521692a3565b600490517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b151538612ab5565b600482517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b7f0000000000000000000000000000000000000000000000000000000000000000602082606485517f23b872dd00000000000000000000000000000000000000000000000000000000815287600482015230602482015289604482015282855af19182612c0b575b505015612b1457916020917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93612ae2565b9091503d15612c2757600191505114601f3d11165b3880612bd9565b503b1515612c20565b90612c629173ffffffffffffffffffffffffffffffffffffffff80911660005260066020526040600020911690612c95565b9015612c6b5790565b60046040517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b91908060005260028301602052604060002054928315600014612cd357612ccd92935060019160005201602052604060002054151590565b90600090565b505060019190565b9291909273ffffffffffffffffffffffffffffffffffffffff80911693600090858252600560205260409260026bffffffffffffffffffffffff8585209683600754168652612d2c87872089613c3b565b169501612d3a868254612336565b9055808216948584526005602052612d548585209361328c565b916007541684526005602052612d6c85852084613c3b565b612d7b60018401918254612336565b905582612d8783613a6c565b50129182612de4575b5050612dbb57612db89394815260066020528181209183825260028301602052812055612df8565b50565b600482517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b612def919250613bc5565b50123880612d90565b90600182019060009281845282602052604084205490811515600014612f7f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828101818111612f5257825490848201918211612f2557808203612ebb575b50505080548015612e8e57820191612e718383612835565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b612f10612ecb612edb9386612835565b90549060031b1c92839286612835565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080612e59565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b92919273ffffffffffffffffffffffffffffffffffffffff938482169160008381526020936006855260409283832096612fc38a82168099612c95565b9190613130575b5050818352600686526064848420541461310757868352600586526bffffffffffffffffffffffff60048585200154169485116130de57818352600586526130148484209161328c565b896007541684526005875261302b85852083613c3b565b6002820161303a87825461287c565b90558361304683613a6c565b501291826130ca575b50506130a1576001612db89798878452600587528484209060075416845261307985852082613c3b565b0161308585825461287c565b9055815260068452818120938582526002850190522055613150565b600483517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b6130d5919250613bc5565b5012388061304f565b600484517fd83a01fa000000000000000000000000000000000000000000000000000000008152fd5b600484517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b6bffffffffffffffffffffffff61314992169083612cdb565b3880612fca565b60008281526001820160205260409020546131a55780549068010000000000000000821015611e87578261318e612edb846001809601855584612835565b905580549260005201602052604060002055600190565b5050600090565b519069ffffffffffffffffffff82168203611df457565b908160a0910312611df4576131d7816131ac565b91602082015191604081015191611fbc6080606084015193016131ac565b8181029291811591840414171561234357565b811561325d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f8000000000000000000000000000000000000000000000000000000000000000821416612343570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906040517ffeaf968c0000000000000000000000000000000000000000000000000000000080825260a09060049473ffffffffffffffffffffffffffffffffffffffff9183858881867f0000000000000000000000000000000000000000000000000000000000000000165afa94851561348557600095613491575b5060405190815283818881867f0000000000000000000000000000000000000000000000000000000000000000165afa93841561348557600094613451575b5050166000526006602052604060002054611f409080820291820403613423576201d4c0908101809111613423579061338361338892486131f5565b6131f5565b7f000000000000000000000000000000000000000000000000000000000000000060ff169190601283101561341557906133c191613208565b9060120360ff81116133e75760ff16604d81116133e757611fbc929350600a0a90613208565b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b909150611fbc929350613208565b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b613471929450803d1061347e575b6134698183611eef565b8101906131c3565b5050509050913880613347565b503d61345f565b6040513d6000823e3d90fd5b6134a9919550843d861161347e576134698183611eef565b50505090509338613308565b60043573ffffffffffffffffffffffffffffffffffffffff8116809103611df457815260243560208201526040604435910152565b60a0809173ffffffffffffffffffffffffffffffffffffffff8061350d83611e1c565b168552602082013560208601526040820135604086015261353060608301611e1c565b166060850152608081013560808501520135910152565b604290613552613588565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016301480613686575b156135f0577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261368081611e6b565b51902090565b507f000000000000000000000000000000000000000000000000000000000000000046146135c7565b9193929073ffffffffffffffffffffffffffffffffffffffff8095169360009480865260209360038552604087205403613854578552600383526040852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612f52576001019055613725818561387e565b600581101561382757159687613818575b50508515613747575b505050505090565b8495509084929394916040516137c581613799888201947f1626ba7e000000000000000000000000000000000000000000000000000000009a8b87526024840152604060448401526064830190612013565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611eef565b51915afa926137d2612372565b908461380b575b846137ed575b50505050388080808061373f565b909180939450828051810103126102275750015114388080806137df565b93508181511015936137d9565b83811691161495503880613736565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b9060418151146000146138ac576138a8916020820151906060604084015193015160001a906138b6565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116139465791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561393957815173ffffffffffffffffffffffffffffffffffffffff811615613933579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b9190916000838201938412911290801582169115161761234357565b8181039291600013801582851316918412161761234357565b9291906139949084613c3b565b825490808212613a03576139a79161396e565b825560006139b483613a6c565b501291826139ef575b50506139c557565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b6139fa919250613bc5565b501238806139bd565b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661234357818405149015171561234357565b90600182015491613ab160048201549361271092613aa661ffff91600286613a9c858b60601c1660010b87613a2d565b059101549061396e565b9560701c16906131f5565b0490565b9064ffffffffff60038301541665ffffffffffff421681148015613b43575b613b3a57613ae183613a6c565b939091821580613b32575b613b2757613afa9042612336565b9062015180820180921161234357611fbc92613b1b83613b21935492613a2d565b90613952565b936131f5565b505492506000919050565b508415613aec565b50905490600090565b508015613ad4565b9064ffffffffff6003830154169165ffffffffffff421683148015613bbd575b613bb557613b7881613a6c565b93811580613bad575b613ba357611fbc9291613b1b613b9a613b219342612336565b80945492613a2d565b5050549150600090565b508415613b81565b549150600090565b508215613b6b565b9064ffffffffff60038301541665ffffffffffff421681148015613c33575b613b3a57613bf183613a6c565b939091821580613c2b575b613b2757613c0a9042612336565b906202a300820180921161234357611fbc92613b1b83613b21935492613a2d565b508415613bfc565b508015613be4565b600391613c4782613b4b565b9083548103613ca0575b5080613c8c575b50500164ffffffffff42167fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000825416179055565b613c97908254613952565b90553880613c58565b835538613c5156fea26469706673582212202baaa08981af2448509ee18b88cf14a6c32b2e6513a913600b81303aaffbb9d364736f6c63430008130033",
  "devdoc": {
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1893,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1895,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 656,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6199,
        "contract": "contracts/Payout.sol:Payout",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6201,
        "contract": "contracts/Payout.sol:Payout",
        "label": "protocolSigner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5061,
        "contract": "contracts/Payout.sol:Payout",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)6684_storage)"
      },
      {
        "astId": 5066,
        "contract": "contracts/Payout.sol:Payout",
        "label": "_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(AddressToUintMap)3900_storage)"
      },
      {
        "astId": 5068,
        "contract": "contracts/Payout.sol:Payout",
        "label": "protocolWallet",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5070,
        "contract": "contracts/Payout.sol:Payout",
        "label": "totalBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressToUintMap)3900_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.AddressToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressToUintMap)3900_storage"
      },
      "t_mapping(t_address,t_struct(User)6684_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserLib.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6684_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)3900_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 3899,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)3150_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)4597_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4596,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4403_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)3150_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 3145,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)4597_storage"
          },
          {
            "astId": 3149,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)4403_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4398,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/Payout.sol:Payout",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)6180_storage": {
        "encoding": "inplace",
        "label": "struct PayoutSigVerifier.Settings",
        "members": [
          {
            "astId": 6175,
            "contract": "contracts/Payout.sol:Payout",
            "label": "subscriptionRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 6177,
            "contract": "contracts/Payout.sol:Payout",
            "label": "userFee",
            "offset": 12,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6179,
            "contract": "contracts/Payout.sol:Payout",
            "label": "protocolFee",
            "offset": 14,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)6684_storage": {
        "encoding": "inplace",
        "label": "struct UserLib.User",
        "members": [
          {
            "astId": 6674,
            "contract": "contracts/Payout.sol:Payout",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 6676,
            "contract": "contracts/Payout.sol:Payout",
            "label": "incomeRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6678,
            "contract": "contracts/Payout.sol:Payout",
            "label": "outgoingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6680,
            "contract": "contracts/Payout.sol:Payout",
            "label": "updTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 6683,
            "contract": "contracts/Payout.sol:Payout",
            "label": "settings",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Settings)6180_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}