{
  "address": "0x1c3E45F2D9Dd65ceb6a644A646337015119952ff",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "CHAIN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_PRICE_FEED_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TOKEN_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessOfRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessOfSubscriptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficialBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "InvalidProjectId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLegal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSubscribed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Permit2TransferAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceTheAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintToInt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TopUpBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongNonceType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ProjectIdClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        }
      ],
      "name": "SetSettingsForUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "encodedRates",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "encodedRates",
          "type": "uint256"
        }
      ],
      "name": "StreamRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROX_LIQUIDATE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROX_SUBSCRIPTION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COIN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMALS_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROTOCOL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNED_CALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProjectOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "allSubscriptions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "encodedRates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "BySigTraits.Value",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BySig.SignedCall",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "bySig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "bySigAccountNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "bySigSelectorNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "bySigUniqueNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "bySigUniqueNoncesSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProjectId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "defaultSettings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "projectFee",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPermit2",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPermit2",
          "type": "bool"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "BySigTraits.Value",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BySig.SignedCall",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "hashBySig",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "action",
          "type": "bytes"
        }
      ],
      "name": "permitAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "projectFee",
              "type": "uint16"
            }
          ],
          "internalType": "struct IPapaya.Settings",
          "name": "settings",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "setDefaultSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "projectFee",
              "type": "uint16"
            }
          ],
          "internalType": "struct IPapaya.Settings",
          "name": "settings",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "setSettingsForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "sponsoredCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "subscriptionRate",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "encodedRates",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        }
      ],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "advance",
          "type": "uint32"
        }
      ],
      "name": "useBySigAccountNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "uint32",
          "name": "advance",
          "type": "uint32"
        }
      ],
      "name": "useBySigSelectorNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "useBySigUniqueNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "userSettings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "projectFee",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "incomeRate",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "outgoingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x881c647b1bad1cbb6a6ee1c820fafc2d8676f3315df2c47bdc262cd3c8b75b2f",
  "receipt": {
    "to": null,
    "from": "0xe39662803ae00fDCcb866E0B3984c90D9d836586",
    "contractAddress": "0x1c3E45F2D9Dd65ceb6a644A646337015119952ff",
    "transactionIndex": 3,
    "gasUsed": "4288744",
    "logsBloom": "0x
    "blockHash": "0x100ac7cd47bcd1b1e432299d8bd8236ebda35ca5c78c23afdb57f30bfeaf224c",
    "transactionHash": "0x881c647b1bad1cbb6a6ee1c820fafc2d8676f3315df2c47bdc262cd3c8b75b2f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 54740080,
        "transactionHash": "0x881c647b1bad1cbb6a6ee1c820fafc2d8676f3315df2c47bdc262cd3c8b75b2f",
        "address": "0x1c3E45F2D9Dd65ceb6a644A646337015119952ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e39662803ae00fdccb866e0b3984c90d9d836586"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x100ac7cd47bcd1b1e432299d8bd8236ebda35ca5c78c23afdb57f30bfeaf224c"
      }
    ],
    "blockNumber": 54740080,
    "cumulativeGasUsed": "5801790",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165",
    "0x80EDee6f667eCc9f63a0a6f55578F870651f06A4",
    "0x9aA40Cc99973d8407a2AE7B2237d26E615EcaFd2"
  ],
  "numDeployments": 2,
  "solcInputHash": "86437695fd6541b04f79e82d5b93bbe4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"CHAIN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_PRICE_FEED_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKEN_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessOfRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessOfSubscriptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficialBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"InvalidProjectId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLegal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSubscribed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceTheAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TopUpBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNonceType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ProjectIdClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"name\":\"SetDefaultSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"name\":\"SetSettingsForUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedRates\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedRates\",\"type\":\"uint256\"}],\"name\":\"StreamRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROX_LIQUIDATE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROX_SUBSCRIPTION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COIN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNED_CALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProjectOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"allSubscriptions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"encodedRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"BySigTraits.Value\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BySig.SignedCall\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bySig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bySigAccountNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"bySigSelectorNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"bySigUniqueNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"bySigUniqueNoncesSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"defaultSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"projectFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermit2\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPermit2\",\"type\":\"bool\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"BySigTraits.Value\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BySig.SignedCall\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"hashBySig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"action\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"projectFee\",\"type\":\"uint16\"}],\"internalType\":\"struct IPapaya.Settings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"setDefaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"projectFee\",\"type\":\"uint16\"}],\"internalType\":\"struct IPapaya.Settings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"setSettingsForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"sponsoredCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"subscriptionRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"encodedRates\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"advance\",\"type\":\"uint32\"}],\"name\":\"useBySigAccountNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"advance\",\"type\":\"uint32\"}],\"name\":\"useBySigSelectorNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"useBySigUniqueNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"projectFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"incomeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"outgoingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IndexOutOfBounds()\":[{\"details\":\"Error thrown when attempting to access an index outside the bounds of the array.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"bySig(address,(uint256,bytes),bytes)\":{\"params\":{\"sig\":\"The `SignedCall` structure containing the call traits and data.\",\"signature\":\"The signature authorizing the call.\",\"signer\":\"The address of the signer authorizing the call.\"},\"returns\":{\"ret\":\"The bytes result of the executed call.\"}},\"bySigAccountNonces(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"returns\":{\"_0\":\"The current nonce for the account.\"}},\"bySigSelectorNonces(address,bytes4)\":{\"params\":{\"account\":\"The address of the account.\",\"selector\":\"The selector for which the nonce is being retrieved.\"},\"returns\":{\"_0\":\"The current nonce for the specified selector and account.\"}},\"bySigUniqueNonces(address,uint256)\":{\"details\":\"This function divides the nonce space into slots to efficiently manage storage. A unique nonce is considered used if its corresponding bit in the storage slot is set.\",\"params\":{\"account\":\"The address of the account for which the nonce is being checked.\",\"nonce\":\"The unique nonce to check. It is divided into slots for storage efficiency.\"},\"returns\":{\"_0\":\"bool True if the nonce has been used, false otherwise.\"}},\"bySigUniqueNoncesSlot(address,uint256)\":{\"details\":\"This function allows access to the raw storage slot used to track used nonces, divided into slots for efficiency. Each bit in the returned value represents the used/unused status of a nonce within that slot.\",\"params\":{\"account\":\"The address of the account for which the nonce slot is being retrieved.\",\"nonce\":\"The nonce for which the storage slot is being retrieved. The function calculates the correct slot based on this value.\"},\"returns\":{\"_0\":\"uint256 The raw value of the storage slot that tracks the used/unused status of nonces in the specified slot for the given account.\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"hashBySig((uint256,bytes))\":{\"params\":{\"sig\":\"The `SignedCall` structure containing the call traits and data.\"},\"returns\":{\"_0\":\"The EIP-712 compliant hash of the `SignedCall` struct.\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permitAndCall(bytes,bytes)\":{\"params\":{\"action\":\"The data representing the action to be executed after the permit.\",\"permit\":\"ERC20 token address (20 bytes) concatinated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sponsoredCall(address,uint256,bytes,bytes)\":{\"details\":\"Facilitates execution of a delegate call where the signer covers the transaction fees. Requires `_chargeSigner` to be overridden to define the fee transfer logic.\",\"params\":{\"amount\":\"amount value used for sponsored logic (for instance, fee amount to be charged to the signer).\",\"data\":\"Encoded function call to execute.\",\"extraData\":\"Additional data for sponsored process in `_chargeSigner` method.\",\"token\":\"Address of the token used for sponsored logic (for instance, for fee payment).\"},\"returns\":{\"ret\":\"Result of the executed call.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useBySigAccountNonce(uint32)\":{\"params\":{\"advance\":\"The amount by which to advance the nonce.\"}},\"useBySigSelectorNonce(bytes4,uint32)\":{\"params\":{\"advance\":\"The amount by which to advance the nonce.\",\"selector\":\"The selector for which the nonce is being advanced.\"}},\"useBySigUniqueNonce(uint256)\":{\"params\":{\"nonce\":\"The nonce being marked as used.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"DeadlineExceeded()\":[{\"notice\":\"Emitted when a call is attempted after the specified deadline has passed.\"}],\"WrongNonce()\":[{\"notice\":\"Emitted when the nonce used for a call is incorrect.\"}],\"WrongNonceType()\":[{\"notice\":\"Thrown when an invalid nonce type is encountered.\"}],\"WrongRelayer()\":[{\"notice\":\"Emitted when a call is made by an unauthorized relayer.\"}],\"WrongSignature()\":[{\"notice\":\"Emitted when the signature provided for a call does not match the expected signature.\"}]},\"kind\":\"user\",\"methods\":{\"bySig(address,(uint256,bytes),bytes)\":{\"notice\":\"Executes a signature-authorized call on behalf of the signer.\"},\"bySigAccountNonces(address)\":{\"notice\":\"Retrieves the account nonce for the specified account.\"},\"bySigSelectorNonces(address,bytes4)\":{\"notice\":\"Retrieves the selector nonce for a specific account and selector.\"},\"bySigUniqueNonces(address,uint256)\":{\"notice\":\"Checks if a unique nonce has already been used for a given account.\"},\"bySigUniqueNoncesSlot(address,uint256)\":{\"notice\":\"Retrieves the storage slot value for a given account and nonce slot.\"},\"hashBySig((uint256,bytes))\":{\"notice\":\"Hashes a `SignedCall` struct using EIP-712 typed data hashing rules.\"},\"permitAndCall(bytes,bytes)\":{\"notice\":\"Executes a permit for an ERC20 token and then a specified action in a single transaction.\"},\"sponsoredCall(address,uint256,bytes,bytes)\":{\"notice\":\"Executes a call sponsored by the signer (for instance, by fee), intended to be used, for instance, in conjunction with `bySig`.\"},\"useBySigAccountNonce(uint32)\":{\"notice\":\"Advances the account nonce for the sender by a specified amount.\"},\"useBySigSelectorNonce(bytes4,uint32)\":{\"notice\":\"Advances the selector nonce for the sender and a specific selector by a specified amount.\"},\"useBySigUniqueNonce(uint256)\":{\"notice\":\"Marks a unique nonce as used for the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Papaya.sol\":\"Papaya\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IDaiLikePermit\\n * @dev Interface for Dai-like permit function allowing token spending via signatures.\\n */\\ninterface IDaiLikePermit {\\n    /**\\n     * @notice Approves spending of tokens via off-chain signatures.\\n     * @param holder Token holder's address.\\n     * @param spender Spender's address.\\n     * @param nonce Current nonce of the holder.\\n     * @param expiry Time when the permit expires.\\n     * @param allowed True to allow, false to disallow spending.\\n     * @param v, r, s Signature components.\\n     */\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf8636c1c4631641c7b40ac65cd69e6ae04a99cf3358426c642dec02c6c774c82\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IERC7597Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IERC7597Permit\\n * @dev A new extension for ERC-2612 permit, which has already been added to USDC v2.2.\\n */\\ninterface IERC7597Permit {\\n    /**\\n     * @notice Update allowance with a signed permit.\\n     * @dev Signature bytes can be used for both EOA wallets and contract wallets.\\n     * @param owner Token owner's address (Authorizer).\\n     * @param spender Spender's address.\\n     * @param value Amount of allowance.\\n     * @param deadline The time at which the signature expires (unixtime).\\n     * @param signature Unstructured bytes signature signed by an EOA wallet or a contract wallet.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaf148ecd4db0f44989a7417f6945bcfd18273c5096bc2b364e314e42c85c78cd\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPermit2\\n * @dev Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.\\n */\\ninterface IPermit2 {\\n    /**\\n     * @dev Struct for holding permit details.\\n     * @param token ERC20 token address for which the permit is issued.\\n     * @param amount The maximum amount allowed to spend.\\n     * @param expiration Timestamp until which the permit is valid.\\n     * @param nonce An incrementing value for each signature, unique per owner, token, and spender.\\n     */\\n    struct PermitDetails {\\n        address token;\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @dev Struct for a single token allowance permit.\\n     * @param details Permit details including token, amount, expiration, and nonce.\\n     * @param spender Address authorized to spend the tokens.\\n     * @param sigDeadline Deadline for the permit signature, ensuring timeliness of the permit.\\n     */\\n    struct PermitSingle {\\n        PermitDetails details;\\n        address spender;\\n        uint256 sigDeadline;\\n    }\\n\\n    /**\\n     * @dev Struct for packed allowance data to optimize storage.\\n     * @param amount Amount allowed.\\n     * @param expiration Permission expiry timestamp.\\n     * @param nonce Unique incrementing value for tracking allowances.\\n     */\\n    struct PackedAllowance {\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @notice Executes a token transfer from one address to another.\\n     * @param user The token owner's address.\\n     * @param spender The address authorized to spend the tokens.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token being transferred.\\n     */\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    /**\\n     * @notice Issues a permit for spending tokens via a signed authorization.\\n     * @param owner The token owner's address.\\n     * @param permitSingle Struct containing the permit details.\\n     * @param signature The signature proving the owner authorized the permit.\\n     */\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    /**\\n     * @notice Retrieves the allowance details between a token owner and spender.\\n     * @param user The token owner's address.\\n     * @param token The token address.\\n     * @param spender The spender's address.\\n     * @return The packed allowance details.\\n     */\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x0e8375c63b72926e9073c5712fd6a181dce58ee155d73c57e34febace7949bfa\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @dev Interface for wrapper as WETH-like token.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @notice Emitted when Ether is deposited to get wrapper tokens.\\n     */\\n    event Deposit(address indexed dst, uint256 wad);\\n\\n    /**\\n     * @notice Emitted when wrapper tokens is withdrawn as Ether.\\n     */\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /**\\n     * @notice Deposit Ether to get wrapper tokens.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw wrapped tokens as Ether.\\n     * @param amount Amount of wrapped tokens to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x32989b79850e8a1ac6aab74878de2883f9537656ca06910dc0ae76833cc446e2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title AddressArray\\n * @notice Implements a dynamic array of addresses using a mapping for storage efficiency, with the array length stored at index 0.\\n * @dev This library provides basic functionalities such as push, pop, set, and retrieval of addresses in a storage-efficient manner.\\n */\\nlibrary AddressArray {\\n    /**\\n     * @dev Error thrown when attempting to access an index outside the bounds of the array.\\n     */\\n    error IndexOutOfBounds();\\n\\n    /**\\n     * @dev Error thrown when attempting to pop an element from an empty array.\\n     */\\n    error PopFromEmptyArray();\\n\\n    /**\\n     * @dev Error thrown when the output array provided for getting the list of addresses is too small.\\n     */\\n    error OutputArrayTooSmall();\\n\\n    uint256 internal constant _ZERO_ADDRESS = 0x8000000000000000000000000000000000000000000000000000000000000000; // Next tx gas optimization\\n    uint256 internal constant _LENGTH_MASK  = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\\n    uint256 internal constant _ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    uint256 internal constant _ONE_LENGTH   = 0x0000000000000000000000010000000000000000000000000000000000000000;\\n    uint256 internal constant _LENGTH_OFFSET = 160;\\n\\n    /**\\n     * @dev Struct containing the raw mapping used to store the addresses and the array length.\\n     */\\n    struct Data {\\n        uint256[1 << 32] _raw;\\n    }\\n\\n    /**\\n     * @notice Returns the number of addresses stored in the array.\\n     * @param self The instance of the Data struct.\\n     * @return The number of addresses.\\n     */\\n    function length(Data storage self) internal view returns (uint256) {\\n        return (self._raw[0] & _LENGTH_MASK) >> _LENGTH_OFFSET;\\n    }\\n\\n    /**\\n     * @notice Retrieves the address at a specified index in the array.\\n     * @param self The instance of the Data struct.\\n     * @param i The index to retrieve the address from.\\n     * @return The address stored at the specified index.\\n     */\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        if (i >= 1 << 32) revert IndexOutOfBounds();\\n        return address(uint160(self._raw[i] & _ADDRESS_MASK));\\n    }\\n\\n    /**\\n     * @notice Returns all addresses in the array from storage.\\n     * @param self The instance of the Data struct.\\n     * @return output Array containing all the addresses.\\n     */\\n    function get(Data storage self) internal view returns (address[] memory output) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n            let fst := and(lengthAndFirst, _ADDRESS_MASK)\\n\\n            // Allocate array\\n            output := mload(0x40)\\n            mstore(0x40, add(output, mul(0x20, add(1, len))))\\n            mstore(output, len)\\n\\n            if len {\\n                // Copy first element and then the rest in a loop\\n                let ptr := add(output, 0x20)\\n                mstore(ptr, fst)\\n                for { let i := 1 } lt(i, len) { i:= add(i, 1) } {\\n                    let item := and(sload(add(self.slot, i)), _ADDRESS_MASK)\\n                    mstore(add(ptr, mul(0x20, i)), item)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Copies the addresses into the provided output array.\\n     * @param self The instance of the Data struct.\\n     * @param input The array to copy the addresses into.\\n     * @return output The provided output array filled with addresses.\\n     */\\n    function get(Data storage self, address[] memory input) internal view returns (address[] memory output) {\\n        output = input;\\n        bytes4 err = OutputArrayTooSmall.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n            let fst := and(lengthAndFirst, _ADDRESS_MASK)\\n\\n            if gt(len, mload(input)) {\\n                mstore(0, err)\\n                revert(0, 4)\\n            }\\n            if len {\\n                // Copy first element and then the rest in a loop\\n                let ptr := add(output, 0x20)\\n                mstore(ptr, fst)\\n                for { let i := 1 } lt(i, len) { i:= add(i, 1) } {\\n                    let item := and(sload(add(self.slot, i)), _ADDRESS_MASK)\\n                    mstore(add(ptr, mul(0x20, i)), item)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds an address to the end of the array.\\n     * @param self The instance of the Data struct.\\n     * @param account The address to add.\\n     * @return res The new length of the array.\\n     */\\n    function push(Data storage self, address account) internal returns (uint256 res) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n\\n            switch len\\n            case 0 {\\n                sstore(self.slot, or(account, _ONE_LENGTH))\\n            }\\n            default {\\n                sstore(self.slot, add(lengthAndFirst, _ONE_LENGTH))\\n                sstore(add(self.slot, len), or(account, _ZERO_ADDRESS))\\n            }\\n            res := add(len, 1)\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the last address from the array.\\n     * @param self The instance of the Data struct.\\n     */\\n    function pop(Data storage self) internal {\\n        bytes4 err = PopFromEmptyArray.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n\\n            switch len\\n            case 0 {\\n                mstore(0, err)\\n                revert(0, 4)\\n            }\\n            case 1 {\\n                sstore(self.slot, _ZERO_ADDRESS)\\n            }\\n            default {\\n                sstore(self.slot, sub(lengthAndFirst, _ONE_LENGTH))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Array pop back operation for storage `self` that returns popped element.\\n     * @param self The instance of the Data struct.\\n     * @return res The address that was removed from the array.\\n     */\\n    function popGet(Data storage self) internal returns(address res) {\\n        bytes4 err = PopFromEmptyArray.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n\\n            switch len\\n            case 0 {\\n                mstore(0, err)\\n                revert(0, 4)\\n            }\\n            case 1 {\\n                res := and(lengthAndFirst, _ADDRESS_MASK)\\n                sstore(self.slot, _ZERO_ADDRESS)\\n            }\\n            default {\\n                res := and(sload(add(self.slot, sub(len, 1))), _ADDRESS_MASK)\\n                sstore(self.slot, sub(lengthAndFirst, _ONE_LENGTH))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address at a specified index in the array.\\n     * @param self The instance of the Data struct.\\n     * @param index The index at which to set the address.\\n     * @param account The address to set at the specified index.\\n     */\\n    function set(Data storage self, uint256 index, address account) internal {\\n        bytes4 err = IndexOutOfBounds.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let lengthAndFirst := sload(self.slot)\\n            let len := shr(_LENGTH_OFFSET, and(lengthAndFirst, _LENGTH_MASK))\\n            let fst := and(lengthAndFirst, _ADDRESS_MASK)\\n\\n            if iszero(lt(index, len)) {\\n                mstore(0, err)\\n                revert(0, 4)\\n            }\\n\\n            switch index\\n            case 0 {\\n                sstore(self.slot, or(xor(lengthAndFirst, fst), account))\\n            }\\n            default {\\n                sstore(add(self.slot, index), or(account, _ZERO_ADDRESS))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Erase length of the array.\\n     * @param self The instance of the Data struct.\\n     */\\n    function erase(Data storage self) internal {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            sstore(self.slot, _ADDRESS_MASK)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff5d5e48795347ab12f83945d9dc7c18b2bce15677bbacc1154a7dc1a6a981\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/BySigTraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BySigTraits\\n * @notice Provides utility functions for decoding and working with `BySig` call traits encoded in a single `uint256` value.\\n * @dev This library allows for the compact representation and manipulation of various call traits such as nonce type,\\n * deadline, relayer allowance, and nonce value using bit manipulation techniques.\\n */\\nlibrary BySigTraits {\\n    /// @notice Thrown when an invalid nonce type is encountered.\\n    error WrongNonceType();\\n\\n    /**\\n     * @dev Represents the encoded traits of a call, packed within a single `uint256`.\\n     * The encoding is as follows:\\n     * [255-254] -   2 bits - Nonce type (e.g., Account, Selector, Unique).\\n     * [253-248] -   6 bits - Reserved for future use.\\n     * [247-208] -  40 bits - Deadline (Unix timestamp at which the call becomes invalid).\\n     * [207-128] -  80 bits - Relayer address's lower bits. A value of 0 indicates that any relayer is allowed.\\n     * [127-0]   - 128 bits - Nonce value (used for ensuring calls are executed in order and not replayed).\\n     */\\n    type Value is uint256;\\n\\n    enum NonceType {\\n        Account,\\n        Selector,\\n        Unique\\n    }\\n\\n    uint256 constant internal TYPE_BIT_SHIFT = 254;\\n    uint256 constant internal DEADLINE_BIT_SHIFT = 208;\\n    uint256 constant internal DEADLINE_BIT_MASK = (1 << 40) - 1;\\n    uint256 constant internal RELAYER_BIT_SHIFT = 128;\\n    uint256 constant internal RELAYER_BIT_MASK = (1 << 80) - 1;\\n    uint256 constant internal NONCE_MASK = (1 << 128) - 1;\\n\\n    /**\\n     * @notice Decodes and returns the nonce type from the traits.\\n     * @param traits The encoded call traits.\\n     * @return The decoded nonce type as an enum.\\n     */\\n    function nonceType(Value traits) internal pure returns(NonceType) {\\n        uint256 _type = Value.unwrap(traits) >> TYPE_BIT_SHIFT;\\n        if (_type > uint256(NonceType.Unique)) revert WrongNonceType();\\n        return NonceType(_type);\\n    }\\n\\n    /**\\n     * @notice Decodes and returns the deadline from the traits.\\n     * @param traits The encoded call traits.\\n     * @return The decoded deadline timestamp.\\n     */\\n    function deadline(Value traits) internal pure returns(uint256) {\\n        return (Value.unwrap(traits) >> DEADLINE_BIT_SHIFT) & DEADLINE_BIT_MASK;\\n    }\\n\\n    /**\\n     * @notice Checks if a given relayer address is allowed to relay the call based on the traits.\\n     * @param traits The encoded call traits.\\n     * @param relayer The address of the relayer to check.\\n     * @return True if the relayer is allowed, false otherwise.\\n     */\\n    function isRelayerAllowed(Value traits, address relayer) internal pure returns(bool) {\\n        uint256 relayerBits = (Value.unwrap(traits) >> RELAYER_BIT_SHIFT) & RELAYER_BIT_MASK;\\n        return relayerBits == 0 || (uint160(relayer) & RELAYER_BIT_MASK) == relayerBits;\\n    }\\n\\n    /**\\n     * @notice Decodes and returns the nonce value from the traits.\\n     * @param traits The encoded call traits.\\n     * @return The decoded nonce value.\\n     */\\n    function nonce(Value traits) internal pure returns(uint256) {\\n        return Value.unwrap(traits) & NONCE_MASK;\\n    }\\n}\\n\",\"keccak256\":\"0x5e25d7b50391910280cb897827efa7b588c7d1985912ee8e3d643344959e73ac\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title ECDSA signature operations\\n * @notice Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.\\n */\\nlibrary ECDSA {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\\n    uint256 private constant _COMPACT_S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant _COMPACT_V_SHIFT = 255;\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature.\\n     * @dev Recovers the address that has signed a hash with `(v, r, s)` signature.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), v)\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature using `r` and `vs` components.\\n     * @dev Recovers the address that has signed a hash with `r` and `vs`, where `vs` combines `v` and `s`.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let s := and(vs, _COMPACT_S_MASK)\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from a hash and a signature.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param signature The full signature from which the signer will be recovered.\\n     * @return signer The address of the signer.\\n     */\\n    /// @dev WARNING!!!\\n    /// There is a known signature malleability issue with two representations of signatures!\\n    /// Even though this function is able to verify both standard 65-byte and compact 64-byte EIP-2098 signatures\\n    /// one should never use raw signatures for any kind of invalidation logic in their code.\\n    /// As the standard and compact representations are interchangeable any invalidation logic that relies on\\n    /// signature uniqueness will get rekt.\\n    /// More info: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\\n            switch signature.length\\n            case 65 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\\n            }\\n            case 64 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\\n                mstore(add(ptr, 0x60), and(vs, _COMPACT_S_MASK))\\n            }\\n            default {\\n                ptr := 0\\n            }\\n\\n            if ptr {\\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\\n                    // memory[ptr:ptr+0x20] = (hash)\\n                    mstore(ptr, hash)\\n\\n                    mstore(0, 0)\\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                    signer := mload(0)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to verify.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, v, r, s) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a given hash, attempting to recover the signer's address or validates it using EIP-1271 for 65-byte signatures.\\n     * @dev Attempts to recover the signer's address from the signature. If the address is a contract, checks if the signature is valid according to EIP-1271.\\n     * @param signer The expected signer's address.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid, false otherwise.\\n     */\\n    function recoverOrIsValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature65(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to validate.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), signature.length)\\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), s)\\n            mstore8(add(ptr, 0xa4), v)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 64)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), vs)\\n            if staticcall(gas(), signer, ptr, 0xa4, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies if a 65-byte signature is valid for a given hash, according to EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` (recovery id) and `s` component of the signature, packed into the last 32 bytes.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), and(vs, _COMPACT_S_MASK))\\n            mstore8(add(ptr, 0xa4), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates a hash compatible with Ethereum's signed message format.\\n     * @dev Prepends the hash with Ethereum's message prefix before hashing it.\\n     * @param hash The hash of the data to sign.\\n     * @return res The Ethereum signed message hash.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\\n        // 32 is the length in bytes of hash, enforced by the type signature above\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n            mstore(28, hash)\\n            res := keccak256(0, 60)\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates an EIP-712 compliant hash.\\n     * @dev Encodes the domain separator and the struct hash according to EIP-712.\\n     * @param domainSeparator The EIP-712 domain separator.\\n     * @param structHash The EIP-712 struct hash.\\n     * @return res The EIP-712 compliant hash.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \\\"\\\\x19\\\\x01\\\"\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            res := keccak256(ptr, 66)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6e6265af95c2b68cd64a7b59049005ed994fc1706682636cf8bb22246b033b0\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RevertReasonForwarder\\n * @notice Provides utilities for forwarding and retrieving revert reasons from failed external calls.\\n */\\nlibrary RevertReasonForwarder {\\n    /**\\n     * @dev Forwards the revert reason from the latest external call.\\n     * This method allows propagating the revert reason of a failed external call to the caller.\\n     */\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the revert reason from the latest external call.\\n     * This method enables capturing the revert reason of a failed external call for inspection or processing.\\n     * @return reason The latest external call revert reason.\\n     */\\n    function reReason() internal pure returns (bytes memory reason) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            reason := mload(0x40)\\n            let length := returndatasize()\\n            mstore(reason, length)\\n            returndatacopy(add(reason, 0x20), 0, length)\\n            mstore(0x40, add(reason, add(0x20, length)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d8c950981f4da44ae1b01d9e597c4f99377797ec7ff7b1ef9648e4ecc1baa4\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IERC7597Permit.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, IERC7597Permit and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        bytes4 erc7597PermitSelector = IERC7597Permit.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Dynamic length\\n            default {\\n                mstore(ptr, erc7597PermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC7597Permit.permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature)\\n                success := call(gas(), token, 0, ptr, add(permit.length, 4), 0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5010526a91c8fe876a0959e952186156a0c8f1888bf392eb406a93f449b2716\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/mixins/BySig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { ECDSA } from \\\"../libraries/ECDSA.sol\\\";\\nimport { BySigTraits } from \\\"../libraries/BySigTraits.sol\\\";\\nimport { AddressArray } from \\\"../libraries/AddressArray.sol\\\";\\n\\n/**\\n * @title BySig\\n * @notice Mixin that provides signature-based accessibility to every external method of the smart contract.\\n * @dev Inherit your contract from this mixin and use `_msgSender()` instead of `msg.sender` everywhere.\\n */\\nabstract contract BySig is Context, EIP712 {\\n    using Address for address;\\n    using BySigTraits for BySigTraits.Value;\\n    using AddressArray for AddressArray.Data;\\n\\n    /// @notice Emitted when the nonce used for a call is incorrect.\\n    error WrongNonce();\\n    /// @notice Emitted when a call is made by an unauthorized relayer.\\n    error WrongRelayer();\\n    /// @notice Emitted when the signature provided for a call does not match the expected signature.\\n    error WrongSignature();\\n    /// @notice Emitted when a call is attempted after the specified deadline has passed.\\n    error DeadlineExceeded();\\n\\n    /**\\n     * @notice Represents a call to be signed and executed.\\n     * @dev This structure encapsulates all necessary information for executing a signed call,\\n     * including traits that specify how the call should be authorized and the actual data to be executed.\\n     * @param traits An instance of `Value` from the `BySigTraits` library, specifying the nonce type,\\n     * nonce value, deadline, whether a relayer is allowed for this call and another params, see {BySigTraits-Value}.\\n     * These traits define the authorization strategy and replay protection for the signed call.\\n     * @param data The encoded function call data to be executed. This should be generated, for instance,\\n     * using `encodeFunctionData` of the target contract's interface, containing the function signature and arguments.\\n     * It represents the exact action to be taken, including which function to call of which contract and with what parameters.\\n     */\\n    struct SignedCall {\\n        BySigTraits.Value traits;\\n        bytes data;\\n    }\\n\\n    bytes32 constant public SIGNED_CALL_TYPEHASH = keccak256(\\\"SignedCall(uint256 traits,bytes data)\\\");\\n\\n    // Various nonces used for signature verification and replay protection.\\n    AddressArray.Data /* transient */ private _msgSenders;\\n    mapping(address => uint256) private _bySigAccountNonces;\\n    mapping(address => mapping(bytes4 => uint256)) private _bySigSelectorNonces;\\n    mapping(address => mapping(uint256 => uint256)) private _bySigUniqueNonces;\\n\\n    /**\\n     * @notice Retrieves the account nonce for the specified account.\\n     * @param account The address of the account.\\n     * @return The current nonce for the account.\\n     */\\n    function bySigAccountNonces(address account) public view returns(uint256) {\\n        return _bySigAccountNonces[account];\\n    }\\n\\n    /**\\n     * @notice Retrieves the selector nonce for a specific account and selector.\\n     * @param account The address of the account.\\n     * @param selector The selector for which the nonce is being retrieved.\\n     * @return The current nonce for the specified selector and account.\\n     */\\n    function bySigSelectorNonces(address account, bytes4 selector) public view returns(uint256) {\\n        return _bySigSelectorNonces[account][selector];\\n    }\\n\\n    /**\\n     * @notice Checks if a unique nonce has already been used for a given account.\\n     * @dev This function divides the nonce space into slots to efficiently manage storage.\\n     * A unique nonce is considered used if its corresponding bit in the storage slot is set.\\n     * @param account The address of the account for which the nonce is being checked.\\n     * @param nonce The unique nonce to check. It is divided into slots for storage efficiency.\\n     * @return bool True if the nonce has been used, false otherwise.\\n     */\\n    function bySigUniqueNonces(address account, uint256 nonce) public view returns(bool) {\\n        return (_bySigUniqueNonces[account][nonce >> 8] & (1 << (nonce & 0xff))) != 0;\\n    }\\n\\n    /**\\n     * @notice Retrieves the storage slot value for a given account and nonce slot.\\n     * @dev This function allows access to the raw storage slot used to track used nonces, divided into slots for efficiency.\\n     * Each bit in the returned value represents the used/unused status of a nonce within that slot.\\n     * @param account The address of the account for which the nonce slot is being retrieved.\\n     * @param nonce The nonce for which the storage slot is being retrieved. The function calculates the correct slot based on this value.\\n     * @return uint256 The raw value of the storage slot that tracks the used/unused status of nonces in the specified slot for the given account.\\n     */\\n    function bySigUniqueNoncesSlot(address account, uint256 nonce) public view returns(uint256) {\\n        return _bySigUniqueNonces[account][nonce >> 8];\\n    }\\n\\n    /**\\n     * @notice Hashes a `SignedCall` struct using EIP-712 typed data hashing rules.\\n     * @param sig The `SignedCall` structure containing the call traits and data.\\n     * @return The EIP-712 compliant hash of the `SignedCall` struct.\\n     */\\n    function hashBySig(SignedCall calldata sig) public view returns(bytes32) {\\n        return _hashTypedDataV4(\\n            keccak256(abi.encode(\\n                SIGNED_CALL_TYPEHASH,\\n                sig.traits,\\n                keccak256(sig.data)\\n            ))\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes a signature-authorized call on behalf of the signer.\\n     * @param signer The address of the signer authorizing the call.\\n     * @param sig The `SignedCall` structure containing the call traits and data.\\n     * @param signature The signature authorizing the call.\\n     * @return ret The bytes result of the executed call.\\n     */\\n    function bySig(address signer, SignedCall calldata sig, bytes calldata signature) public payable returns(bytes memory ret) {\\n        if (block.timestamp > sig.traits.deadline()) revert DeadlineExceeded(); // solhint-disable-line not-rely-on-time\\n        // Using _msgSender() in the next line allows private relay execution redelegation\\n        if (!sig.traits.isRelayerAllowed(_msgSender())) revert WrongRelayer();\\n        if (!_useNonce(signer, sig.traits, sig.data)) revert WrongNonce();\\n        if (!ECDSA.recoverOrIsValidSignature(signer, hashBySig(sig), signature)) revert WrongSignature();\\n\\n        _msgSenders.push(signer);\\n        ret = address(this).functionDelegateCall(sig.data);\\n        _msgSenders.pop();\\n    }\\n\\n    /**\\n     * @notice Executes a call sponsored by the signer (for instance, by fee), intended to be used,\\n     * for instance, in conjunction with `bySig`.\\n     * @dev Facilitates execution of a delegate call where the signer covers the transaction fees.\\n     * Requires `_chargeSigner` to be overridden to define the fee transfer logic.\\n     * @param token Address of the token used for sponsored logic (for instance, for fee payment).\\n     * @param amount amount value used for sponsored logic (for instance, fee amount to be charged to the signer).\\n     * @param data Encoded function call to execute.\\n     * @param extraData Additional data for sponsored process in `_chargeSigner` method.\\n     * @return ret Result of the executed call.\\n     */\\n    function sponsoredCall(address token, uint256 amount, bytes calldata data, bytes calldata extraData) public payable returns(bytes memory ret) {\\n        ret = address(this).functionDelegateCall(data);\\n        _chargeSigner(_msgSender(), msg.sender, token, amount, extraData);\\n    }\\n\\n    /**\\n     * @dev Placeholder for custom logic to charge the signer for sponsored calls.\\n     * Override this method to implement sponsored call accounting.\\n     * Example imeplementation:\\n     *\\n     * function _chargeSigner(address signer, address relayer, address token, uint256 amount, bytes calldata extraData) internal override {\\n     *    balances[token][signer] -= amount;\\n     *    balances[token][relayer] += amount;\\n     * }\\n     *\\n     * @param signer The address of the signer being charged.\\n     * @param relayer The address of the relayer facilitating the call.\\n     * @param token The token address used for charging.\\n     * @param amount The amount to be charged.\\n     * @param extraData Additional data for sponsored call accounting and executions.\\n     */\\n    function _chargeSigner(address signer, address relayer, address token, uint256 amount, bytes calldata extraData) internal virtual;\\n\\n    /**\\n     * @notice Advances the account nonce for the sender by a specified amount.\\n     * @param advance The amount by which to advance the nonce.\\n     */\\n    function useBySigAccountNonce(uint32 advance) public {\\n        _bySigAccountNonces[_msgSender()] += advance;\\n    }\\n\\n    /**\\n     * @notice Advances the selector nonce for the sender and a specific selector by a specified amount.\\n     * @param selector The selector for which the nonce is being advanced.\\n     * @param advance The amount by which to advance the nonce.\\n     */\\n    function useBySigSelectorNonce(bytes4 selector, uint32 advance) public {\\n        _bySigSelectorNonces[_msgSender()][selector] += advance;\\n    }\\n\\n    /**\\n     * @notice Marks a unique nonce as used for the sender.\\n     * @param nonce The nonce being marked as used.\\n     */\\n    function useBySigUniqueNonce(uint256 nonce) public {\\n        _bySigUniqueNonces[_msgSender()][nonce >> 8] |= 1 << (nonce & 0xff);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the message sender, replacing the traditional `msg.sender` with a potentially signed sender.\\n     * @return The address of the message sender.\\n     */\\n    function _msgSender() internal view override virtual returns (address) {\\n        uint256 length = _msgSenders.length();\\n        if (length == 0) {\\n            return super._msgSender();\\n        }\\n        return _msgSenders.at(length - 1);\\n    }\\n\\n    function _useNonce(address signer, BySigTraits.Value traits, bytes calldata data) private returns(bool) {\\n        BySigTraits.NonceType nonceType = traits.nonceType();\\n        uint256 nonce = traits.nonce();\\n        if (nonceType == BySigTraits.NonceType.Account) {\\n            return nonce == _bySigAccountNonces[signer]++;\\n        }\\n        if (nonceType == BySigTraits.NonceType.Selector) {\\n            return nonce == _bySigSelectorNonces[signer][bytes4(data)]++;\\n        }\\n        if (nonceType == BySigTraits.NonceType.Unique) {\\n            mapping(uint256 => uint256) storage map = _bySigUniqueNonces[signer];\\n            uint256 cache = map[nonce >> 8];\\n            map[nonce >> 8] |= 1 << (nonce & 0xff);\\n            return cache != map[nonce >> 8];\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xcc671523fc952ebb9642cd22ac386e6c6fd43be12c48b8dbf7b8fade82c65f7b\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/mixins/PermitAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"../libraries/SafeERC20.sol\\\";\\n\\n/**\\n * @title PermitAndCall\\n * @dev Abstract contract to support permit and action execution in a single transaction.\\n * Allows tokens that implement EIP-2612 permits, DAI-like permits, USDC-like permits and Permit2 to be approved and spent in a single transaction.\\n */\\nabstract contract PermitAndCall {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Executes a permit for an ERC20 token and then a specified action in a single transaction.\\n     * @param permit ERC20 token address (20 bytes) concatinated with the permit data, allowing this contract to spend the token.\\n     * Format: [token address (20 bytes)][permit data]\\n     * @param action The data representing the action to be executed after the permit.\\n     */\\n    function permitAndCall(bytes calldata permit, bytes calldata action) external payable {\\n        IERC20(address(bytes20(permit))).tryPermit(permit[20:]);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, action.offset, action.length)\\n            let success := delegatecall(gas(), address(), ptr, action.length, 0, 0)\\n            returndatacopy(ptr, 0, returndatasize())\\n            switch success\\n            case 0 {\\n                revert(ptr, returndatasize())\\n            }\\n            default {\\n                return(ptr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01bd167cff1ee3c3346c23fdee3e1b737afc79d9f6fdecf9d857bc07e68e6493\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Papaya.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { SafeERC20, IERC20 } from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\r\\nimport { EnumerableMap } from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport { PermitAndCall } from \\\"@1inch/solidity-utils/contracts/mixins/PermitAndCall.sol\\\";\\r\\nimport { BySig, EIP712 } from \\\"@1inch/solidity-utils/contracts/mixins/BySig.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { SignedMath } from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { Multicall } from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPapaya.sol\\\";\\r\\nimport \\\"./library/UserLib.sol\\\";\\r\\n\\r\\n// NOTE: Default settings for projectId are stored in projectAdmin[projectId].settings\\r\\ncontract Papaya is IPapaya, EIP712, Ownable, PermitAndCall, BySig, Multicall {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using UserLib for UserLib.User;\\r\\n    using Address for address payable;\\r\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\r\\n\\r\\n    uint256 public constant FLOOR = 10000;\\r\\n    uint256 public constant MAX_PROTOCOL_FEE = FLOOR * 20 / 100;\\r\\n\\r\\n    uint256 public constant APPROX_LIQUIDATE_GAS = 140000;\\r\\n    uint256 public constant APPROX_SUBSCRIPTION_GAS = 10000;\\r\\n    uint8 public constant SUBSCRIPTION_THRESHOLD = 100;\\r\\n\\r\\n    AggregatorV3Interface public immutable COIN_PRICE_FEED;\\r\\n    AggregatorV3Interface public immutable TOKEN_PRICE_FEED;\\r\\n\\r\\n    IERC20 public immutable TOKEN;\\r\\n    uint256 public immutable DECIMALS_SCALE;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    address[] public projectOwners;\\r\\n    mapping(address account => UserLib.User) public users;\\r\\n    mapping(address account => EnumerableMap.AddressToUintMap) private _subscriptions;\\r\\n    // TODO: v2 should allow multiple subscriptions among 2 users by casting uint256 to storage slot of EnumerableSet\\r\\n\\r\\n    mapping(uint256 projectId => Settings) public defaultSettings;\\r\\n    mapping(uint256 projectId => mapping(address account => Settings)) public userSettings;\\r\\n\\r\\n    modifier onlyValidProjectId(uint256 projectId) {\\r\\n        if (projectId > projectOwners.length) revert InvalidProjectId(projectId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProjectAdmin(uint256 projectId) {\\r\\n        if (projectOwners[projectId] != _msgSender()) revert AccessDenied(projectId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyValidSettings(Settings calldata settings) {\\r\\n        if (settings.projectFee > MAX_PROTOCOL_FEE) revert WrongPercent();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotSender(address account) {\\r\\n        if (_msgSender() == account) revert NotLegal();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address CHAIN_PRICE_FEED_,\\r\\n        address TOKEN_PRICE_FEED_,\\r\\n        address TOKEN_\\r\\n    )\\r\\n        Ownable(_msgSender())\\r\\n        EIP712(type(Papaya).name, \\\"1\\\")\\r\\n    {\\r\\n        COIN_PRICE_FEED = AggregatorV3Interface(CHAIN_PRICE_FEED_);\\r\\n        TOKEN_PRICE_FEED = AggregatorV3Interface(TOKEN_PRICE_FEED_);\\r\\n        TOKEN = IERC20(TOKEN_);\\r\\n        DECIMALS_SCALE = 10 ** (18 - IERC20Metadata(TOKEN_).decimals());\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return string.concat(\\\"Streaming \\\", IERC20Metadata(address(TOKEN)).name());\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return string.concat(\\\"pp\\\", IERC20Metadata(address(TOKEN)).symbol());\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\r\\n        if (address(token) == address(0)) {\\r\\n            payable(_msgSender()).sendValue(amount);\\r\\n        } else {\\r\\n            if (token == TOKEN && amount > TOKEN.balanceOf(address(this)) - totalSupply / DECIMALS_SCALE) {\\r\\n                revert UserLib.InsufficialBalance();\\r\\n            }\\r\\n            token.safeTransfer(owner(), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimProjectId() external {\\r\\n        emit ProjectIdClaimed(projectOwners.length, _msgSender());\\r\\n\\r\\n        projectOwners.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    function setDefaultSettings(Settings calldata settings, uint256 projectId)\\r\\n        external\\r\\n        onlyProjectAdmin(projectId)\\r\\n        onlyValidProjectId(projectId)\\r\\n        onlyValidSettings(settings)\\r\\n    {\\r\\n        defaultSettings[projectId] = settings;\\r\\n\\r\\n        emit SetDefaultSettings(projectId, settings.projectFee);\\r\\n    }\\r\\n\\r\\n    function setSettingsForUser(address user, Settings calldata settings, uint256 projectId)\\r\\n        external\\r\\n        onlyProjectAdmin(projectId)\\r\\n        onlyValidProjectId(projectId)\\r\\n        onlyValidSettings(settings)\\r\\n    {\\r\\n        userSettings[projectId][user] = settings;\\r\\n        emit SetSettingsForUser(projectId, user, settings.projectFee);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return uint256(SignedMath.max(users[account].balanceOf(), int(0)));\\r\\n    }\\r\\n\\r\\n    function allProjectOwners() external view returns(address[] memory) {\\r\\n        return projectOwners;\\r\\n    }\\r\\n\\r\\n    function subscriptions(address from, address to) external view returns (bool, uint256 encodedRates) {\\r\\n        return _subscriptions[from].tryGet(to);\\r\\n    }\\r\\n\\r\\n    function allSubscriptions(address from) external view returns(address[] memory to, uint256[] memory encodedRates) {\\r\\n        EnumerableMap.AddressToUintMap storage user_subscriptions = _subscriptions[from];\\r\\n        to = user_subscriptions.keys();\\r\\n        encodedRates = new uint256[](to.length);\\r\\n\\r\\n        for (uint256 i; i < to.length; i++) {\\r\\n            encodedRates[i] = user_subscriptions.get(to[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 amount, bool isPermit2) external {\\r\\n        _deposit(TOKEN, _msgSender(), _msgSender(), amount, isPermit2);\\r\\n    }\\r\\n\\r\\n    function depositFor(uint256 amount, address to, bool isPermit2) external {\\r\\n        _deposit(TOKEN, _msgSender(), to, amount, isPermit2);\\r\\n    }\\r\\n\\r\\n    function _deposit(IERC20 token, address from, address to, uint256 amount, bool usePermit2) internal virtual {\\r\\n        _update(address(0), to, amount * DECIMALS_SCALE);\\r\\n\\r\\n        if(usePermit2) {\\r\\n            token.safeTransferFromPermit2(from, address(this), amount);\\r\\n        } else {\\r\\n            token.safeTransferFrom(from, address(this), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external {\\r\\n        _withdraw(TOKEN, _msgSender(), _msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTo(address to, uint256 amount) external {\\r\\n        _withdraw(TOKEN, _msgSender(), to, amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(IERC20 token, address from, address to, uint256 amount) internal {\\r\\n        //Erasing non significant decimals\\r\\n        _update(from, address(0), amount / DECIMALS_SCALE * DECIMALS_SCALE);\\r\\n        token.safeTransfer(to, amount / DECIMALS_SCALE);\\r\\n    }\\r\\n\\r\\n    function pay(address receiver, uint256 amount) external {\\r\\n        _update(_msgSender(), receiver, amount);\\r\\n    }\\r\\n\\r\\n    function subscribe(address author, uint96 subscriptionRate, uint256 projectId)\\r\\n        external\\r\\n        onlyValidProjectId(projectId)\\r\\n        onlyNotSender(author)\\r\\n    {\\r\\n        (bool success, uint256 encodedRates) = _subscriptions[_msgSender()].tryGet(author);\\r\\n        if (success) {\\r\\n            // If already subscribed, unsubscribe to be able to subscribe again\\r\\n            _unsubscribeEffects(_msgSender(), author, encodedRates);\\r\\n        }\\r\\n\\r\\n        if (_subscriptions[_msgSender()].length() == SUBSCRIPTION_THRESHOLD) revert ExcessOfSubscriptions();\\r\\n\\r\\n        Settings storage settings = userSettings[projectId][author];\\r\\n        if (settings.initialized == false) {\\r\\n            settings = defaultSettings[projectId];\\r\\n        }\\r\\n\\r\\n        uint96 incomeRate = uint96(subscriptionRate * (FLOOR - settings.projectFee) / FLOOR);\\r\\n        _subscribeEffects(_msgSender(), author, incomeRate, subscriptionRate, projectId);\\r\\n    }\\r\\n\\r\\n    function unsubscribe(address author) external {\\r\\n        (bool success, uint256 encodedRates) = _subscriptions[_msgSender()].tryGet(author);\\r\\n        if (!success) revert NotSubscribed();\\r\\n\\r\\n        _unsubscribeEffects(_msgSender(), author, encodedRates);\\r\\n    }\\r\\n\\r\\n    function liquidate(address account) external onlyNotSender(account) {\\r\\n        UserLib.User storage user = users[account];\\r\\n        if (!user.isLiquidatable(_liquidationThreshold(account))) revert NotLiquidatable();\\r\\n\\r\\n        EnumerableMap.AddressToUintMap storage user_subscriptions = _subscriptions[account];\\r\\n        for (uint256 i = user_subscriptions.length(); i > 0; i--) {\\r\\n            (address author, uint256 encodedRates) = user_subscriptions.at(i - 1);\\r\\n            _unsubscribeEffects(account, author, encodedRates);\\r\\n        }\\r\\n        int256 balance = user.drainBalance(users[_msgSender()]);\\r\\n        emit Transfer(account, _msgSender(), uint256(SignedMath.max(int256(0), balance)));\\r\\n\\r\\n        emit Liquidated(account, _msgSender());\\r\\n    }\\r\\n\\r\\n    function _liquidationThreshold(address user) internal view returns (int256) {\\r\\n        (, int256 tokenPrice, , , ) = TOKEN_PRICE_FEED.latestRoundData();\\r\\n        (, int256 coinPrice, , , ) = COIN_PRICE_FEED.latestRoundData();\\r\\n\\r\\n        uint256 expectedNativeAssetCost = _gasPrice() *\\r\\n            (APPROX_LIQUIDATE_GAS + APPROX_SUBSCRIPTION_GAS * _subscriptions[user].length());\\r\\n\\r\\n        uint256 executionPrice = expectedNativeAssetCost * uint256(coinPrice);\\r\\n\\r\\n        return int256(executionPrice) / tokenPrice;\\r\\n    }\\r\\n\\r\\n    function _subscribeEffects(address user, address author, uint96 incomeRate, uint96 outgoingRate, uint256 projectId) internal {\\r\\n        uint256 encodedRates = _encodeRates(incomeRate, outgoingRate, projectId);\\r\\n        users[user].increaseOutgoingRate(outgoingRate, _liquidationThreshold(user));\\r\\n        users[author].increaseIncomeRate(incomeRate);\\r\\n        users[projectOwners[projectId]].increaseIncomeRate(outgoingRate - incomeRate);\\r\\n        _subscriptions[user].set(author, encodedRates);\\r\\n\\r\\n        emit StreamCreated(user, author, encodedRates);\\r\\n    }\\r\\n\\r\\n    function _unsubscribeEffects(address user, address author, uint256 encodedRates) internal {\\r\\n        (uint96 incomeRate, uint96 outgoingRate, uint256 projectId) = _decodeRates(encodedRates);\\r\\n        address admin = projectOwners[projectId];\\r\\n        users[user].decreaseOutgoingRate(outgoingRate);\\r\\n        users[author].decreaseIncomeRate(incomeRate, _liquidationThreshold(author));\\r\\n        users[admin].decreaseIncomeRate(outgoingRate - incomeRate, _liquidationThreshold(admin));\\r\\n        _subscriptions[user].remove(author);\\r\\n\\r\\n        emit StreamRevoked(user, author, encodedRates);\\r\\n    }\\r\\n\\r\\n    function _update(address from, address to, uint256 amount) private {\\r\\n        if (from == to || amount == 0) return;\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            totalSupply += amount;\\r\\n        }\\r\\n        else {\\r\\n            users[from].decreaseBalance(amount, _liquidationThreshold(from));\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            totalSupply -= amount;\\r\\n        }\\r\\n        else {\\r\\n            users[to].increaseBalance(amount);\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _encodeRates(uint96 incomeRate, uint96 outgoingRate, uint256 projectId) internal pure returns (uint256 encodedRates) {\\r\\n        return uint256(incomeRate)\\r\\n            | (uint256(outgoingRate) << 96)\\r\\n            | (uint256(projectId) << 192);\\r\\n    }\\r\\n\\r\\n    function _decodeRates(uint256 encodedRates) internal pure returns (uint96 incomeRate, uint96 outgoingRate, uint256 projectId) {\\r\\n        incomeRate = uint96(encodedRates);\\r\\n        outgoingRate = uint96(encodedRates >> 96);\\r\\n        projectId = encodedRates >> 192;\\r\\n    }\\r\\n\\r\\n    function _chargeSigner(address signer, address relayer, address token, uint256 amount, bytes calldata /* extraData */) internal override {\\r\\n        if (token != address(TOKEN)) revert WrongToken();\\r\\n        _update(signer, relayer, amount);\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view override(Context, BySig) returns (address) {\\r\\n        return super._msgSender();\\r\\n    }\\r\\n\\r\\n    function _gasPrice() internal view virtual returns (uint256) {\\r\\n        return block.basefee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb2b7d5afc87ddda78c7d8a4a87a57f08b7e5d835e431d64d9e65b00694e6919a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPapaya.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IPapaya {\\r\\n    event SetDefaultSettings(uint256 indexed projectId, uint16 protocolFee);\\r\\n    event SetSettingsForUser(uint256 indexed projectId, address indexed user, uint16 protocolFee);\\r\\n    event StreamCreated(address indexed user, address indexed author, uint256 indexed encodedRates);\\r\\n    event StreamRevoked(address indexed user, address indexed author, uint256 indexed encodedRates);\\r\\n    event Liquidated(address indexed user, address indexed liquidator);\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event ProjectIdClaimed(uint256 projectId, address admin);\\r\\n\\r\\n    error InvalidProjectId(uint256 projectId);\\r\\n    error AccessDenied(uint256 projectId);\\r\\n    error WrongToken();\\r\\n    error WrongPercent();\\r\\n    error NotSubscribed();\\r\\n    error NotLiquidatable();\\r\\n    error NotLegal();\\r\\n    error ExcessOfRate();\\r\\n    error ExcessOfSubscriptions();\\r\\n\\r\\n    struct Settings {\\r\\n        bool initialized;\\r\\n        uint16 projectFee; // of 10k shares\\r\\n    }\\r\\n\\r\\n    function rescueFunds(IERC20 token, uint256 amount) external;\\r\\n\\r\\n    function claimProjectId() external;\\r\\n    function setDefaultSettings(Settings calldata settings, uint256 projectId) external;\\r\\n    function setSettingsForUser(address user, Settings calldata settings, uint256 projectId) external;\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n    function subscriptions(address from, address to) external view returns (bool, uint256 encodedRates);\\r\\n    function allSubscriptions(address from) external view returns(address[] memory to, uint256[] memory encodedRates);\\r\\n    function allProjectOwners() external view returns(address[] memory);\\r\\n\\r\\n    function deposit(uint256 amount, bool isPermit2) external;\\r\\n    function depositFor(uint256 amount, address user, bool isPermit2) external;\\r\\n    function withdraw(uint256 amount) external;\\r\\n    function withdrawTo(address to, uint256 amount) external;\\r\\n\\r\\n    function pay(address receiver, uint256 amount) external;\\r\\n\\r\\n    function subscribe(address author, uint96 subscriptionRate, uint256 projectId) external;\\r\\n    function unsubscribe(address author) external;\\r\\n    function liquidate(address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x77da0886de1961f511825e7ae0f8063f15de293480e68bccaf24ba1d6f859969\",\"license\":\"BUSL-1.1\"},\"contracts/library/UserLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary UserLib {\\r\\n    error TopUpBalance();\\r\\n    error InsufficialBalance();\\r\\n    error ReduceTheAmount();\\r\\n    error SafeCastOverflowedUintToInt(uint value);\\r\\n\\r\\n    uint256 constant SAFE_LIQUIDATION_TIME = 2 days;\\r\\n    uint256 constant LIQUIDATION_TIME = 1 days;\\r\\n\\r\\n    struct User {\\r\\n        int256 balance;\\r\\n        int256 incomeRate; // changes to this field requires _syncBalance() call\\r\\n        int256 outgoingRate; // changes to this field requires _syncBalance() call\\r\\n        uint256 updated;\\r\\n    }\\r\\n\\r\\n    modifier checkUint96(uint96 value) {\\r\\n        if(value > uint96(type(int96).max)) revert SafeCastOverflowedUintToInt(value);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkUint256(uint256 value) {\\r\\n        if(value > uint256(type(int256).max)) revert SafeCastOverflowedUintToInt(value);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user) internal view returns (int256) {\\r\\n        return balanceOf(user, 0);\\r\\n    }\\r\\n\\r\\n    function balanceOf(User storage user, uint256 afterDelay) internal view returns (int256) {\\r\\n        uint256 timePassed = block.timestamp - user.updated + afterDelay;\\r\\n        return user.balance + (user.incomeRate - user.outgoingRate) * int256(timePassed);\\r\\n    }\\r\\n\\r\\n    function _syncBalance(User storage user) private {\\r\\n        int256 balance = balanceOf(user);\\r\\n        if (balance != user.balance) {\\r\\n            user.balance = balance;\\r\\n        }\\r\\n        if (user.updated != block.timestamp) {\\r\\n            user.updated = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function increaseOutgoingRate(User storage user, uint96 diff, int256 threshold) internal checkUint96(diff) {\\r\\n        _syncBalance(user);\\r\\n        user.outgoingRate += int96(diff);\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function decreaseOutgoingRate(User storage user, uint96 diff) internal {\\r\\n        _syncBalance(user);\\r\\n        user.outgoingRate -= int96(diff);\\r\\n    }\\r\\n\\r\\n    function increaseIncomeRate(User storage user, uint96 diff) internal checkUint96(diff) {\\r\\n        _syncBalance(user);\\r\\n        user.incomeRate += int96(diff);\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeRate(User storage user, uint96 diff, int256 threshold) internal {\\r\\n        _syncBalance(user);\\r\\n        user.incomeRate -= int96(diff);\\r\\n        if (isSafeLiquidatable(user, threshold)) revert TopUpBalance();\\r\\n    }\\r\\n\\r\\n    function increaseBalance(User storage user, uint256 amount) internal checkUint256(amount) {\\r\\n        user.balance += int(amount);\\r\\n    }\\r\\n\\r\\n    function decreaseBalance(User storage user, uint256 amount, int256 threshold) internal checkUint256(amount) {\\r\\n        _syncBalance(user);\\r\\n        if (user.balance < int(amount)) revert InsufficialBalance();\\r\\n        user.balance -= int(amount);\\r\\n        if (isSafeLiquidatable(user, threshold)) revert ReduceTheAmount();\\r\\n    }\\r\\n\\r\\n    function drainBalance(User storage user, User storage liquidator) internal returns(int256 balance) {\\r\\n        balance = user.balance;\\r\\n        liquidator.balance += balance;\\r\\n        user.balance = 0;\\r\\n    }\\r\\n\\r\\n    function isSafeLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, SAFE_LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function isLiquidatable(User storage user, int256 threshold) internal view returns (bool) {\\r\\n        return _isLiquidatable(user, threshold, LIQUIDATION_TIME);\\r\\n    }\\r\\n\\r\\n    function _isLiquidatable(User storage user, int256 threshold, uint256 afterDelay) private view returns (bool) {\\r\\n        return user.outgoingRate > user.incomeRate &&\\r\\n            balanceOf(user) - int256(afterDelay) * user.outgoingRate < threshold;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x287083d51ec5cecb8b7344893a3acfb97102f05d0c72ecc1330c9c05233d593d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101e06040818152346200036157606082620053cd803803809162000025828562000382565b83398101031262000361576200003b82620003a6565b916020620000588362000050838501620003a6565b9301620003a6565b91620000636200073b565b948451620000718162000366565b60068152838101956550617061796160d01b8752805197620000938962000366565b60018952858901603160f81b8152620000ac84620003bb565b98610120998a52620000be8b6200058e565b94610140958652519020998a60e0525190209061010099828b524660a052835192888401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528585015260608401524660808401523060a084015260a0835260c083019083821060018060401b038311176200034b57818552835190206080523060c0526001600160a01b0391821692831562000334575050600280546001600160a01b03198116841790915583516000999093909183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08b80a381610160961686528161018097168752169580826004816101a09a808c5263313ce56760e01b82525afa9081156200032a578891620002e6575b5060ff91501660120360ff8111620002d25760ff1695604d8711620002be57506101c095600a0a86525195614c279788620007a68939608051886148e6015260a051886149b2015260c051886148b7015260e051886149350152518761495b01525186611769015251856117960152518481816114340152613b340152518381816102980152613af50152518281816106eb015281816114ae015281816115430152818161187b0152818161198f015281816127ef01528181612ca40152612eef015251818181611a4c015281816127ae01528181612b8401528181612be9015261351b0152f35b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b87526011600452602487fd5b905081813d831162000322575b620002ff818362000382565b810103126200031e575160ff811681036200031e5760ff9038620001d6565b8680fd5b503d620002f3565b83513d8a823e3d90fd5b631e4fbdf760e01b8252600060c490910152602490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b038211176200034b57604052565b601f909101601f19168101906001600160401b038211908210176200034b57604052565b51906001600160a01b03821682036200036157565b805160209190828110156200045a575090601f825111620003f95780825192015190808310620003ea57501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000440575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506200041c565b6001600160401b0381116200034b576000928354926001938481811c9116801562000583575b838210146200056f57601f811162000539575b5081601f8411600114620004d257509282939183928694620004c6575b50501b916000199060031b1c191617905560ff90565b015192503880620004b0565b919083601f1981168780528488209488905b888383106200051e575050501062000504575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620004f7565b858701518855909601959485019487935090810190620004e4565b85805284601f848820920160051c820191601f860160051c015b8281106200056357505062000493565b87815501859062000553565b634e487b7160e01b86526022600452602486fd5b90607f169062000480565b8051602090818110156200061c5750601f825111620005bb5780825192015190808310620003ea57501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000602575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620005de565b9192916001600160401b0381116200034b5760019182548381811c9116801562000730575b828210146200071a57601f8111620006e1575b5080601f83116001146200069457508192939460009262000688575b5050600019600383901b1c191690821b17905560ff90565b01519050388062000670565b90601f198316958460005282600020926000905b888210620006c957505083859697106200050457505050811b01905560ff90565b808785968294968601518155019501930190620006a8565b8360005283601f83600020920160051c820191601f850160051c015b8281106200070d57505062000654565b60008155018490620006fd565b634e487b7160e01b600052602260045260246000fd5b90607f169062000641565b63ffffffff60035460a01c168015620007a05760001981018181116200078a5764010000000011156200077857600201546001600160a01b031690565b604051634e23d03560e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b50339056fe608060408181526004918236101561001657600080fd5b60009260e08435811c9285846306fdde0314612e80575050826308b8ae3e14612e005782630acebbb314612d8d578263102b1bfb14612cc85782631752eda814612c4e57826318160ddd14612c0c578263193999a014612bb2578263205c287814612b355782632ca6f7711461286d5782632dffc938146128135782632e1a7d4d1461275f5782632f86556814612468578263313ce5671461242d57826334dd20261461238f5782633cc67ac714612314578263404f551d1461226657826353339ba0146121f45782635816d72314611d485782636207d31b14611cc857826370a0823114611c46578263715018a614611ba85782637262561c14611af85782637735915914611abd57826378e3214f1461189f57826382bfefc81461182f57826384b0196e1461172f5750816384b3d8e914610fe45781638c3adb0a146116b25781638d7e4ea01461164d5781638da5cb5b146115fa57816395d89b41146114d25781639a408321146114585781639a6c5952146113e95781639acf3f3514610fe9578163a5bc097f14610fe4578163a87430ba14610f5c578163ac9650d814610d31578163b8ca3b8314610cf6578163bbeb1ed714610cba578163c18004ff14610bc9578163c407687614610b78578163c49fc81614610b14578163daf36e7414610971578163e032e04f1461090b578163e82696ce1461075e578163eb24bae41461062f578163eb5c282314610443578163f2910a24146103a9578163f2fde38b146102c0575063f469f77a1461024f57600080fd5b346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a5576102f9612ffa565b90610302613e2d565b73ffffffffffffffffffffffffffffffffffffffff809216928315610376575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b9050346103a557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55761043f9282916103e7613022565b9035825264010000000b60205273ffffffffffffffffffffffffffffffffffffffff8383209116825260205220549051918160ff61ffff859460081c1691168390929161ffff60209160408401951515845216910152565b0390f35b9050346103a55760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55761047c612ffa565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261062b57606435916104b3836130bd565b73ffffffffffffffffffffffffffffffffffffffff809254816104d46143af565b169260031b1c16036105fc576401000000075484116105cd5761ffff916107d0836104fd6134fd565b16116105a6575083865264010000000b60205282862094169384865260205281852091602435918215158093036105a257836020937f433022a4c1ebbec318782b5a17e2e30db29e76903281aec98885c4268870b1cf95547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ffff006105846134fd565b60081b1693169116171790556105986134fd565b915191168152a380f35b8680fd5b83517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b508260249251917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b508260249251917f3815a7d4000000000000000000000000000000000000000000000000000000008352820152fd5b8380fd5b91905060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557610664612ffa565b9267ffffffffffffffff6044358181116103a557610685903690860161308f565b909160643590811161062b5783926106c994926106a86106b19336908a0161308f565b505036916133bd565b602081519101305af46106c2613a31565b9030614443565b916106d26143af565b9373ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016911603610737575061072561043f936024359033906141fc565b51918291602083526020830190612fb7565b90517fa0f3feea000000000000000000000000000000000000000000000000000000008152fd5b9050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36016060811261062b5782136103a557604435916107a3836130bd565b9073ffffffffffffffffffffffffffffffffffffffff9054816107c46143af565b169260031b1c16036108dd576401000000075483116108af5761ffff906107d0826107ed6134ec565b16116108875783855264010000000a60205280852092359182151580930361088357836020937f305a05d71233ae0e9f8e0f3a25392b027e2adc391ad36aaeab3f4a358e491ba195547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ffff006108656134ec565b60081b1693169116171790556108796134ec565b915191168152a280f35b8580fd5b9050517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b9160249251917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b9160249251917f3815a7d4000000000000000000000000000000000000000000000000000000008352820152fd5b5050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060209273ffffffffffffffffffffffffffffffffffffffff61095d612ffa565b168152640100000003845220549051908152f35b919050346103a557602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261062b5773ffffffffffffffffffffffffffffffffffffffff9392846109c5612ffa565b1684526401000000098152828420928051948583865491828152019086835284832090835b818110610b005750505086610a0091038761328f565b8551967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610a45610a308a61340e565b99610a3d86519b8c61328f565b808b5261340e565b0136858a01376002860190825b8851811015610adc5781610a66828b6134d8565b51168085528387528585205490811580610ac4575b610a95575090600191610a8e828d6134d8565b5201610a52565b886024918851917f02b56686000000000000000000000000000000000000000000000000000000008352820152fd5b50600081815260018b01602052604090205415610a7b565b84518581528061043f888d610af3848b018f613045565b918483039085015261313e565b8254845292860192600192830192016109ea565b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55735825264010000000a60209081529181902054905160ff82161515815260089190911c61ffff1691810191909152604090f35b5050346102bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657610bc3610bb2612ffa565b60243590610bbe6143af565b6141fc565b80f35b80fd5b8383346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5764010000000780547f633eb2fca506c8c90cd4ed861f3dd9ac07ab90cb064364d0112b6218ac952240610c2a6143af565b93805183815273ffffffffffffffffffffffffffffffffffffffff8096166020820152a1610c566143af565b9168010000000000000000821015610c8e57600182019055610c77906130bd565b90928084549260031b9316831b921b191617905580f35b6024856041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209051620222e08152f35b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090516107d08152f35b839150346102bc57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc65781359167ffffffffffffffff908184116103a557366023850112156103a5578301359081116102bc57602492602481016005943660248560051b85010111610f585773ffffffffffffffffffffffffffffffffffffffff610dc46143af565b163314600014610f3f578751610dd981613228565b858152925b610de78561340e565b96610df48a51988961328f565b8588527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610e218761340e565b0189885b828110610f2f57509050875b8b89898310610eb4578b849183519280840190808552835180925280868601968360051b870101940192955b828710610e6a5785850386f35b909192938280610ea4837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600196030186528851612fb7565b9601920196019592919092610e5d565b80610f1192610ef8610f04878d600199610ed68f8f8f8f8e901b01019061336c565b9290965195838794848601998a378401918383018a8152815194859201612f94565b0103808452018261328f565b5190305af46106c2613a31565b610f1b828c6134d8565b52610f26818b6134d8565b50018990610e31565b606082828d010152018a90610e25565b8751610f4a81613228565b858152858882015292610dde565b8480fd5b5050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060809273ffffffffffffffffffffffffffffffffffffffff610fae612ffa565b16815264010000000860205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b613172565b8383346102bc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57611022612ffa565b602435906bffffffffffffffffffffffff928383169384840361088357604435946401000000075486116113ba576110586143af565b73ffffffffffffffffffffffffffffffffffffffff98858a1696918a16871461139357896110846143af565b168952640100000009936020968588526110a089888d206145a3565b9061137b575b50508a6110b16143af565b168a528487526064868b20541461135357888a5264010000000b8752858a20888b528752858a2060ff8154161561133f575b546127109b9060081c61ffff168c038c811161131357828c9d61110b8b939d9e9c9d896131ad565b0416916111166143af565b9c8060c01b77ffffffffffffffffffffffff0000000000000000000000008860601b168517179d6111588b8483169e8f81526401000000088097522091613aaa565b906b7fffffffffffffffffffffff998a81116112e45790611196929161117d826149d8565b61118f6002830191600b0b8254613e11565b90556144fc565b6112bc57898f8e8152848d522088851161128d57918f916111d8906001856111c26111ed9998976149d8565b016111d187600b0b8254613e11565b90556130bd565b90549060031b1c1690528952878d2094613cea565b1692831161125e5750926112369492889261121a60018761120e8c996149d8565b0191600b0b8254613e11565b9055868a52835280892092848a52600284019052882055614b95565b507ff85d78bf0952aa4c25571c233942d6465622ecf64f705ab4089c40f3f72d171b8480a480f35b602490838651917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b602487868d51917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b858a517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b886024918e51917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b60248c6011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50888a5264010000000a8752858a206110e3565b5084517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b61138c916113876143af565b613d08565b8b806110a6565b84517f1f47ef38000000000000000000000000000000000000000000000000000000008152fd5b602488878551917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b919050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760243580151581036103a557610bc3916114a06143af565b9035906114ab6143af565b907f000000000000000000000000000000000000000000000000000000000000000061350e565b919050346103a557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55782815180937f95d89b410000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156115f0578361043f94936115cb575b50506107256022825180947f707000000000000000000000000000000000000000000000000000000000000060208301526115bb8151809260208686019101612f94565b810103600281018552018361328f565b6115e89293503d8091833e6115e0818361328f565b81019061330a565b903880611577565b81513d85823e3d90fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b9050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc92602084360112610bc65781359367ffffffffffffffff85116102bc5783908536030112610bc657506020926116ab9101613426565b9051908152f35b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557359063ffffffff82168092036103a55761172a9073ffffffffffffffffffffffffffffffffffffffff6117146143af565b1684526401000000036020528320918254613401565b905580f35b83908534610bc657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc65761043f9061178d7f0000000000000000000000000000000000000000000000000000000000000000614652565b936118106117ba7f00000000000000000000000000000000000000000000000000000000000000006147c7565b918051926117c784613228565b84845261180382519889987f0f000000000000000000000000000000000000000000000000000000000000008a528060208b0152890190612fb7565b9187830390880152612fb7565b9146606086015230608086015260a085015283820360c085015261313e565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b848285346103a557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557813573ffffffffffffffffffffffffffffffffffffffff8082169182810361088357602435926118fe613e2d565b8061198557505061190d6143af565b16814710611956578480809381935af1611925613a31565b501561193057505080f35b517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b82517fcd7860590000000000000000000000000000000000000000000000000000000081523081860152602490fd5b82969596949193947f00000000000000000000000000000000000000000000000000000000000000001680911490816119f7575b506119cf5750610bc39394506002541690613e93565b8590517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908351928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa8015611ab3578690611a7f575b611a779150611a71640100000006547f0000000000000000000000000000000000000000000000000000000000000000906131ef565b906133f4565b8411876119b9565b506020813d602011611aab575b81611a996020938361328f565b8101031261088357611a779051611a3b565b3d9150611a8c565b82513d88823e3d90fd5b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905160648152f35b508383346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57611b32612ffa565b611b6b73ffffffffffffffffffffffffffffffffffffffff80611b536143af565b168552640100000009602052838520908316906145a3565b929015611b80575090610bc3916113876143af565b8490517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b8434610bc657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657611bdf613e2d565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209173ffffffffffffffffffffffffffffffffffffffff611c98612ffa565b1681526401000000088352611cae8282206145e9565b9080821315611cc05750905b51908152f35b905090611cba565b838534610bc657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657611d3a90611d04612ffa565b83611d0d613022565b9273ffffffffffffffffffffffffffffffffffffffff8093168152640100000009602052209116906145a3565b825191151582526020820152f35b848285807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55767ffffffffffffffff918035838111610f5857611d94903690830161308f565b9360243590811161088357611dac903690840161308f565b94909682357fffffffffffffffffffffffffffffffffffffffff00000000000000000000000080821691601485106121df575b505060601c93826014116121db57888880808a808b83808d8d828e8e8e60148501907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8401928a51968491826064146121235782604814612061578260e01461202a578261010014611fee5782606014611f1557505061016014611ec857907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff09392917f9fd5a6cf00000000000000000000000000000000000000000000000000000000875286013701925af1505b5195863784305af4903d90833e15611ec4573d90f35b3d90fd5b91509150610164945061016092507f2b67b570000000000000000000000000000000000000000000000000000000008452830137826e22d473030f116ddee9f6b43ac78ba35af150611eae565b93915093506020955060549450610164976014927f2b67b5700000000000000000000000000000000000000000000000000000000089523390890152602488015260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff91816028850135821c0183166064880152602c840135811c60848801523060a48801526030840135901c011660c485015261010060e485015287610104850152826034820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af150611eae565b50505061010496935061010092507f8fcbaf0c0000000000000000000000000000000000000000000000000000000086528501375af150611eae565b9450505060e49693507fd505accf0000000000000000000000000000000000000000000000000000000086528501375af150611eae565b6101049996507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550601c92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906020947f8fcbaf0c000000000000000000000000000000000000000000000000000000008b5233908b01523060248b0152603c8301359535811c60448b01526018830135901c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af150611eae565b60e49996507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550603892507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906020947fd505accf000000000000000000000000000000000000000000000000000000008b5233908b01523060248b01528460588401359660448c01376034830135901c0160648901528360ff1c601b0160848901520160a48701371660c48401525af150611eae565b8780fd5b908092508460140360031b1b16168980611ddf565b509050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557359164010000000754831015610bc6575073ffffffffffffffffffffffffffffffffffffffff6122576020936130bd565b92905490519260031b1c168152f35b509050346103a557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557357fffffffff0000000000000000000000000000000000000000000000000000000081168091036103a5576024359163ffffffff831680930361062b5761172a9173ffffffffffffffffffffffffffffffffffffffff6122f56143af565b1685526401000000046020528185209085526020528320918254613401565b509050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55760ff600191359273ffffffffffffffffffffffffffffffffffffffff61236a6143af565b1685526401000000056020528085208460081c8652602052842092161b815417905580f35b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576123c8612ffa565b602435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361062b5792829173ffffffffffffffffffffffffffffffffffffffff6020951682526401000000048552828220908252845220549051908152f35b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905160128152f35b848285346103a557602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261062b576124a4612ffa565b916124ad6143af565b73ffffffffffffffffffffffffffffffffffffffff80851695909491851686146127385785875264010000000890818452848820926124eb81613aaa565b6002850154906001860154821391826126de575b5050156126b65792869194928894858b526401000000098552878b20968754918260028a01935b6125c957505050507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9495508261255b6143af565b168a5283528886812091805492612573848254613e11565b90555561257e6143af565b90808a13156125c3575088955b519586521693a361259a6143af565b16907facd74f5a0eb0d086de0eebe2d1e70d5742838c88cb2cf492fc201d39e056f7e08380a380f35b9561258b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9193959850809294979996500181811161268a578c8b8b61260e612626948a613126565b90549060031b1c92838152888d522054911684613d08565b801561265e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01918a969391838b96999794612526565b60248c6011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248d6011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5084517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b9091506126ea866145e9565b62015180918083029283050361270c5790612704916144e3565b128a806124ff565b60248c6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83517f1f47ef38000000000000000000000000000000000000000000000000000000008152fd5b8482346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57610bc390356127ec6127a06143af565b6127a86143af565b926127e77f0000000000000000000000000000000000000000000000000000000000000000926127e1846127dc81866131ef565b6131ad565b9061405a565b6131ef565b907f0000000000000000000000000000000000000000000000000000000000000000613e93565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090517f9ed1889e2180e1ec4f2d7816d43eb41f27d0bbbce4557680ecf32626c070c8648152f35b5083837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060813601126103a5576128a3612ffa565b60243567ffffffffffffffff808211610883578482880194833603011261088357604435908111610883576128db903690880161308f565b9084359264ffffffffff8460d01c164211612b0d576128f86143af565b69ffffffffffffffffffff808660801c16908115928315612b01575b50505015612ad957602461293591019361292e858861336c565b91876136ce565b15612ab1579061294e9161294886613426565b856138a0565b15612a895784806106b16129bd6129c494600397885463ffffffff98898260a01c169182600014612a695774010000000000000000000000000000000000000000018b557f800000000000000000000000000000000000000000000000000000000000000017908a015561336c565b36916133bd565b938254918260a01c169081600014612a42575061043f9550600114612a19577fffffffffffffffffffffffff000000000000000000000000000000000000000001905551918291602083526020830190612fb7565b507f80000000000000000000000000000000000000000000000000000000000000009055610725565b807f06a2af9e00000000000000000000000000000000000000000000000000000000889252fd5b5074010000000000000000000000000000000000000000178a555061336c565b8584517f356a4418000000000000000000000000000000000000000000000000000000008152fd5b8786517fd9c6386f000000000000000000000000000000000000000000000000000000008152fd5b8887517f3b06dcfb000000000000000000000000000000000000000000000000000000008152fd5b161490508a8080612914565b8887517f559895a3000000000000000000000000000000000000000000000000000000008152fd5b505050346102bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657610bc3612b70612ffa565b6127ec602435612b7e6143af565b906127e77f0000000000000000000000000000000000000000000000000000000000000000926127e1846127dc81866131ef565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090640100000006549051908152f35b8482346102bc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57612c87613022565b60443590811515820361062b57610bc3923590612ca26143af565b7f000000000000000000000000000000000000000000000000000000000000000061350e565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57805164010000000780548083529084526020808301949293927f22b16c268c0a907d5cde41071d7f26570a0d824b194d801eabe6ed93e978420092915b828210612d605761043f8686612d4e828b038361328f565b51918291602083526020830190613045565b835473ffffffffffffffffffffffffffffffffffffffff1687529586019560019384019390910190612d36565b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060209273ffffffffffffffffffffffffffffffffffffffff612ddf612ffa565b168152640100000005845281812060243560081c8252845220549051908152f35b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc579081600160ff602094612e42612ffa565b9473ffffffffffffffffffffffffffffffffffffffff6024359616815264010000000587528181208660081c825287522054925193161b1615158152f35b90858285346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5783907f06fdde030000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156115f0578361043f9493612f77575b5050610725602a825180947f53747265616d696e6720000000000000000000000000000000000000000000006020830152612f678151809260208686019101612f94565b810103600a81018552018361328f565b612f8c9293503d8091833e6115e0818361328f565b908380612f23565b60005b838110612fa75750506000910152565b8181015183820152602001612f97565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612ff381518092818752878088019101612f94565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361301d57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361301d57565b90815180825260208080930193019160005b828110613065575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101613057565b9181601f8401121561301d5782359167ffffffffffffffff831161301d576020838186019501011161301d57565b64010000000780548210156130f7576000527f22b16c268c0a907d5cde41071d7f26570a0d824b194d801eabe6ed93e97842000190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80548210156130f75760005260206000200190600090565b90815180825260208080930193019160005b82811061315e575050505090565b835185529381019392810192600101613150565b3461301d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261301d5760206040516127108152f35b818102929181159184041417156131c057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81156131f9570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6020810190811067ffffffffffffffff82111761324457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761324457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761324457604052565b67ffffffffffffffff811161324457601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60208183031261301d5780519067ffffffffffffffff821161301d570181601f8201121561301d57805161333d816132d0565b9261334b604051948561328f565b8184526020828401011161301d576133699160208085019101612f94565b90565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561301d570180359067ffffffffffffffff821161301d5760200191813603831361301d57565b9291926133c9826132d0565b916133d7604051938461328f565b82948184528183011161301d578281602093846000960137010152565b919082039182116131c057565b919082018092116131c057565b67ffffffffffffffff81116132445760051b60200190565b6134366129bd602083018361336c565b60208151910120906040519160208301917f9ed1889e2180e1ec4f2d7816d43eb41f27d0bbbce4557680ecf32626c070c8648352356040840152606083015260608252608082019180831067ffffffffffffffff841117613244576042926040525190206134a26148a0565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b80518210156130f75760209160051b010190565b60243561ffff8116810361301d5790565b60443561ffff8116810361301d5790565b91613546909491946135407f0000000000000000000000000000000000000000000000000000000000000000866131ad565b90613f2d565b1561362b5773ffffffffffffffffffffffffffffffffffffffff821161360157600091604051937f36c785160000000000000000000000000000000000000000000000000000000085526004850152306024850152604484015260648301528060846e22d473030f116ddee9f6b43ac78ba39382855af190816135f6575b50156135cc57565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b1515386135c4565b60046040517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b91906064602092600092604051917f23b872dd0000000000000000000000000000000000000000000000000000000083526004830152306024830152604482015282855af1908161367e5750156135cc57565b90503d156136995750600160005114601f3d11165b386135c4565b3b1515613693565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146131c05760010190565b9190928360fe1c9160028311613876576003831015613847576fffffffffffffffffffffffffffffffff851691831561380e57600184146137755750505060021461371a575050600090565b73ffffffffffffffffffffffffffffffffffffffff1660005264010000000560205260406000206effffffffffffffffffffffffffffff8260081c16600052602052604060002090600160ff835492161b8117809255141590565b92509273ffffffffffffffffffffffffffffffffffffffff91945016600052640100000004602052604060002091357fffffffff0000000000000000000000000000000000000000000000000000000091818380931691600481106137f8575b50509050166000526020526040600020908154916137f2836136a1565b90551490565b8391925060040360031b1b1616819038806137d5565b505092505073ffffffffffffffffffffffffffffffffffffffff166000526401000000036020526040600020908154916137f2836136a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60046040517f5f640821000000000000000000000000000000000000000000000000000000008152fd5b90919273ffffffffffffffffffffffffffffffffffffffff91828116928315613a2657604093848414918215613a1b575b82613949575b505061393f576020928260009384978351937f1626ba7e0000000000000000000000000000000000000000000000000000000098898652600486015260248501528160448501526064840137606401915afa613931575090565b600051143d60201416919050565b5050505050600190565b909150600085518580604114613a03576040146139be575080805b613973575b50161438806138d7565b817f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a16060830151106139a6575b50613969565b6080828a6020945282805260015afa505138816139a0565b807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208b01358060ff1c601b01602084015260208c8b850137166060820152613964565b5086890135821a602082015280878a81830137613964565b6041851492506138d1565b505050505050600090565b3d15613a5c573d90613a42826132d0565b91613a50604051938461328f565b82523d6000602084013e565b606090565b519069ffffffffffffffffffff8216820361301d57565b908160a091031261301d57613a8c81613a61565b91602082015191604081015191613369608060608401519301613a61565b73ffffffffffffffffffffffffffffffffffffffff604051917ffeaf968c000000000000000000000000000000000000000000000000000000009182845260a09160049383868681867f0000000000000000000000000000000000000000000000000000000000000000165afa958615613cba57600096613cc6575b5060405190815283818681867f0000000000000000000000000000000000000000000000000000000000000000165afa938415613cba57600094613c86575b5050166000526401000000096020526040600020546127109080820291820403613c5857620222e0908101809111613c5857906127dc613ba592486131ad565b908215613c2a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416613bfc57500590565b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6012907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b613ca6929450803d10613cb3575b613c9e818361328f565b810190613a78565b5050509050913880613b65565b503d613c94565b6040513d6000823e3d90fd5b613cde919650843d8611613cb357613c9e818361328f565b50505090509438613b26565b6bffffffffffffffffffffffff91821690821603919082116131c057565b7fc3d2e77d0bd010e5d80daa03dde8391ebcd61a9be3a09c67631b8fa0ec8b2c1c613ddd613de36bffffffffffffffffffffffff93848716948760601c1690613dc7613d568960c01c6130bd565b959073ffffffffffffffffffffffffffffffffffffffff80978192549060031b1c16931697600096898852613dcd6401000000089182602052600260408b20613d9e816149d8565b01613dad89600b0b82546144e3565b90558c169b8c8a528260205283613dc760408c2092613aaa565b91614545565b8488526020526040872094613cea565b91613aaa565b828152640100000009602052613e0c846040832081845260028101602052836040812055614a07565b5080a4565b919091600083820193841291129080158216911516176131c057565b73ffffffffffffffffffffffffffffffffffffffff806002541681613e506143af565b1603613e595750565b602490613e646143af565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815291166004820152fd5b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081613f0a575b5015613ee057565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15613f255750600160005114601f3d11165b38613ed8565b3b1515613f1f565b73ffffffffffffffffffffffffffffffffffffffff16908115808015614052575b61404d5764010000000690613f64838354613401565b825515613fa95760208282613f9d6000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95546133f4565b90555b604051908152a3565b508160005264010000000860205260406000207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821161401c57602082826140156000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9554613e11565b9055613fa0565b602482604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b505050565b508115613f4e565b73ffffffffffffffffffffffffffffffffffffffff81169081158080156141f4575b6141ee57156140d157507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000936401000000066140bd828254613401565b90555b640100000006613f9d8282546133f4565b816000526401000000086020526140ec604060002091613aaa565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84116141bd5761411c826149d8565b815491848312614193576141338561413a946144e3565b81556144fc565b614169577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000936140c0565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602484604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b50505050565b50831561407c565b909173ffffffffffffffffffffffffffffffffffffffff8093169282169183831480156143a7575b6141ee57826142e5575064010000000661423f828254613401565b90555b8261427c5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91640100000006613f9d8282546133f4565b8260005264010000000860205260406000207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821161401c5781816140157fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460209454613e11565b82600052640100000008602052614300604060002091613aaa565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161437657614330826149d8565b8154918383126141935761413384614347946144e3565b156142425760046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b602483604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b508115614224565b63ffffffff60035460a01c16801561443e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181116131c0576401000000001115614414576002015473ffffffffffffffffffffffffffffffffffffffff1690565b60046040517f4e23d035000000000000000000000000000000000000000000000000000000008152fd5b503390565b90614482575080511561445857805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806144da575b614493575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561448b565b818103929160001380158285131691841216176131c057565b906002820154600183015481139283614516575b50505090565b614522919293506145e9565b906202a30090808202918205036131c05761453c916144e3565b12388080614510565b6145739291614553826149d8565b61118f6bffffffffffffffffffffffff600184019216600b0b82546144e3565b61457957565b60046040517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b919080600052600283016020526040600020549283156000146145e1576145db92935060019160005201602052604060002054151590565b90600090565b505060019190565b6145f76003820154426133f4565b61460d82549260026001820154910154906144e3565b818102917f8000000000000000000000000000000000000000000000000000000000000000811460008312166131c05781830514901517156131c05761336991613e11565b60ff81146146a85760ff811690601f821161467e576040519161467483613273565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600080549060018260011c90600184169384156147bd575b6020948584108114614790578387528694939291811561475157506001146146f5575b50506133699250038261328f565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b818310614739575050613369935082010138806146e7565b85548784018501529485019486945091830191614721565b90506133699593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806146e7565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f16916146c4565b60ff81146147e95760ff811690601f821161467e576040519161467483613273565b506040516000600190600154918260011c9060018416938415614896575b6020948584108114614790578387528694939291811561475157506001146148375750506133699250038261328f565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b81831061487e575050613369935082010138806146e7565b85548784018501529485019486945091830191614866565b91607f1691614807565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163014806149af575b15614908577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff8211176132445760405251902090565b507f000000000000000000000000000000000000000000000000000000000000000046146148df565b6003906149e4816145e9565b815481036149ff575b5001805442036149fa5750565b429055565b8155386149ed565b90600182019060009281845282602052604084205490811515600014614b8e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828101818111614b6157825490848201918211614b3457818103614aca575b50505080548015614a9d57820191614a808383613126565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b614b1f614ada614aea9386613126565b90549060031b1c92839286613126565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080614a68565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b6000828152600182016020526040902054614bea57805490680100000000000000008210156132445782614bd3614aea846001809601855584613126565b905580549260005201602052604060002055600190565b505060009056fea2646970667358221220616ccb930765bbd2362ef40e885c2cf68bb16b0ec69ca968c96cff5d348390ef64736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b60009260e08435811c9285846306fdde0314612e80575050826308b8ae3e14612e005782630acebbb314612d8d578263102b1bfb14612cc85782631752eda814612c4e57826318160ddd14612c0c578263193999a014612bb2578263205c287814612b355782632ca6f7711461286d5782632dffc938146128135782632e1a7d4d1461275f5782632f86556814612468578263313ce5671461242d57826334dd20261461238f5782633cc67ac714612314578263404f551d1461226657826353339ba0146121f45782635816d72314611d485782636207d31b14611cc857826370a0823114611c46578263715018a614611ba85782637262561c14611af85782637735915914611abd57826378e3214f1461189f57826382bfefc81461182f57826384b0196e1461172f5750816384b3d8e914610fe45781638c3adb0a146116b25781638d7e4ea01461164d5781638da5cb5b146115fa57816395d89b41146114d25781639a408321146114585781639a6c5952146113e95781639acf3f3514610fe9578163a5bc097f14610fe4578163a87430ba14610f5c578163ac9650d814610d31578163b8ca3b8314610cf6578163bbeb1ed714610cba578163c18004ff14610bc9578163c407687614610b78578163c49fc81614610b14578163daf36e7414610971578163e032e04f1461090b578163e82696ce1461075e578163eb24bae41461062f578163eb5c282314610443578163f2910a24146103a9578163f2fde38b146102c0575063f469f77a1461024f57600080fd5b346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a5576102f9612ffa565b90610302613e2d565b73ffffffffffffffffffffffffffffffffffffffff809216928315610376575050600254827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b9050346103a557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55761043f9282916103e7613022565b9035825264010000000b60205273ffffffffffffffffffffffffffffffffffffffff8383209116825260205220549051918160ff61ffff859460081c1691168390929161ffff60209160408401951515845216910152565b0390f35b9050346103a55760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55761047c612ffa565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261062b57606435916104b3836130bd565b73ffffffffffffffffffffffffffffffffffffffff809254816104d46143af565b169260031b1c16036105fc576401000000075484116105cd5761ffff916107d0836104fd6134fd565b16116105a6575083865264010000000b60205282862094169384865260205281852091602435918215158093036105a257836020937f433022a4c1ebbec318782b5a17e2e30db29e76903281aec98885c4268870b1cf95547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ffff006105846134fd565b60081b1693169116171790556105986134fd565b915191168152a380f35b8680fd5b83517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b508260249251917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b508260249251917f3815a7d4000000000000000000000000000000000000000000000000000000008352820152fd5b8380fd5b91905060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557610664612ffa565b9267ffffffffffffffff6044358181116103a557610685903690860161308f565b909160643590811161062b5783926106c994926106a86106b19336908a0161308f565b505036916133bd565b602081519101305af46106c2613a31565b9030614443565b916106d26143af565b9373ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016911603610737575061072561043f936024359033906141fc565b51918291602083526020830190612fb7565b90517fa0f3feea000000000000000000000000000000000000000000000000000000008152fd5b9050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36016060811261062b5782136103a557604435916107a3836130bd565b9073ffffffffffffffffffffffffffffffffffffffff9054816107c46143af565b169260031b1c16036108dd576401000000075483116108af5761ffff906107d0826107ed6134ec565b16116108875783855264010000000a60205280852092359182151580930361088357836020937f305a05d71233ae0e9f8e0f3a25392b027e2adc391ad36aaeab3f4a358e491ba195547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ffff006108656134ec565b60081b1693169116171790556108796134ec565b915191168152a280f35b8580fd5b9050517f08e8d3d5000000000000000000000000000000000000000000000000000000008152fd5b9160249251917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b9160249251917f3815a7d4000000000000000000000000000000000000000000000000000000008352820152fd5b5050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060209273ffffffffffffffffffffffffffffffffffffffff61095d612ffa565b168152640100000003845220549051908152f35b919050346103a557602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261062b5773ffffffffffffffffffffffffffffffffffffffff9392846109c5612ffa565b1684526401000000098152828420928051948583865491828152019086835284832090835b818110610b005750505086610a0091038761328f565b8551967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610a45610a308a61340e565b99610a3d86519b8c61328f565b808b5261340e565b0136858a01376002860190825b8851811015610adc5781610a66828b6134d8565b51168085528387528585205490811580610ac4575b610a95575090600191610a8e828d6134d8565b5201610a52565b886024918851917f02b56686000000000000000000000000000000000000000000000000000000008352820152fd5b50600081815260018b01602052604090205415610a7b565b84518581528061043f888d610af3848b018f613045565b918483039085015261313e565b8254845292860192600192830192016109ea565b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55735825264010000000a60209081529181902054905160ff82161515815260089190911c61ffff1691810191909152604090f35b5050346102bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657610bc3610bb2612ffa565b60243590610bbe6143af565b6141fc565b80f35b80fd5b8383346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5764010000000780547f633eb2fca506c8c90cd4ed861f3dd9ac07ab90cb064364d0112b6218ac952240610c2a6143af565b93805183815273ffffffffffffffffffffffffffffffffffffffff8096166020820152a1610c566143af565b9168010000000000000000821015610c8e57600182019055610c77906130bd565b90928084549260031b9316831b921b191617905580f35b6024856041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209051620222e08152f35b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090516107d08152f35b839150346102bc57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc65781359167ffffffffffffffff908184116103a557366023850112156103a5578301359081116102bc57602492602481016005943660248560051b85010111610f585773ffffffffffffffffffffffffffffffffffffffff610dc46143af565b163314600014610f3f578751610dd981613228565b858152925b610de78561340e565b96610df48a51988961328f565b8588527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610e218761340e565b0189885b828110610f2f57509050875b8b89898310610eb4578b849183519280840190808552835180925280868601968360051b870101940192955b828710610e6a5785850386f35b909192938280610ea4837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600196030186528851612fb7565b9601920196019592919092610e5d565b80610f1192610ef8610f04878d600199610ed68f8f8f8f8e901b01019061336c565b9290965195838794848601998a378401918383018a8152815194859201612f94565b0103808452018261328f565b5190305af46106c2613a31565b610f1b828c6134d8565b52610f26818b6134d8565b50018990610e31565b606082828d010152018a90610e25565b8751610f4a81613228565b858152858882015292610dde565b8480fd5b5050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060809273ffffffffffffffffffffffffffffffffffffffff610fae612ffa565b16815264010000000860205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b613172565b8383346102bc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57611022612ffa565b602435906bffffffffffffffffffffffff928383169384840361088357604435946401000000075486116113ba576110586143af565b73ffffffffffffffffffffffffffffffffffffffff98858a1696918a16871461139357896110846143af565b168952640100000009936020968588526110a089888d206145a3565b9061137b575b50508a6110b16143af565b168a528487526064868b20541461135357888a5264010000000b8752858a20888b528752858a2060ff8154161561133f575b546127109b9060081c61ffff168c038c811161131357828c9d61110b8b939d9e9c9d896131ad565b0416916111166143af565b9c8060c01b77ffffffffffffffffffffffff0000000000000000000000008860601b168517179d6111588b8483169e8f81526401000000088097522091613aaa565b906b7fffffffffffffffffffffff998a81116112e45790611196929161117d826149d8565b61118f6002830191600b0b8254613e11565b90556144fc565b6112bc57898f8e8152848d522088851161128d57918f916111d8906001856111c26111ed9998976149d8565b016111d187600b0b8254613e11565b90556130bd565b90549060031b1c1690528952878d2094613cea565b1692831161125e5750926112369492889261121a60018761120e8c996149d8565b0191600b0b8254613e11565b9055868a52835280892092848a52600284019052882055614b95565b507ff85d78bf0952aa4c25571c233942d6465622ecf64f705ab4089c40f3f72d171b8480a480f35b602490838651917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b602487868d51917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b858a517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b886024918e51917f24775e06000000000000000000000000000000000000000000000000000000008352820152fd5b60248c6011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50888a5264010000000a8752858a206110e3565b5084517fa3f01687000000000000000000000000000000000000000000000000000000008152fd5b61138c916113876143af565b613d08565b8b806110a6565b84517f1f47ef38000000000000000000000000000000000000000000000000000000008152fd5b602488878551917fc88f99b4000000000000000000000000000000000000000000000000000000008352820152fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b919050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760243580151581036103a557610bc3916114a06143af565b9035906114ab6143af565b907f000000000000000000000000000000000000000000000000000000000000000061350e565b919050346103a557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55782815180937f95d89b410000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156115f0578361043f94936115cb575b50506107256022825180947f707000000000000000000000000000000000000000000000000000000000000060208301526115bb8151809260208686019101612f94565b810103600281018552018361328f565b6115e89293503d8091833e6115e0818361328f565b81019061330a565b903880611577565b81513d85823e3d90fd5b5050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b9050346103a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc92602084360112610bc65781359367ffffffffffffffff85116102bc5783908536030112610bc657506020926116ab9101613426565b9051908152f35b9050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557359063ffffffff82168092036103a55761172a9073ffffffffffffffffffffffffffffffffffffffff6117146143af565b1684526401000000036020528320918254613401565b905580f35b83908534610bc657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc65761043f9061178d7f0000000000000000000000000000000000000000000000000000000000000000614652565b936118106117ba7f00000000000000000000000000000000000000000000000000000000000000006147c7565b918051926117c784613228565b84845261180382519889987f0f000000000000000000000000000000000000000000000000000000000000008a528060208b0152890190612fb7565b9187830390880152612fb7565b9146606086015230608086015260a085015283820360c085015261313e565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b848285346103a557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557813573ffffffffffffffffffffffffffffffffffffffff8082169182810361088357602435926118fe613e2d565b8061198557505061190d6143af565b16814710611956578480809381935af1611925613a31565b501561193057505080f35b517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b82517fcd7860590000000000000000000000000000000000000000000000000000000081523081860152602490fd5b82969596949193947f00000000000000000000000000000000000000000000000000000000000000001680911490816119f7575b506119cf5750610bc39394506002541690613e93565b8590517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602491506020908351928380927f70a08231000000000000000000000000000000000000000000000000000000008252308c8301525afa8015611ab3578690611a7f575b611a779150611a71640100000006547f0000000000000000000000000000000000000000000000000000000000000000906131ef565b906133f4565b8411876119b9565b506020813d602011611aab575b81611a996020938361328f565b8101031261088357611a779051611a3b565b3d9150611a8c565b82513d88823e3d90fd5b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905160648152f35b508383346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57611b32612ffa565b611b6b73ffffffffffffffffffffffffffffffffffffffff80611b536143af565b168552640100000009602052838520908316906145a3565b929015611b80575090610bc3916113876143af565b8490517f237e6c28000000000000000000000000000000000000000000000000000000008152fd5b8434610bc657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657611bdf613e2d565b8073ffffffffffffffffffffffffffffffffffffffff6002547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505050346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5760209173ffffffffffffffffffffffffffffffffffffffff611c98612ffa565b1681526401000000088352611cae8282206145e9565b9080821315611cc05750905b51908152f35b905090611cba565b838534610bc657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657611d3a90611d04612ffa565b83611d0d613022565b9273ffffffffffffffffffffffffffffffffffffffff8093168152640100000009602052209116906145a3565b825191151582526020820152f35b848285807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55767ffffffffffffffff918035838111610f5857611d94903690830161308f565b9360243590811161088357611dac903690840161308f565b94909682357fffffffffffffffffffffffffffffffffffffffff00000000000000000000000080821691601485106121df575b505060601c93826014116121db57888880808a808b83808d8d828e8e8e60148501907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8401928a51968491826064146121235782604814612061578260e01461202a578261010014611fee5782606014611f1557505061016014611ec857907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff09392917f9fd5a6cf00000000000000000000000000000000000000000000000000000000875286013701925af1505b5195863784305af4903d90833e15611ec4573d90f35b3d90fd5b91509150610164945061016092507f2b67b570000000000000000000000000000000000000000000000000000000008452830137826e22d473030f116ddee9f6b43ac78ba35af150611eae565b93915093506020955060549450610164976014927f2b67b5700000000000000000000000000000000000000000000000000000000089523390890152602488015260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff91816028850135821c0183166064880152602c840135811c60848801523060a48801526030840135901c011660c485015261010060e485015287610104850152826034820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af150611eae565b50505061010496935061010092507f8fcbaf0c0000000000000000000000000000000000000000000000000000000086528501375af150611eae565b9450505060e49693507fd505accf0000000000000000000000000000000000000000000000000000000086528501375af150611eae565b6101049996507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550601c92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906020947f8fcbaf0c000000000000000000000000000000000000000000000000000000008b5233908b01523060248b0152603c8301359535811c60448b01526018830135901c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af150611eae565b60e49996507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550603892507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906020947fd505accf000000000000000000000000000000000000000000000000000000008b5233908b01523060248b01528460588401359660448c01376034830135901c0160648901528360ff1c601b0160848901520160a48701371660c48401525af150611eae565b8780fd5b908092508460140360031b1b16168980611ddf565b509050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557359164010000000754831015610bc6575073ffffffffffffffffffffffffffffffffffffffff6122576020936130bd565b92905490519260031b1c168152f35b509050346103a557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a557357fffffffff0000000000000000000000000000000000000000000000000000000081168091036103a5576024359163ffffffff831680930361062b5761172a9173ffffffffffffffffffffffffffffffffffffffff6122f56143af565b1685526401000000046020528185209085526020528320918254613401565b509050346103a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a55760ff600191359273ffffffffffffffffffffffffffffffffffffffff61236a6143af565b1685526401000000056020528085208460081c8652602052842092161b815417905580f35b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576123c8612ffa565b602435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361062b5792829173ffffffffffffffffffffffffffffffffffffffff6020951682526401000000048552828220908252845220549051908152f35b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc576020905160128152f35b848285346103a557602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261062b576124a4612ffa565b916124ad6143af565b73ffffffffffffffffffffffffffffffffffffffff80851695909491851686146127385785875264010000000890818452848820926124eb81613aaa565b6002850154906001860154821391826126de575b5050156126b65792869194928894858b526401000000098552878b20968754918260028a01935b6125c957505050507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9495508261255b6143af565b168a5283528886812091805492612573848254613e11565b90555561257e6143af565b90808a13156125c3575088955b519586521693a361259a6143af565b16907facd74f5a0eb0d086de0eebe2d1e70d5742838c88cb2cf492fc201d39e056f7e08380a380f35b9561258b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9193959850809294979996500181811161268a578c8b8b61260e612626948a613126565b90549060031b1c92838152888d522054911684613d08565b801561265e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01918a969391838b96999794612526565b60248c6011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248d6011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5084517fddeb79ba000000000000000000000000000000000000000000000000000000008152fd5b9091506126ea866145e9565b62015180918083029283050361270c5790612704916144e3565b128a806124ff565b60248c6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83517f1f47ef38000000000000000000000000000000000000000000000000000000008152fd5b8482346102bc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57610bc390356127ec6127a06143af565b6127a86143af565b926127e77f0000000000000000000000000000000000000000000000000000000000000000926127e1846127dc81866131ef565b6131ad565b9061405a565b6131ef565b907f0000000000000000000000000000000000000000000000000000000000000000613e93565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090517f9ed1889e2180e1ec4f2d7816d43eb41f27d0bbbce4557680ecf32626c070c8648152f35b5083837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060813601126103a5576128a3612ffa565b60243567ffffffffffffffff808211610883578482880194833603011261088357604435908111610883576128db903690880161308f565b9084359264ffffffffff8460d01c164211612b0d576128f86143af565b69ffffffffffffffffffff808660801c16908115928315612b01575b50505015612ad957602461293591019361292e858861336c565b91876136ce565b15612ab1579061294e9161294886613426565b856138a0565b15612a895784806106b16129bd6129c494600397885463ffffffff98898260a01c169182600014612a695774010000000000000000000000000000000000000000018b557f800000000000000000000000000000000000000000000000000000000000000017908a015561336c565b36916133bd565b938254918260a01c169081600014612a42575061043f9550600114612a19577fffffffffffffffffffffffff000000000000000000000000000000000000000001905551918291602083526020830190612fb7565b507f80000000000000000000000000000000000000000000000000000000000000009055610725565b807f06a2af9e00000000000000000000000000000000000000000000000000000000889252fd5b5074010000000000000000000000000000000000000000178a555061336c565b8584517f356a4418000000000000000000000000000000000000000000000000000000008152fd5b8786517fd9c6386f000000000000000000000000000000000000000000000000000000008152fd5b8887517f3b06dcfb000000000000000000000000000000000000000000000000000000008152fd5b161490508a8080612914565b8887517f559895a3000000000000000000000000000000000000000000000000000000008152fd5b505050346102bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bc657610bc3612b70612ffa565b6127ec602435612b7e6143af565b906127e77f0000000000000000000000000000000000000000000000000000000000000000926127e1846127dc81866131ef565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57602090640100000006549051908152f35b8482346102bc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57612c87613022565b60443590811515820361062b57610bc3923590612ca26143af565b7f000000000000000000000000000000000000000000000000000000000000000061350e565b505050346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc57805164010000000780548083529084526020808301949293927f22b16c268c0a907d5cde41071d7f26570a0d824b194d801eabe6ed93e978420092915b828210612d605761043f8686612d4e828b038361328f565b51918291602083526020830190613045565b835473ffffffffffffffffffffffffffffffffffffffff1687529586019560019384019390910190612d36565b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc578060209273ffffffffffffffffffffffffffffffffffffffff612ddf612ffa565b168152640100000005845281812060243560081c8252845220549051908152f35b505050346102bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc579081600160ff602094612e42612ffa565b9473ffffffffffffffffffffffffffffffffffffffff6024359616815264010000000587528181208660081c825287522054925193161b1615158152f35b90858285346102bc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bc5783907f06fdde030000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156115f0578361043f9493612f77575b5050610725602a825180947f53747265616d696e6720000000000000000000000000000000000000000000006020830152612f678151809260208686019101612f94565b810103600a81018552018361328f565b612f8c9293503d8091833e6115e0818361328f565b908380612f23565b60005b838110612fa75750506000910152565b8181015183820152602001612f97565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612ff381518092818752878088019101612f94565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361301d57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361301d57565b90815180825260208080930193019160005b828110613065575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101613057565b9181601f8401121561301d5782359167ffffffffffffffff831161301d576020838186019501011161301d57565b64010000000780548210156130f7576000527f22b16c268c0a907d5cde41071d7f26570a0d824b194d801eabe6ed93e97842000190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80548210156130f75760005260206000200190600090565b90815180825260208080930193019160005b82811061315e575050505090565b835185529381019392810192600101613150565b3461301d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261301d5760206040516127108152f35b818102929181159184041417156131c057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81156131f9570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6020810190811067ffffffffffffffff82111761324457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761324457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761324457604052565b67ffffffffffffffff811161324457601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60208183031261301d5780519067ffffffffffffffff821161301d570181601f8201121561301d57805161333d816132d0565b9261334b604051948561328f565b8184526020828401011161301d576133699160208085019101612f94565b90565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561301d570180359067ffffffffffffffff821161301d5760200191813603831361301d57565b9291926133c9826132d0565b916133d7604051938461328f565b82948184528183011161301d578281602093846000960137010152565b919082039182116131c057565b919082018092116131c057565b67ffffffffffffffff81116132445760051b60200190565b6134366129bd602083018361336c565b60208151910120906040519160208301917f9ed1889e2180e1ec4f2d7816d43eb41f27d0bbbce4557680ecf32626c070c8648352356040840152606083015260608252608082019180831067ffffffffffffffff841117613244576042926040525190206134a26148a0565b90604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b80518210156130f75760209160051b010190565b60243561ffff8116810361301d5790565b60443561ffff8116810361301d5790565b91613546909491946135407f0000000000000000000000000000000000000000000000000000000000000000866131ad565b90613f2d565b1561362b5773ffffffffffffffffffffffffffffffffffffffff821161360157600091604051937f36c785160000000000000000000000000000000000000000000000000000000085526004850152306024850152604484015260648301528060846e22d473030f116ddee9f6b43ac78ba39382855af190816135f6575b50156135cc57565b60046040517ff4059071000000000000000000000000000000000000000000000000000000008152fd5b90503b1515386135c4565b60046040517f8112e119000000000000000000000000000000000000000000000000000000008152fd5b91906064602092600092604051917f23b872dd0000000000000000000000000000000000000000000000000000000083526004830152306024830152604482015282855af1908161367e5750156135cc57565b90503d156136995750600160005114601f3d11165b386135c4565b3b1515613693565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146131c05760010190565b9190928360fe1c9160028311613876576003831015613847576fffffffffffffffffffffffffffffffff851691831561380e57600184146137755750505060021461371a575050600090565b73ffffffffffffffffffffffffffffffffffffffff1660005264010000000560205260406000206effffffffffffffffffffffffffffff8260081c16600052602052604060002090600160ff835492161b8117809255141590565b92509273ffffffffffffffffffffffffffffffffffffffff91945016600052640100000004602052604060002091357fffffffff0000000000000000000000000000000000000000000000000000000091818380931691600481106137f8575b50509050166000526020526040600020908154916137f2836136a1565b90551490565b8391925060040360031b1b1616819038806137d5565b505092505073ffffffffffffffffffffffffffffffffffffffff166000526401000000036020526040600020908154916137f2836136a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60046040517f5f640821000000000000000000000000000000000000000000000000000000008152fd5b90919273ffffffffffffffffffffffffffffffffffffffff91828116928315613a2657604093848414918215613a1b575b82613949575b505061393f576020928260009384978351937f1626ba7e0000000000000000000000000000000000000000000000000000000098898652600486015260248501528160448501526064840137606401915afa613931575090565b600051143d60201416919050565b5050505050600190565b909150600085518580604114613a03576040146139be575080805b613973575b50161438806138d7565b817f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a16060830151106139a6575b50613969565b6080828a6020945282805260015afa505138816139a0565b807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208b01358060ff1c601b01602084015260208c8b850137166060820152613964565b5086890135821a602082015280878a81830137613964565b6041851492506138d1565b505050505050600090565b3d15613a5c573d90613a42826132d0565b91613a50604051938461328f565b82523d6000602084013e565b606090565b519069ffffffffffffffffffff8216820361301d57565b908160a091031261301d57613a8c81613a61565b91602082015191604081015191613369608060608401519301613a61565b73ffffffffffffffffffffffffffffffffffffffff604051917ffeaf968c000000000000000000000000000000000000000000000000000000009182845260a09160049383868681867f0000000000000000000000000000000000000000000000000000000000000000165afa958615613cba57600096613cc6575b5060405190815283818681867f0000000000000000000000000000000000000000000000000000000000000000165afa938415613cba57600094613c86575b5050166000526401000000096020526040600020546127109080820291820403613c5857620222e0908101809111613c5857906127dc613ba592486131ad565b908215613c2a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416613bfc57500590565b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6012907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b613ca6929450803d10613cb3575b613c9e818361328f565b810190613a78565b5050509050913880613b65565b503d613c94565b6040513d6000823e3d90fd5b613cde919650843d8611613cb357613c9e818361328f565b50505090509438613b26565b6bffffffffffffffffffffffff91821690821603919082116131c057565b7fc3d2e77d0bd010e5d80daa03dde8391ebcd61a9be3a09c67631b8fa0ec8b2c1c613ddd613de36bffffffffffffffffffffffff93848716948760601c1690613dc7613d568960c01c6130bd565b959073ffffffffffffffffffffffffffffffffffffffff80978192549060031b1c16931697600096898852613dcd6401000000089182602052600260408b20613d9e816149d8565b01613dad89600b0b82546144e3565b90558c169b8c8a528260205283613dc760408c2092613aaa565b91614545565b8488526020526040872094613cea565b91613aaa565b828152640100000009602052613e0c846040832081845260028101602052836040812055614a07565b5080a4565b919091600083820193841291129080158216911516176131c057565b73ffffffffffffffffffffffffffffffffffffffff806002541681613e506143af565b1603613e595750565b602490613e646143af565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815291166004820152fd5b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081613f0a575b5015613ee057565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15613f255750600160005114601f3d11165b38613ed8565b3b1515613f1f565b73ffffffffffffffffffffffffffffffffffffffff16908115808015614052575b61404d5764010000000690613f64838354613401565b825515613fa95760208282613f9d6000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95546133f4565b90555b604051908152a3565b508160005264010000000860205260406000207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821161401c57602082826140156000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9554613e11565b9055613fa0565b602482604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b505050565b508115613f4e565b73ffffffffffffffffffffffffffffffffffffffff81169081158080156141f4575b6141ee57156140d157507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000936401000000066140bd828254613401565b90555b640100000006613f9d8282546133f4565b816000526401000000086020526140ec604060002091613aaa565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84116141bd5761411c826149d8565b815491848312614193576141338561413a946144e3565b81556144fc565b614169577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000936140c0565b60046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b60046040517fda89fe91000000000000000000000000000000000000000000000000000000008152fd5b602484604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b50505050565b50831561407c565b909173ffffffffffffffffffffffffffffffffffffffff8093169282169183831480156143a7575b6141ee57826142e5575064010000000661423f828254613401565b90555b8261427c5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91640100000006613f9d8282546133f4565b8260005264010000000860205260406000207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821161401c5781816140157fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460209454613e11565b82600052640100000008602052614300604060002091613aaa565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161437657614330826149d8565b8154918383126141935761413384614347946144e3565b156142425760046040517fb2285767000000000000000000000000000000000000000000000000000000008152fd5b602483604051907f24775e060000000000000000000000000000000000000000000000000000000082526004820152fd5b508115614224565b63ffffffff60035460a01c16801561443e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181116131c0576401000000001115614414576002015473ffffffffffffffffffffffffffffffffffffffff1690565b60046040517f4e23d035000000000000000000000000000000000000000000000000000000008152fd5b503390565b90614482575080511561445857805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806144da575b614493575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561448b565b818103929160001380158285131691841216176131c057565b906002820154600183015481139283614516575b50505090565b614522919293506145e9565b906202a30090808202918205036131c05761453c916144e3565b12388080614510565b6145739291614553826149d8565b61118f6bffffffffffffffffffffffff600184019216600b0b82546144e3565b61457957565b60046040517fe9e3f12e000000000000000000000000000000000000000000000000000000008152fd5b919080600052600283016020526040600020549283156000146145e1576145db92935060019160005201602052604060002054151590565b90600090565b505060019190565b6145f76003820154426133f4565b61460d82549260026001820154910154906144e3565b818102917f8000000000000000000000000000000000000000000000000000000000000000811460008312166131c05781830514901517156131c05761336991613e11565b60ff81146146a85760ff811690601f821161467e576040519161467483613273565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600080549060018260011c90600184169384156147bd575b6020948584108114614790578387528694939291811561475157506001146146f5575b50506133699250038261328f565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b818310614739575050613369935082010138806146e7565b85548784018501529485019486945091830191614721565b90506133699593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806146e7565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f16916146c4565b60ff81146147e95760ff811690601f821161467e576040519161467483613273565b506040516000600190600154918260011c9060018416938415614896575b6020948584108114614790578387528694939291811561475157506001146148375750506133699250038261328f565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b81831061487e575050613369935082010138806146e7565b85548784018501529485019486945091830191614866565b91607f1691614807565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163014806149af575b15614908577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff8211176132445760405251902090565b507f000000000000000000000000000000000000000000000000000000000000000046146148df565b6003906149e4816145e9565b815481036149ff575b5001805442036149fa5750565b429055565b8155386149ed565b90600182019060009281845282602052604084205490811515600014614b8e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828101818111614b6157825490848201918211614b3457818103614aca575b50505080548015614a9d57820191614a808383613126565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b614b1f614ada614aea9386613126565b90549060031b1c92839286613126565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b90558652846020526040862055388080614a68565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b6000828152600182016020526040902054614bea57805490680100000000000000008210156132445782614bd3614aea846001809601855584613126565b905580549260005201602052604060002055600190565b505060009056fea2646970667358221220616ccb930765bbd2362ef40e885c2cf68bb16b0ec69ca968c96cff5d348390ef64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnumerableMapNonexistentKey(bytes32)": [
        {
          "details": "Query for a nonexistent map key."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "IndexOutOfBounds()": [
        {
          "details": "Error thrown when attempting to access an index outside the bounds of the array."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "bySig(address,(uint256,bytes),bytes)": {
        "params": {
          "sig": "The `SignedCall` structure containing the call traits and data.",
          "signature": "The signature authorizing the call.",
          "signer": "The address of the signer authorizing the call."
        },
        "returns": {
          "ret": "The bytes result of the executed call."
        }
      },
      "bySigAccountNonces(address)": {
        "params": {
          "account": "The address of the account."
        },
        "returns": {
          "_0": "The current nonce for the account."
        }
      },
      "bySigSelectorNonces(address,bytes4)": {
        "params": {
          "account": "The address of the account.",
          "selector": "The selector for which the nonce is being retrieved."
        },
        "returns": {
          "_0": "The current nonce for the specified selector and account."
        }
      },
      "bySigUniqueNonces(address,uint256)": {
        "details": "This function divides the nonce space into slots to efficiently manage storage. A unique nonce is considered used if its corresponding bit in the storage slot is set.",
        "params": {
          "account": "The address of the account for which the nonce is being checked.",
          "nonce": "The unique nonce to check. It is divided into slots for storage efficiency."
        },
        "returns": {
          "_0": "bool True if the nonce has been used, false otherwise."
        }
      },
      "bySigUniqueNoncesSlot(address,uint256)": {
        "details": "This function allows access to the raw storage slot used to track used nonces, divided into slots for efficiency. Each bit in the returned value represents the used/unused status of a nonce within that slot.",
        "params": {
          "account": "The address of the account for which the nonce slot is being retrieved.",
          "nonce": "The nonce for which the storage slot is being retrieved. The function calculates the correct slot based on this value."
        },
        "returns": {
          "_0": "uint256 The raw value of the storage slot that tracks the used/unused status of nonces in the specified slot for the given account."
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "hashBySig((uint256,bytes))": {
        "params": {
          "sig": "The `SignedCall` structure containing the call traits and data."
        },
        "returns": {
          "_0": "The EIP-712 compliant hash of the `SignedCall` struct."
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permitAndCall(bytes,bytes)": {
        "params": {
          "action": "The data representing the action to be executed after the permit.",
          "permit": "ERC20 token address (20 bytes) concatinated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sponsoredCall(address,uint256,bytes,bytes)": {
        "details": "Facilitates execution of a delegate call where the signer covers the transaction fees. Requires `_chargeSigner` to be overridden to define the fee transfer logic.",
        "params": {
          "amount": "amount value used for sponsored logic (for instance, fee amount to be charged to the signer).",
          "data": "Encoded function call to execute.",
          "extraData": "Additional data for sponsored process in `_chargeSigner` method.",
          "token": "Address of the token used for sponsored logic (for instance, for fee payment)."
        },
        "returns": {
          "ret": "Result of the executed call."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useBySigAccountNonce(uint32)": {
        "params": {
          "advance": "The amount by which to advance the nonce."
        }
      },
      "useBySigSelectorNonce(bytes4,uint32)": {
        "params": {
          "advance": "The amount by which to advance the nonce.",
          "selector": "The selector for which the nonce is being advanced."
        }
      },
      "useBySigUniqueNonce(uint256)": {
        "params": {
          "nonce": "The nonce being marked as used."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DeadlineExceeded()": [
        {
          "notice": "Emitted when a call is attempted after the specified deadline has passed."
        }
      ],
      "WrongNonce()": [
        {
          "notice": "Emitted when the nonce used for a call is incorrect."
        }
      ],
      "WrongNonceType()": [
        {
          "notice": "Thrown when an invalid nonce type is encountered."
        }
      ],
      "WrongRelayer()": [
        {
          "notice": "Emitted when a call is made by an unauthorized relayer."
        }
      ],
      "WrongSignature()": [
        {
          "notice": "Emitted when the signature provided for a call does not match the expected signature."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "bySig(address,(uint256,bytes),bytes)": {
        "notice": "Executes a signature-authorized call on behalf of the signer."
      },
      "bySigAccountNonces(address)": {
        "notice": "Retrieves the account nonce for the specified account."
      },
      "bySigSelectorNonces(address,bytes4)": {
        "notice": "Retrieves the selector nonce for a specific account and selector."
      },
      "bySigUniqueNonces(address,uint256)": {
        "notice": "Checks if a unique nonce has already been used for a given account."
      },
      "bySigUniqueNoncesSlot(address,uint256)": {
        "notice": "Retrieves the storage slot value for a given account and nonce slot."
      },
      "hashBySig((uint256,bytes))": {
        "notice": "Hashes a `SignedCall` struct using EIP-712 typed data hashing rules."
      },
      "permitAndCall(bytes,bytes)": {
        "notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
      },
      "sponsoredCall(address,uint256,bytes,bytes)": {
        "notice": "Executes a call sponsored by the signer (for instance, by fee), intended to be used, for instance, in conjunction with `bySig`."
      },
      "useBySigAccountNonce(uint32)": {
        "notice": "Advances the account nonce for the sender by a specified amount."
      },
      "useBySigSelectorNonce(bytes4,uint32)": {
        "notice": "Advances the selector nonce for the sender and a specific selector by a specified amount."
      },
      "useBySigUniqueNonce(uint256)": {
        "notice": "Marks a unique nonce as used for the sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3270,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3272,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1963,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1426,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_msgSenders",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)174_storage"
      },
      {
        "astId": 1430,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_bySigAccountNonces",
        "offset": 0,
        "slot": "4294967299",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1436,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_bySigSelectorNonces",
        "offset": 0,
        "slot": "4294967300",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))"
      },
      {
        "astId": 1442,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_bySigUniqueNonces",
        "offset": 0,
        "slot": "4294967301",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6658,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4294967302",
        "type": "t_uint256"
      },
      {
        "astId": 6661,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "projectOwners",
        "offset": 0,
        "slot": "4294967303",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6666,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "users",
        "offset": 0,
        "slot": "4294967304",
        "type": "t_mapping(t_address,t_struct(User)8142_storage)"
      },
      {
        "astId": 6671,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "_subscriptions",
        "offset": 0,
        "slot": "4294967305",
        "type": "t_mapping(t_address,t_struct(AddressToUintMap)5373_storage)"
      },
      {
        "astId": 6676,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "defaultSettings",
        "offset": 0,
        "slot": "4294967306",
        "type": "t_mapping(t_uint256,t_struct(Settings)7981_storage)"
      },
      {
        "astId": 6683,
        "contract": "contracts/Papaya.sol:Papaya",
        "label": "userSettings",
        "offset": 0,
        "slot": "4294967307",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Settings)7981_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4294967296_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4294967296]",
        "numberOfBytes": "137438953472"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressToUintMap)5373_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.AddressToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressToUintMap)5373_storage"
      },
      "t_mapping(t_address,t_struct(Settings)7981_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPapaya.Settings)",
        "numberOfBytes": "32",
        "value": "t_struct(Settings)7981_storage"
      },
      "t_mapping(t_address,t_struct(User)8142_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserLib.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)8142_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Settings)7981_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IPapaya.Settings))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Settings)7981_storage)"
      },
      "t_mapping(t_uint256,t_struct(Settings)7981_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPapaya.Settings)",
        "numberOfBytes": "32",
        "value": "t_struct(Settings)7981_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)5373_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 5372,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)4715_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)6013_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 6012,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5819_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)4715_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 4710,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)6013_storage"
          },
          {
            "astId": 4714,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Data)174_storage": {
        "encoding": "inplace",
        "label": "struct AddressArray.Data",
        "members": [
          {
            "astId": 173,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_raw",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)4294967296_storage"
          }
        ],
        "numberOfBytes": "137438953472"
      },
      "t_struct(Set)5819_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5814,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5818,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)7981_storage": {
        "encoding": "inplace",
        "label": "struct IPapaya.Settings",
        "members": [
          {
            "astId": 7978,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7980,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "projectFee",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)8142_storage": {
        "encoding": "inplace",
        "label": "struct UserLib.User",
        "members": [
          {
            "astId": 8135,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 8137,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "incomeRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 8139,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "outgoingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 8141,
            "contract": "contracts/Papaya.sol:Papaya",
            "label": "updated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}